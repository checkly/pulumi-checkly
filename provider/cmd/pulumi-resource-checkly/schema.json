{
    "name": "checkly",
    "displayName": "Checkly",
    "description": "A Pulumi package for creating and managing Checkly monitoring resources.",
    "keywords": [
        "pulumi",
        "checkly",
        "category/monitoring"
    ],
    "homepage": "https://www.pulumi.com/registry/packages/checkly",
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`checkly` Terraform Provider](https://github.com/checkly/terraform-provider-checkly).",
    "repository": "https://github.com/checkly/pulumi-checkly",
    "logoUrl": "https://raw.githubusercontent.com/checkly/pulumi-checkly/main/assets/checkly.svg",
    "pluginDownloadURL": "github://api.github.com/checkly",
    "publisher": "checkly",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string"
            }
        },
        "defaults": [
            "apiKey"
        ]
    },
    "types": {
        "checkly:index/AlertChannelEmail:AlertChannelEmail": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address"
            ]
        },
        "checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "name",
                "priority",
                "region"
            ]
        },
        "checkly:index/AlertChannelPagerduty:AlertChannelPagerduty": {
            "properties": {
                "account": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceKey"
            ]
        },
        "checkly:index/AlertChannelSlack:AlertChannelSlack": {
            "properties": {
                "channel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "channel",
                "url"
            ]
        },
        "checkly:index/AlertChannelSms:AlertChannelSms": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "number": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "number"
            ]
        },
        "checkly:index/AlertChannelWebhook:AlertChannelWebhook": {
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webhookSecret": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "name",
                        "queryParameters",
                        "url"
                    ]
                }
            }
        },
        "checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription": {
            "properties": {
                "activated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channelId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activated",
                "channelId"
            ]
        },
        "checkly:index/CheckAlertSettings:CheckAlertSettings": {
            "properties": {
                "escalationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsReminder:CheckAlertSettingsReminder"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsRunBasedEscalation:CheckAlertSettingsRunBasedEscalation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsSslCertificate:CheckAlertSettingsSslCertificate"
                    },
                    "deprecationMessage": "This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsTimeBasedEscalation:CheckAlertSettingsTimeBasedEscalation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsReminder:CheckAlertSettingsReminder": {
            "properties": {
                "amount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsRunBasedEscalation:CheckAlertSettingsRunBasedEscalation": {
            "properties": {
                "failedRunThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsSslCertificate:CheckAlertSettingsSslCertificate": {
            "properties": {
                "alertThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsTimeBasedEscalation:CheckAlertSettingsTimeBasedEscalation": {
            "properties": {
                "minutesFailingThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckEnvironmentVariable:CheckEnvironmentVariable": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locked": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription": {
            "properties": {
                "activated": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channelId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "activated",
                "channelId"
            ]
        },
        "checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings": {
            "properties": {
                "escalationType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsReminder:CheckGroupAlertSettingsReminder"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsRunBasedEscalation:CheckGroupAlertSettingsRunBasedEscalation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsSslCertificate:CheckGroupAlertSettingsSslCertificate"
                    },
                    "deprecationMessage": "This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsTimeBasedEscalation:CheckGroupAlertSettingsTimeBasedEscalation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsReminder:CheckGroupAlertSettingsReminder": {
            "properties": {
                "amount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsRunBasedEscalation:CheckGroupAlertSettingsRunBasedEscalation": {
            "properties": {
                "failedRunThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsSslCertificate:CheckGroupAlertSettingsSslCertificate": {
            "properties": {
                "alertThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsTimeBasedEscalation:CheckGroupAlertSettingsTimeBasedEscalation": {
            "properties": {
                "minutesFailingThreshold": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults": {
            "properties": {
                "assertions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaultsAssertion:CheckGroupApiCheckDefaultsAssertion"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "basicAuth": {
                    "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaultsBasicAuth:CheckGroupApiCheckDefaultsBasicAuth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "default": "",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basicAuth",
                        "headers",
                        "queryParameters",
                        "url"
                    ]
                }
            }
        },
        "checkly:index/CheckGroupApiCheckDefaultsAssertion:CheckGroupApiCheckDefaultsAssertion": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source",
                "target"
            ]
        },
        "checkly:index/CheckGroupApiCheckDefaultsBasicAuth:CheckGroupApiCheckDefaultsBasicAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "checkly:index/CheckGroupEnvironmentVariable:CheckGroupEnvironmentVariable": {
            "properties": {
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locked": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "checkly:index/CheckRequest:CheckRequest": {
            "properties": {
                "assertions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckRequestAssertion:CheckRequestAssertion"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "basicAuth": {
                    "$ref": "#/types/checkly:index/CheckRequestBasicAuth:CheckRequestBasicAuth",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bodyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "followRedirects": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipSsl": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basicAuth",
                        "headers",
                        "queryParameters",
                        "url"
                    ]
                }
            }
        },
        "checkly:index/CheckRequestAssertion:CheckRequestAssertion": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "property": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source"
            ]
        },
        "checkly:index/CheckRequestBasicAuth:CheckRequestBasicAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the checkly package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string"
            }
        },
        "required": [
            "apiKey"
        ],
        "inputProperties": {
            "accountId": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "apiKey"
        ]
    },
    "resources": {
        "checkly:index/alertChannel:AlertChannel": {
            "description": "Allows you to define alerting channels for the checks and groups in your account\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@checkly/pulumi\";\n\n// An Email alert channel\nconst emailAc = new checkly.AlertChannel(\"emailAc\", {\n    email: {\n        address: \"john@example.com\",\n    },\n    sendRecovery: true,\n    sendFailure: false,\n    sendDegraded: true,\n    sslExpiry: true,\n    sslExpiryThreshold: 22,\n});\n// A SMS alert channel\nconst smsAc = new checkly.AlertChannel(\"smsAc\", {\n    sms: {\n        name: \"john\",\n        number: \"+5491100001111\",\n    },\n    sendRecovery: true,\n    sendFailure: true,\n});\n// A Slack alert channel\nconst slackAc = new checkly.AlertChannel(\"slackAc\", {slack: {\n    channel: \"#checkly-notifications\",\n    url: \"https://hooks.slack.com/services/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\",\n}});\n// An Opsgenie alert channel\nconst opsgenieAc = new checkly.AlertChannel(\"opsgenieAc\", {opsgenie: {\n    name: \"opsalerts\",\n    apiKey: \"fookey\",\n    region: \"fooregion\",\n    priority: \"foopriority\",\n}});\n// An Pagerduty alert channel\nconst pagerdutyAc = new checkly.AlertChannel(\"pagerdutyAc\", {pagerduty: {\n    account: \"checkly\",\n    serviceKey: \"key1\",\n    serviceName: \"pdalert\",\n}});\n// An Webhook alert channel\nconst webhookAc = new checkly.AlertChannel(\"webhookAc\", {webhook: {\n    name: \"foo\",\n    method: \"get\",\n    template: \"footemplate\",\n    url: \"https://example.com/foo\",\n    webhookSecret: \"foosecret\",\n}});\n// Connecting the alert channel to a check\nconst exampleCheck = new checkly.Check(\"exampleCheck\", {alertChannelSubscriptions: [\n    {\n        channelId: emailAc.id,\n        activated: true,\n    },\n    {\n        channelId: smsAc.id,\n        activated: true,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\n# An Email alert channel\nemail_ac = checkly.AlertChannel(\"emailAc\",\n    email=checkly.AlertChannelEmailArgs(\n        address=\"john@example.com\",\n    ),\n    send_recovery=True,\n    send_failure=False,\n    send_degraded=True,\n    ssl_expiry=True,\n    ssl_expiry_threshold=22)\n# A SMS alert channel\nsms_ac = checkly.AlertChannel(\"smsAc\",\n    sms=checkly.AlertChannelSmsArgs(\n        name=\"john\",\n        number=\"+5491100001111\",\n    ),\n    send_recovery=True,\n    send_failure=True)\n# A Slack alert channel\nslack_ac = checkly.AlertChannel(\"slackAc\", slack=checkly.AlertChannelSlackArgs(\n    channel=\"#checkly-notifications\",\n    url=\"https://hooks.slack.com/services/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\",\n))\n# An Opsgenie alert channel\nopsgenie_ac = checkly.AlertChannel(\"opsgenieAc\", opsgenie=checkly.AlertChannelOpsgenieArgs(\n    name=\"opsalerts\",\n    api_key=\"fookey\",\n    region=\"fooregion\",\n    priority=\"foopriority\",\n))\n# An Pagerduty alert channel\npagerduty_ac = checkly.AlertChannel(\"pagerdutyAc\", pagerduty=checkly.AlertChannelPagerdutyArgs(\n    account=\"checkly\",\n    service_key=\"key1\",\n    service_name=\"pdalert\",\n))\n# An Webhook alert channel\nwebhook_ac = checkly.AlertChannel(\"webhookAc\", webhook=checkly.AlertChannelWebhookArgs(\n    name=\"foo\",\n    method=\"get\",\n    template=\"footemplate\",\n    url=\"https://example.com/foo\",\n    webhook_secret=\"foosecret\",\n))\n# Connecting the alert channel to a check\nexample_check = checkly.Check(\"exampleCheck\", alert_channel_subscriptions=[\n    checkly.CheckAlertChannelSubscriptionArgs(\n        channel_id=email_ac.id,\n        activated=True,\n    ),\n    checkly.CheckAlertChannelSubscriptionArgs(\n        channel_id=sms_ac.id,\n        activated=True,\n    ),\n])\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // An Email alert channel\n        var emailAc = new Checkly.AlertChannel(\"emailAc\", new Checkly.AlertChannelArgs\n        {\n            Email = new Checkly.Inputs.AlertChannelEmailArgs\n            {\n                Address = \"john@example.com\",\n            },\n            SendRecovery = true,\n            SendFailure = false,\n            SendDegraded = true,\n            SslExpiry = true,\n            SslExpiryThreshold = 22,\n        });\n        // A SMS alert channel\n        var smsAc = new Checkly.AlertChannel(\"smsAc\", new Checkly.AlertChannelArgs\n        {\n            Sms = new Checkly.Inputs.AlertChannelSmsArgs\n            {\n                Name = \"john\",\n                Number = \"+5491100001111\",\n            },\n            SendRecovery = true,\n            SendFailure = true,\n        });\n        // A Slack alert channel\n        var slackAc = new Checkly.AlertChannel(\"slackAc\", new Checkly.AlertChannelArgs\n        {\n            Slack = new Checkly.Inputs.AlertChannelSlackArgs\n            {\n                Channel = \"#checkly-notifications\",\n                Url = \"https://hooks.slack.com/services/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\",\n            },\n        });\n        // An Opsgenie alert channel\n        var opsgenieAc = new Checkly.AlertChannel(\"opsgenieAc\", new Checkly.AlertChannelArgs\n        {\n            Opsgenie = new Checkly.Inputs.AlertChannelOpsgenieArgs\n            {\n                Name = \"opsalerts\",\n                ApiKey = \"fookey\",\n                Region = \"fooregion\",\n                Priority = \"foopriority\",\n            },\n        });\n        // An Pagerduty alert channel\n        var pagerdutyAc = new Checkly.AlertChannel(\"pagerdutyAc\", new Checkly.AlertChannelArgs\n        {\n            Pagerduty = new Checkly.Inputs.AlertChannelPagerdutyArgs\n            {\n                Account = \"checkly\",\n                ServiceKey = \"key1\",\n                ServiceName = \"pdalert\",\n            },\n        });\n        // An Webhook alert channel\n        var webhookAc = new Checkly.AlertChannel(\"webhookAc\", new Checkly.AlertChannelArgs\n        {\n            Webhook = new Checkly.Inputs.AlertChannelWebhookArgs\n            {\n                Name = \"foo\",\n                Method = \"get\",\n                Template = \"footemplate\",\n                Url = \"https://example.com/foo\",\n                WebhookSecret = \"foosecret\",\n            },\n        });\n        // Connecting the alert channel to a check\n        var exampleCheck = new Checkly.Check(\"exampleCheck\", new Checkly.CheckArgs\n        {\n            AlertChannelSubscriptions = \n            {\n                new Checkly.Inputs.CheckAlertChannelSubscriptionArgs\n                {\n                    ChannelId = emailAc.Id,\n                    Activated = true,\n                },\n                new Checkly.Inputs.CheckAlertChannelSubscriptionArgs\n                {\n                    ChannelId = smsAc.Id,\n                    Activated = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\temailAc, err := checkly.NewAlertChannel(ctx, \"emailAc\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"john@example.com\"),\n\t\t\t},\n\t\t\tSendRecovery:       pulumi.Bool(true),\n\t\t\tSendFailure:        pulumi.Bool(false),\n\t\t\tSendDegraded:       pulumi.Bool(true),\n\t\t\tSslExpiry:          pulumi.Bool(true),\n\t\t\tSslExpiryThreshold: pulumi.Int(22),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsmsAc, err := checkly.NewAlertChannel(ctx, \"smsAc\", \u0026checkly.AlertChannelArgs{\n\t\t\tSms: \u0026AlertChannelSmsArgs{\n\t\t\t\tName:   pulumi.String(\"john\"),\n\t\t\t\tNumber: pulumi.String(\"+5491100001111\"),\n\t\t\t},\n\t\t\tSendRecovery: pulumi.Bool(true),\n\t\t\tSendFailure:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewAlertChannel(ctx, \"slackAc\", \u0026checkly.AlertChannelArgs{\n\t\t\tSlack: \u0026AlertChannelSlackArgs{\n\t\t\t\tChannel: pulumi.String(\"#checkly-notifications\"),\n\t\t\t\tUrl:     pulumi.String(\"https://hooks.slack.com/services/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\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewAlertChannel(ctx, \"opsgenieAc\", \u0026checkly.AlertChannelArgs{\n\t\t\tOpsgenie: \u0026AlertChannelOpsgenieArgs{\n\t\t\t\tName:     pulumi.String(\"opsalerts\"),\n\t\t\t\tApiKey:   pulumi.String(\"fookey\"),\n\t\t\t\tRegion:   pulumi.String(\"fooregion\"),\n\t\t\t\tPriority: pulumi.String(\"foopriority\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewAlertChannel(ctx, \"pagerdutyAc\", \u0026checkly.AlertChannelArgs{\n\t\t\tPagerduty: \u0026AlertChannelPagerdutyArgs{\n\t\t\t\tAccount:     pulumi.String(\"checkly\"),\n\t\t\t\tServiceKey:  pulumi.String(\"key1\"),\n\t\t\t\tServiceName: pulumi.String(\"pdalert\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewAlertChannel(ctx, \"webhookAc\", \u0026checkly.AlertChannelArgs{\n\t\t\tWebhook: \u0026AlertChannelWebhookArgs{\n\t\t\t\tName:          pulumi.String(\"foo\"),\n\t\t\t\tMethod:        pulumi.String(\"get\"),\n\t\t\t\tTemplate:      pulumi.String(\"footemplate\"),\n\t\t\t\tUrl:           pulumi.String(\"https://example.com/foo\"),\n\t\t\t\tWebhookSecret: pulumi.String(\"foosecret\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheck(ctx, \"exampleCheck\", \u0026checkly.CheckArgs{\n\t\t\tAlertChannelSubscriptions: CheckAlertChannelSubscriptionArray{\n\t\t\t\t\u0026CheckAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026CheckAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: smsAc.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "email": {
                    "$ref": "#/types/checkly:index/AlertChannelEmail:AlertChannelEmail"
                },
                "opsgenie": {
                    "$ref": "#/types/checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie"
                },
                "pagerduty": {
                    "$ref": "#/types/checkly:index/AlertChannelPagerduty:AlertChannelPagerduty"
                },
                "sendDegraded": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sendFailure": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "sendRecovery": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "slack": {
                    "$ref": "#/types/checkly:index/AlertChannelSlack:AlertChannelSlack"
                },
                "sms": {
                    "$ref": "#/types/checkly:index/AlertChannelSms:AlertChannelSms"
                },
                "sslExpiry": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sslExpiryThreshold": {
                    "type": "integer",
                    "description": "Value must be between 1 and 30 (Default `30`)\n"
                },
                "webhook": {
                    "$ref": "#/types/checkly:index/AlertChannelWebhook:AlertChannelWebhook"
                }
            },
            "inputProperties": {
                "email": {
                    "$ref": "#/types/checkly:index/AlertChannelEmail:AlertChannelEmail"
                },
                "opsgenie": {
                    "$ref": "#/types/checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie"
                },
                "pagerduty": {
                    "$ref": "#/types/checkly:index/AlertChannelPagerduty:AlertChannelPagerduty"
                },
                "sendDegraded": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sendFailure": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "sendRecovery": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "slack": {
                    "$ref": "#/types/checkly:index/AlertChannelSlack:AlertChannelSlack"
                },
                "sms": {
                    "$ref": "#/types/checkly:index/AlertChannelSms:AlertChannelSms"
                },
                "sslExpiry": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sslExpiryThreshold": {
                    "type": "integer",
                    "description": "Value must be between 1 and 30 (Default `30`)\n"
                },
                "webhook": {
                    "$ref": "#/types/checkly:index/AlertChannelWebhook:AlertChannelWebhook"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertChannel resources.\n",
                "properties": {
                    "email": {
                        "$ref": "#/types/checkly:index/AlertChannelEmail:AlertChannelEmail"
                    },
                    "opsgenie": {
                        "$ref": "#/types/checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie"
                    },
                    "pagerduty": {
                        "$ref": "#/types/checkly:index/AlertChannelPagerduty:AlertChannelPagerduty"
                    },
                    "sendDegraded": {
                        "type": "boolean",
                        "description": "(Default `false`)\n"
                    },
                    "sendFailure": {
                        "type": "boolean",
                        "description": "(Default `true`)\n"
                    },
                    "sendRecovery": {
                        "type": "boolean",
                        "description": "(Default `true`)\n"
                    },
                    "slack": {
                        "$ref": "#/types/checkly:index/AlertChannelSlack:AlertChannelSlack"
                    },
                    "sms": {
                        "$ref": "#/types/checkly:index/AlertChannelSms:AlertChannelSms"
                    },
                    "sslExpiry": {
                        "type": "boolean",
                        "description": "(Default `false`)\n"
                    },
                    "sslExpiryThreshold": {
                        "type": "integer",
                        "description": "Value must be between 1 and 30 (Default `30`)\n"
                    },
                    "webhook": {
                        "$ref": "#/types/checkly:index/AlertChannelWebhook:AlertChannelWebhook"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/check:Check": {
            "description": "Checks allows you to monitor key webapp flows, backend API's and set up alerting, so you get a notification when things break or slow down.\n",
            "properties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckAlertSettings:CheckAlertSettings"
                },
                "degradedResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered degraded. Possible values are between\n0 and 30000. (Default `15000`).\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected\nregion before marking the check as failed.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks.\nUse global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`,\n`360`, `720`, and `1440`.\n"
                },
                "frequencyOffset": {
                    "type": "integer",
                    "description": "This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must\nbe `0` and `frequency_offset` could be `10`, `20` or `30`.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the check group this check is part of.\n"
                },
                "groupOrder": {
                    "type": "integer",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from\nthe API or from CI/CD.\n"
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the this check. (Default [\"us-east-1\"])\n"
                },
                "maxResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered failing. Possible values are between\n0 and 30000. (Default `30000`).\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "request": {
                    "$ref": "#/types/checkly:index/CheckRequest:CheckRequest",
                    "description": "An API check might have one request config.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this check.\n"
                },
                "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a\nreference to an external JavaScript file.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.\n"
                },
                "sslCheck": {
                    "type": "boolean",
                    "description": "Determines if the SSL certificate should be validated for expiry.\n",
                    "deprecationMessage": "The property `ssl_check` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the check. Possible values are `API`, and `BROWSER`.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                }
            },
            "required": [
                "activated",
                "alertSettings",
                "frequency",
                "name",
                "type"
            ],
            "inputProperties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckAlertSettings:CheckAlertSettings"
                },
                "degradedResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered degraded. Possible values are between\n0 and 30000. (Default `15000`).\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected\nregion before marking the check as failed.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks.\nUse global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`,\n`360`, `720`, and `1440`.\n"
                },
                "frequencyOffset": {
                    "type": "integer",
                    "description": "This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must\nbe `0` and `frequency_offset` could be `10`, `20` or `30`.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the check group this check is part of.\n"
                },
                "groupOrder": {
                    "type": "integer",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from\nthe API or from CI/CD.\n"
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the this check. (Default [\"us-east-1\"])\n"
                },
                "maxResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered failing. Possible values are between\n0 and 30000. (Default `30000`).\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "request": {
                    "$ref": "#/types/checkly:index/CheckRequest:CheckRequest",
                    "description": "An API check might have one request config.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this check.\n"
                },
                "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a\nreference to an external JavaScript file.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.\n"
                },
                "sslCheck": {
                    "type": "boolean",
                    "description": "Determines if the SSL certificate should be validated for expiry.\n",
                    "deprecationMessage": "The property `ssl_check` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the check. Possible values are `API`, and `BROWSER`.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                }
            },
            "requiredInputs": [
                "activated",
                "frequency",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Check resources.\n",
                "properties": {
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                    },
                    "alertChannelSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription"
                        }
                    },
                    "alertSettings": {
                        "$ref": "#/types/checkly:index/CheckAlertSettings:CheckAlertSettings"
                    },
                    "degradedResponseTime": {
                        "type": "integer",
                        "description": "The response time in milliseconds starting from which a check should be considered degraded. Possible values are between\n0 and 30000. (Default `15000`).\n"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected\nregion before marking the check as failed.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks.\nUse global environment variables whenever possible.\n",
                        "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`,\n`360`, `720`, and `1440`.\n"
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must\nbe `0` and `frequency_offset` could be `10`, `20` or `30`.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the check group this check is part of.\n"
                    },
                    "groupOrder": {
                        "type": "integer",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from\nthe API or from CI/CD.\n"
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.\n"
                    },
                    "localTeardownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more data center locations where to run the this check. (Default [\"us-east-1\"])\n"
                    },
                    "maxResponseTime": {
                        "type": "integer",
                        "description": "The response time in milliseconds starting from which a check should be considered failing. Possible values are between\n0 and 30000. (Default `30000`).\n"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.\n"
                    },
                    "privateLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more private locations slugs.\n"
                    },
                    "request": {
                        "$ref": "#/types/checkly:index/CheckRequest:CheckRequest",
                        "description": "An API check might have one request config.\n"
                    },
                    "runtimeId": {
                        "type": "string",
                        "description": "The id of the runtime to use for this check.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a\nreference to an external JavaScript file.\n"
                    },
                    "setupSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.\n"
                    },
                    "sslCheck": {
                        "type": "boolean",
                        "description": "Determines if the SSL certificate should be validated for expiry.\n",
                        "deprecationMessage": "The property `ssl_check` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags for organizing and filtering checks.\n"
                    },
                    "teardownSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the check. Possible values are `API`, and `BROWSER`.\n"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/checkGroup:CheckGroup": {
            "description": "Check groups allow  you to group together a set of related checks, which can also share default settings for various attributes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@checkly/pulumi\";\n\nconst testGroup1CheckGroup = new checkly.CheckGroup(\"testGroup1CheckGroup\", {\n    activated: true,\n    muted: false,\n    tags: [\"auto\"],\n    locations: [\"eu-west-1\"],\n    concurrency: 3,\n    apiCheckDefaults: {\n        url: \"http://example.com/\",\n        headers: {\n            \"X-Test\": \"foo\",\n        },\n        queryParameters: {\n            query: \"foo\",\n        },\n        assertions: [\n            {\n                source: \"STATUS_CODE\",\n                property: \"\",\n                comparison: \"EQUALS\",\n                target: \"200\",\n            },\n            {\n                source: \"TEXT_BODY\",\n                property: \"\",\n                comparison: \"CONTAINS\",\n                target: \"welcome\",\n            },\n        ],\n        basicAuth: {\n            username: \"user\",\n            password: \"pass\",\n        },\n    },\n    environmentVariables: {\n        ENVTEST: \"Hello world\",\n    },\n    doubleCheck: true,\n    useGlobalAlertSettings: false,\n    alertSettings: {\n        escalationType: \"RUN_BASED\",\n        runBasedEscalations: [{\n            failedRunThreshold: 1,\n        }],\n        timeBasedEscalations: [{\n            minutesFailingThreshold: 5,\n        }],\n        reminders: [{\n            amount: 2,\n            interval: 5,\n        }],\n    },\n    localSetupScript: \"setup-test\",\n    localTeardownScript: \"teardown-test\",\n});\n// Add a check to a group\nconst testCheck1 = new checkly.Check(\"testCheck1\", {\n    groupId: testGroup1CheckGroup.id,\n    groupOrder: 1,\n});\n// Using with alert channels\nconst emailAc1 = new checkly.AlertChannel(\"emailAc1\", {email: {\n    address: \"info@example.com\",\n}});\nconst emailAc2 = new checkly.AlertChannel(\"emailAc2\", {email: {\n    address: \"info2@example.com\",\n}});\n// Connect the check group to the alert channels\nconst testGroup1Index_checkGroupCheckGroup = new checkly.CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", {alertChannelSubscriptions: [\n    {\n        channelId: emailAc1.id,\n        activated: true,\n    },\n    {\n        channelId: emailAc2.id,\n        activated: true,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ntest_group1_check_group = checkly.CheckGroup(\"testGroup1CheckGroup\",\n    activated=True,\n    muted=False,\n    tags=[\"auto\"],\n    locations=[\"eu-west-1\"],\n    concurrency=3,\n    api_check_defaults=checkly.CheckGroupApiCheckDefaultsArgs(\n        url=\"http://example.com/\",\n        headers={\n            \"X-Test\": \"foo\",\n        },\n        query_parameters={\n            \"query\": \"foo\",\n        },\n        assertions=[\n            checkly.CheckGroupApiCheckDefaultsAssertionArgs(\n                source=\"STATUS_CODE\",\n                property=\"\",\n                comparison=\"EQUALS\",\n                target=\"200\",\n            ),\n            checkly.CheckGroupApiCheckDefaultsAssertionArgs(\n                source=\"TEXT_BODY\",\n                property=\"\",\n                comparison=\"CONTAINS\",\n                target=\"welcome\",\n            ),\n        ],\n        basic_auth=checkly.CheckGroupApiCheckDefaultsBasicAuthArgs(\n            username=\"user\",\n            password=\"pass\",\n        ),\n    ),\n    environment_variables={\n        \"ENVTEST\": \"Hello world\",\n    },\n    double_check=True,\n    use_global_alert_settings=False,\n    alert_settings=checkly.CheckGroupAlertSettingsArgs(\n        escalation_type=\"RUN_BASED\",\n        run_based_escalations=[checkly.CheckGroupAlertSettingsRunBasedEscalationArgs(\n            failed_run_threshold=1,\n        )],\n        time_based_escalations=[checkly.CheckGroupAlertSettingsTimeBasedEscalationArgs(\n            minutes_failing_threshold=5,\n        )],\n        reminders=[checkly.CheckGroupAlertSettingsReminderArgs(\n            amount=2,\n            interval=5,\n        )],\n    ),\n    local_setup_script=\"setup-test\",\n    local_teardown_script=\"teardown-test\")\n# Add a check to a group\ntest_check1 = checkly.Check(\"testCheck1\",\n    group_id=test_group1_check_group.id,\n    group_order=1)\n# Using with alert channels\nemail_ac1 = checkly.AlertChannel(\"emailAc1\", email=checkly.AlertChannelEmailArgs(\n    address=\"info@example.com\",\n))\nemail_ac2 = checkly.AlertChannel(\"emailAc2\", email=checkly.AlertChannelEmailArgs(\n    address=\"info2@example.com\",\n))\n# Connect the check group to the alert channels\ntest_group1_index_check_group_check_group = checkly.CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", alert_channel_subscriptions=[\n    checkly.CheckGroupAlertChannelSubscriptionArgs(\n        channel_id=email_ac1.id,\n        activated=True,\n    ),\n    checkly.CheckGroupAlertChannelSubscriptionArgs(\n        channel_id=email_ac2.id,\n        activated=True,\n    ),\n])\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testGroup1CheckGroup = new Checkly.CheckGroup(\"testGroup1CheckGroup\", new Checkly.CheckGroupArgs\n        {\n            Activated = true,\n            Muted = false,\n            Tags = \n            {\n                \"auto\",\n            },\n            Locations = \n            {\n                \"eu-west-1\",\n            },\n            Concurrency = 3,\n            ApiCheckDefaults = new Checkly.Inputs.CheckGroupApiCheckDefaultsArgs\n            {\n                Url = \"http://example.com/\",\n                Headers = \n                {\n                    { \"X-Test\", \"foo\" },\n                },\n                QueryParameters = \n                {\n                    { \"query\", \"foo\" },\n                },\n                Assertions = \n                {\n                    new Checkly.Inputs.CheckGroupApiCheckDefaultsAssertionArgs\n                    {\n                        Source = \"STATUS_CODE\",\n                        Property = \"\",\n                        Comparison = \"EQUALS\",\n                        Target = \"200\",\n                    },\n                    new Checkly.Inputs.CheckGroupApiCheckDefaultsAssertionArgs\n                    {\n                        Source = \"TEXT_BODY\",\n                        Property = \"\",\n                        Comparison = \"CONTAINS\",\n                        Target = \"welcome\",\n                    },\n                },\n                BasicAuth = new Checkly.Inputs.CheckGroupApiCheckDefaultsBasicAuthArgs\n                {\n                    Username = \"user\",\n                    Password = \"pass\",\n                },\n            },\n            EnvironmentVariables = \n            {\n                { \"ENVTEST\", \"Hello world\" },\n            },\n            DoubleCheck = true,\n            UseGlobalAlertSettings = false,\n            AlertSettings = new Checkly.Inputs.CheckGroupAlertSettingsArgs\n            {\n                EscalationType = \"RUN_BASED\",\n                RunBasedEscalations = \n                {\n                    new Checkly.Inputs.CheckGroupAlertSettingsRunBasedEscalationArgs\n                    {\n                        FailedRunThreshold = 1,\n                    },\n                },\n                TimeBasedEscalations = \n                {\n                    new Checkly.Inputs.CheckGroupAlertSettingsTimeBasedEscalationArgs\n                    {\n                        MinutesFailingThreshold = 5,\n                    },\n                },\n                Reminders = \n                {\n                    new Checkly.Inputs.CheckGroupAlertSettingsReminderArgs\n                    {\n                        Amount = 2,\n                        Interval = 5,\n                    },\n                },\n            },\n            LocalSetupScript = \"setup-test\",\n            LocalTeardownScript = \"teardown-test\",\n        });\n        // Add a check to a group\n        var testCheck1 = new Checkly.Check(\"testCheck1\", new Checkly.CheckArgs\n        {\n            GroupId = testGroup1CheckGroup.Id,\n            GroupOrder = 1,\n        });\n        // Using with alert channels\n        var emailAc1 = new Checkly.AlertChannel(\"emailAc1\", new Checkly.AlertChannelArgs\n        {\n            Email = new Checkly.Inputs.AlertChannelEmailArgs\n            {\n                Address = \"info@example.com\",\n            },\n        });\n        var emailAc2 = new Checkly.AlertChannel(\"emailAc2\", new Checkly.AlertChannelArgs\n        {\n            Email = new Checkly.Inputs.AlertChannelEmailArgs\n            {\n                Address = \"info2@example.com\",\n            },\n        });\n        // Connect the check group to the alert channels\n        var testGroup1Index_checkGroupCheckGroup = new Checkly.CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", new Checkly.CheckGroupArgs\n        {\n            AlertChannelSubscriptions = \n            {\n                new Checkly.Inputs.CheckGroupAlertChannelSubscriptionArgs\n                {\n                    ChannelId = emailAc1.Id,\n                    Activated = true,\n                },\n                new Checkly.Inputs.CheckGroupAlertChannelSubscriptionArgs\n                {\n                    ChannelId = emailAc2.Id,\n                    Activated = true,\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestGroup1CheckGroup, err := checkly.NewCheckGroup(ctx, \"testGroup1CheckGroup\", \u0026checkly.CheckGroupArgs{\n\t\t\tActivated: pulumi.Bool(true),\n\t\t\tMuted:     pulumi.Bool(false),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"auto\"),\n\t\t\t},\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"eu-west-1\"),\n\t\t\t},\n\t\t\tConcurrency: pulumi.Int(3),\n\t\t\tApiCheckDefaults: \u0026CheckGroupApiCheckDefaultsArgs{\n\t\t\t\tUrl: pulumi.String(\"http://example.com/\"),\n\t\t\t\tHeaders: pulumi.AnyMap{\n\t\t\t\t\t\"X-Test\": pulumi.Any(\"foo\"),\n\t\t\t\t},\n\t\t\t\tQueryParameters: pulumi.AnyMap{\n\t\t\t\t\t\"query\": pulumi.Any(\"foo\"),\n\t\t\t\t},\n\t\t\t\tAssertions: CheckGroupApiCheckDefaultsAssertionArray{\n\t\t\t\t\t\u0026CheckGroupApiCheckDefaultsAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"STATUS_CODE\"),\n\t\t\t\t\t\tProperty:   pulumi.String(\"\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"EQUALS\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"200\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026CheckGroupApiCheckDefaultsAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"TEXT_BODY\"),\n\t\t\t\t\t\tProperty:   pulumi.String(\"\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"CONTAINS\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"welcome\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tBasicAuth: \u0026CheckGroupApiCheckDefaultsBasicAuthArgs{\n\t\t\t\t\tUsername: pulumi.String(\"user\"),\n\t\t\t\t\tPassword: pulumi.String(\"pass\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironmentVariables: pulumi.AnyMap{\n\t\t\t\t\"ENVTEST\": pulumi.Any(\"Hello world\"),\n\t\t\t},\n\t\t\tDoubleCheck:            pulumi.Bool(true),\n\t\t\tUseGlobalAlertSettings: pulumi.Bool(false),\n\t\t\tAlertSettings: \u0026CheckGroupAlertSettingsArgs{\n\t\t\t\tEscalationType: pulumi.String(\"RUN_BASED\"),\n\t\t\t\tRunBasedEscalations: CheckGroupAlertSettingsRunBasedEscalationArray{\n\t\t\t\t\t\u0026CheckGroupAlertSettingsRunBasedEscalationArgs{\n\t\t\t\t\t\tFailedRunThreshold: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTimeBasedEscalations: CheckGroupAlertSettingsTimeBasedEscalationArray{\n\t\t\t\t\t\u0026CheckGroupAlertSettingsTimeBasedEscalationArgs{\n\t\t\t\t\t\tMinutesFailingThreshold: pulumi.Int(5),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tReminders: CheckGroupAlertSettingsReminderArray{\n\t\t\t\t\t\u0026CheckGroupAlertSettingsReminderArgs{\n\t\t\t\t\t\tAmount:   pulumi.Int(2),\n\t\t\t\t\t\tInterval: pulumi.Int(5),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLocalSetupScript:    pulumi.String(\"setup-test\"),\n\t\t\tLocalTeardownScript: pulumi.String(\"teardown-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheck(ctx, \"testCheck1\", \u0026checkly.CheckArgs{\n\t\t\tGroupId:    testGroup1CheckGroup.ID(),\n\t\t\tGroupOrder: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailAc1, err := checkly.NewAlertChannel(ctx, \"emailAc1\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"info@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailAc2, err := checkly.NewAlertChannel(ctx, \"emailAc2\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"info2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheckGroup(ctx, \"testGroup1Index/checkGroupCheckGroup\", \u0026checkly.CheckGroupArgs{\n\t\t\tAlertChannelSubscriptions: CheckGroupAlertChannelSubscriptionArray{\n\t\t\t\t\u0026CheckGroupAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc1.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026CheckGroupAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc2.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group are running or not.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings"
                },
                "apiCheckDefaults": {
                    "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults"
                },
                "concurrency": {
                    "type": "integer",
                    "description": "Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected\nregion before marking the check as failed.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks.\nUse global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the checks.\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check in this group fails and/or recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check group.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this group.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check group.\n"
                }
            },
            "required": [
                "activated",
                "alertSettings",
                "apiCheckDefaults",
                "concurrency",
                "name"
            ],
            "inputProperties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group are running or not.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings"
                },
                "apiCheckDefaults": {
                    "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults"
                },
                "concurrency": {
                    "type": "integer",
                    "description": "Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected\nregion before marking the check as failed.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks.\nUse global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the checks.\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check in this group fails and/or recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check group.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this group.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check group.\n"
                }
            },
            "requiredInputs": [
                "activated",
                "concurrency"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckGroup resources.\n",
                "properties": {
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the group are running or not.\n"
                    },
                    "alertChannelSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription"
                        }
                    },
                    "alertSettings": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings"
                    },
                    "apiCheckDefaults": {
                        "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults"
                    },
                    "concurrency": {
                        "type": "integer",
                        "description": "Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.\n"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected\nregion before marking the check as failed.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks.\nUse global environment variables whenever possible.\n",
                        "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.\n"
                    },
                    "localTeardownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more data center locations where to run the checks.\n"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be sent out when a check in this group fails and/or recovers.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check group.\n"
                    },
                    "privateLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more private locations slugs.\n"
                    },
                    "runtimeId": {
                        "type": "string",
                        "description": "The id of the runtime to use for this group.\n"
                    },
                    "setupSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for organizing and filtering checks.\n"
                    },
                    "teardownSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert settings will be used, not the alert setting defined on this check group.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/dashboard:Dashboard": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@pulumi/checkly\";\n\nconst dashboard1 = new checkly.Dashboard(\"dashboard_1\", {\n    customDomain: \"status.example.com\",\n    customUrl: \"checkly\",\n    header: \"Public dashboard\",\n    hideTags: false,\n    logo: \"https://www.checklyhq.com/logo.png\",\n    paginate: false,\n    paginationRate: 30,\n    refreshRate: 60,\n    tags: [\"production\"],\n    width: \"FULL\",\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ndashboard1 = checkly.Dashboard(\"dashboard1\",\n    custom_domain=\"status.example.com\",\n    custom_url=\"checkly\",\n    header=\"Public dashboard\",\n    hide_tags=False,\n    logo=\"https://www.checklyhq.com/logo.png\",\n    paginate=False,\n    pagination_rate=30,\n    refresh_rate=60,\n    tags=[\"production\"],\n    width=\"FULL\")\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dashboard1 = new Checkly.Dashboard(\"dashboard1\", new Checkly.DashboardArgs\n        {\n            CustomDomain = \"status.example.com\",\n            CustomUrl = \"checkly\",\n            Header = \"Public dashboard\",\n            HideTags = false,\n            Logo = \"https://www.checklyhq.com/logo.png\",\n            Paginate = false,\n            PaginationRate = 30,\n            RefreshRate = 60,\n            Tags = \n            {\n                \"production\",\n            },\n            Width = \"FULL\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewDashboard(ctx, \"dashboard1\", \u0026checkly.DashboardArgs{\n\t\t\tCustomDomain:   pulumi.String(\"status.example.com\"),\n\t\t\tCustomUrl:      pulumi.String(\"checkly\"),\n\t\t\tHeader:         pulumi.String(\"Public dashboard\"),\n\t\t\tHideTags:       pulumi.Bool(false),\n\t\t\tLogo:           pulumi.String(\"https://www.checklyhq.com/logo.png\"),\n\t\t\tPaginate:       pulumi.Bool(false),\n\t\t\tPaginationRate: pulumi.Int(30),\n\t\t\tRefreshRate:    pulumi.Int(60),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tWidth: pulumi.String(\"FULL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "checksPerPage": {
                    "type": "integer",
                    "description": "Determines how many checks to show per page.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.\n"
                },
                "customUrl": {
                    "type": "string",
                    "description": "A subdomain name under 'checklyhq.com'. Needs to be unique across all users.\n"
                },
                "description": {
                    "type": "string",
                    "description": "HTML \u003cmeta\u003e description for the dashboard.\n"
                },
                "favicon": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use as browser favicon.\n"
                },
                "header": {
                    "type": "string",
                    "description": "A piece of text displayed at the top of your dashboard.\n"
                },
                "hideTags": {
                    "type": "boolean",
                    "description": "Show or hide the tags on the dashboard.\n"
                },
                "link": {
                    "type": "string",
                    "description": "A link to for the dashboard logo.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use for the dashboard logo.\n"
                },
                "paginate": {
                    "type": "boolean",
                    "description": "Determines if pagination is on or off.\n"
                },
                "paginationRate": {
                    "type": "integer",
                    "description": "How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.\n"
                },
                "refreshRate": {
                    "type": "integer",
                    "description": "How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more tags that filter which checks to display on the dashboard.\n"
                },
                "useTagsAndOperator": {
                    "type": "boolean",
                    "description": "Set when to use AND operator for fetching dashboard tags.\n"
                },
                "width": {
                    "type": "string",
                    "description": "Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.\n"
                }
            },
            "required": [
                "customUrl"
            ],
            "inputProperties": {
                "checksPerPage": {
                    "type": "integer",
                    "description": "Determines how many checks to show per page.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.\n"
                },
                "customUrl": {
                    "type": "string",
                    "description": "A subdomain name under 'checklyhq.com'. Needs to be unique across all users.\n"
                },
                "description": {
                    "type": "string",
                    "description": "HTML \u003cmeta\u003e description for the dashboard.\n"
                },
                "favicon": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use as browser favicon.\n"
                },
                "header": {
                    "type": "string",
                    "description": "A piece of text displayed at the top of your dashboard.\n"
                },
                "hideTags": {
                    "type": "boolean",
                    "description": "Show or hide the tags on the dashboard.\n"
                },
                "link": {
                    "type": "string",
                    "description": "A link to for the dashboard logo.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use for the dashboard logo.\n"
                },
                "paginate": {
                    "type": "boolean",
                    "description": "Determines if pagination is on or off.\n"
                },
                "paginationRate": {
                    "type": "integer",
                    "description": "How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.\n"
                },
                "refreshRate": {
                    "type": "integer",
                    "description": "How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more tags that filter which checks to display on the dashboard.\n"
                },
                "useTagsAndOperator": {
                    "type": "boolean",
                    "description": "Set when to use AND operator for fetching dashboard tags.\n"
                },
                "width": {
                    "type": "string",
                    "description": "Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.\n"
                }
            },
            "requiredInputs": [
                "customUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "checksPerPage": {
                        "type": "integer",
                        "description": "Determines how many checks to show per page.\n"
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.\n"
                    },
                    "customUrl": {
                        "type": "string",
                        "description": "A subdomain name under 'checklyhq.com'. Needs to be unique across all users.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "HTML \u003cmeta\u003e description for the dashboard.\n"
                    },
                    "favicon": {
                        "type": "string",
                        "description": "A URL pointing to an image file to use as browser favicon.\n"
                    },
                    "header": {
                        "type": "string",
                        "description": "A piece of text displayed at the top of your dashboard.\n"
                    },
                    "hideTags": {
                        "type": "boolean",
                        "description": "Show or hide the tags on the dashboard.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "A link to for the dashboard logo.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "A URL pointing to an image file to use for the dashboard logo.\n"
                    },
                    "paginate": {
                        "type": "boolean",
                        "description": "Determines if pagination is on or off.\n"
                    },
                    "paginationRate": {
                        "type": "integer",
                        "description": "How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.\n"
                    },
                    "refreshRate": {
                        "type": "integer",
                        "description": "How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more tags that filter which checks to display on the dashboard.\n"
                    },
                    "useTagsAndOperator": {
                        "type": "boolean",
                        "description": "Set when to use AND operator for fetching dashboard tags.\n"
                    },
                    "width": {
                        "type": "string",
                        "description": "Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/environmentVariable:EnvironmentVariable": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@pulumi/checkly\";\n\n// Simple Enviroment Variable example\nconst variable1 = new checkly.EnvironmentVariable(\"variable_1\", {\n    key: \"API_KEY\",\n    locked: true,\n    value: \"loZd9hOGHDUrGvmW\",\n});\nconst variable2 = new checkly.EnvironmentVariable(\"variable_2\", {\n    key: \"API_URL\",\n    value: \"http://localhost:3000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\n# Simple Enviroment Variable example\nvariable1 = checkly.EnvironmentVariable(\"variable1\",\n    key=\"API_KEY\",\n    locked=True,\n    value=\"loZd9hOGHDUrGvmW\")\nvariable2 = checkly.EnvironmentVariable(\"variable2\",\n    key=\"API_URL\",\n    value=\"http://localhost:3000\")\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Simple Enviroment Variable example\n        var variable1 = new Checkly.EnvironmentVariable(\"variable1\", new Checkly.EnvironmentVariableArgs\n        {\n            Key = \"API_KEY\",\n            Locked = true,\n            Value = \"loZd9hOGHDUrGvmW\",\n        });\n        var variable2 = new Checkly.EnvironmentVariable(\"variable2\", new Checkly.EnvironmentVariableArgs\n        {\n            Key = \"API_URL\",\n            Value = \"http://localhost:3000\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewEnvironmentVariable(ctx, \"variable1\", \u0026checkly.EnvironmentVariableArgs{\n\t\t\tKey:    pulumi.String(\"API_KEY\"),\n\t\t\tLocked: pulumi.Bool(true),\n\t\t\tValue:  pulumi.String(\"loZd9hOGHDUrGvmW\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewEnvironmentVariable(ctx, \"variable2\", \u0026checkly.EnvironmentVariableArgs{\n\t\t\tKey:   pulumi.String(\"API_URL\"),\n\t\t\tValue: pulumi.String(\"http://localhost:3000\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "key": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/maintenanceWindow:MaintenanceWindow": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@pulumi/checkly\";\n\nconst maintenance1 = new checkly.MaintenanceWindow(\"maintenance_1\", {\n    endsAt: \"2014-08-25T00:00:00.000Z\",\n    repeatEndsAt: \"2014-08-24T00:00:00.000Z\",\n    repeatInterval: 1,\n    repeatUnit: \"MONTH\",\n    startsAt: \"2014-08-24T00:00:00.000Z\",\n    tags: [\"production\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\nmaintenance1 = checkly.MaintenanceWindow(\"maintenance1\",\n    ends_at=\"2014-08-25T00:00:00.000Z\",\n    repeat_ends_at=\"2014-08-24T00:00:00.000Z\",\n    repeat_interval=1,\n    repeat_unit=\"MONTH\",\n    starts_at=\"2014-08-24T00:00:00.000Z\",\n    tags=[\"production\"])\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var maintenance1 = new Checkly.MaintenanceWindow(\"maintenance1\", new Checkly.MaintenanceWindowArgs\n        {\n            EndsAt = \"2014-08-25T00:00:00.000Z\",\n            RepeatEndsAt = \"2014-08-24T00:00:00.000Z\",\n            RepeatInterval = 1,\n            RepeatUnit = \"MONTH\",\n            StartsAt = \"2014-08-24T00:00:00.000Z\",\n            Tags = \n            {\n                \"production\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewMaintenanceWindow(ctx, \"maintenance1\", \u0026checkly.MaintenanceWindowArgs{\n\t\t\tEndsAt:         pulumi.String(\"2014-08-25T00:00:00.000Z\"),\n\t\t\tRepeatEndsAt:   pulumi.String(\"2014-08-24T00:00:00.000Z\"),\n\t\t\tRepeatInterval: pulumi.Int(1),\n\t\t\tRepeatUnit:     pulumi.String(\"MONTH\"),\n\t\t\tStartsAt:       pulumi.String(\"2014-08-24T00:00:00.000Z\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "endsAt": {
                    "type": "string",
                    "description": "The end date of the maintenance window.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The maintenance window name.\n"
                },
                "repeatEndsAt": {
                    "type": "string",
                    "description": "The date on which the maintenance window should stop repeating.\n"
                },
                "repeatInterval": {
                    "type": "integer",
                    "description": "The repeat interval of the maintenance window from the first occurrence.\n"
                },
                "repeatUnit": {
                    "type": "string",
                    "description": "The repeat cadence for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.\n"
                },
                "startsAt": {
                    "type": "string",
                    "description": "The start date of the maintenance window.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the checks and groups maintenance window should apply to.\n"
                }
            },
            "required": [
                "endsAt",
                "name",
                "startsAt"
            ],
            "inputProperties": {
                "endsAt": {
                    "type": "string",
                    "description": "The end date of the maintenance window.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The maintenance window name.\n"
                },
                "repeatEndsAt": {
                    "type": "string",
                    "description": "The date on which the maintenance window should stop repeating.\n"
                },
                "repeatInterval": {
                    "type": "integer",
                    "description": "The repeat interval of the maintenance window from the first occurrence.\n"
                },
                "repeatUnit": {
                    "type": "string",
                    "description": "The repeat cadence for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.\n"
                },
                "startsAt": {
                    "type": "string",
                    "description": "The start date of the maintenance window.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the checks and groups maintenance window should apply to.\n"
                }
            },
            "requiredInputs": [
                "endsAt",
                "startsAt"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "endsAt": {
                        "type": "string",
                        "description": "The end date of the maintenance window.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The maintenance window name.\n"
                    },
                    "repeatEndsAt": {
                        "type": "string",
                        "description": "The date on which the maintenance window should stop repeating.\n"
                    },
                    "repeatInterval": {
                        "type": "integer",
                        "description": "The repeat interval of the maintenance window from the first occurrence.\n"
                    },
                    "repeatUnit": {
                        "type": "string",
                        "description": "The repeat cadence for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.\n"
                    },
                    "startsAt": {
                        "type": "string",
                        "description": "The start date of the maintenance window.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of the checks and groups maintenance window should apply to.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/privateLocation:PrivateLocation": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@pulumi/checkly\";\n\n// Simple Private Location example\nconst location = new checkly.PrivateLocation(\"location\", {\n    icon: \"location\",\n    slugName: \"new-private-location\",\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\n# Simple Private Location example\nlocation = checkly.PrivateLocation(\"location\",\n    icon=\"location\",\n    slug_name=\"new-private-location\")\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Simple Private Location example\n        var location = new Checkly.PrivateLocation(\"location\", new Checkly.PrivateLocationArgs\n        {\n            Icon = \"location\",\n            SlugName = \"new-private-location\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewPrivateLocation(ctx, \"location\", \u0026checkly.PrivateLocationArgs{\n\t\t\tIcon:     pulumi.String(\"location\"),\n\t\t\tSlugName: pulumi.String(\"new-private-location\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "icon": {
                    "type": "string",
                    "description": "Icon assigned to the private location.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Private location API keys.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The private location name.\n"
                },
                "slugName": {
                    "type": "string",
                    "description": "Valid slug name.\n"
                }
            },
            "required": [
                "keys",
                "name",
                "slugName"
            ],
            "inputProperties": {
                "icon": {
                    "type": "string",
                    "description": "Icon assigned to the private location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The private location name.\n"
                },
                "slugName": {
                    "type": "string",
                    "description": "Valid slug name.\n"
                }
            },
            "requiredInputs": [
                "slugName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLocation resources.\n",
                "properties": {
                    "icon": {
                        "type": "string",
                        "description": "Icon assigned to the private location.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Private location API keys.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The private location name.\n"
                    },
                    "slugName": {
                        "type": "string",
                        "description": "Valid slug name.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/snippet:Snippet": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snippet\n"
                },
                "script": {
                    "type": "string",
                    "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.\n"
                }
            },
            "required": [
                "name",
                "script"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snippet\n"
                },
                "script": {
                    "type": "string",
                    "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.\n"
                }
            },
            "requiredInputs": [
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Snippet resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the snippet\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/triggerCheck:TriggerCheck": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@checkly/pulumi\";\n\nconst testTriggerCheck = new checkly.TriggerCheck(\"testTriggerCheck\", {checkId: \"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\"});\nexport const testTriggerCheckUrl = testTriggerCheck.url;\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ntest_trigger_check = checkly.TriggerCheck(\"testTriggerCheck\", check_id=\"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\")\npulumi.export(\"testTriggerCheckUrl\", test_trigger_check.url)\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testTriggerCheck = new Checkly.TriggerCheck(\"testTriggerCheck\", new Checkly.TriggerCheckArgs\n        {\n            CheckId = \"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\",\n        });\n        this.TestTriggerCheckUrl = testTriggerCheck.Url;\n    }\n\n    [Output(\"testTriggerCheckUrl\")]\n    public Output\u003cstring\u003e TestTriggerCheckUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestTriggerCheck, err := checkly.NewTriggerCheck(ctx, \"testTriggerCheck\", \u0026checkly.TriggerCheckArgs{\n\t\t\tCheckId: pulumi.String(\"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"testTriggerCheckUrl\", testTriggerCheck.Url)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "checkId": {
                    "type": "string",
                    "description": "The id of the check that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the check\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the check run.\n"
                }
            },
            "required": [
                "checkId",
                "token",
                "url"
            ],
            "inputProperties": {
                "checkId": {
                    "type": "string",
                    "description": "The id of the check that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the check\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the check run.\n"
                }
            },
            "requiredInputs": [
                "checkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerCheck resources.\n",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "description": "The id of the check that you want to attach the trigger to.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token value created to trigger the check\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The request URL to trigger the check run.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/triggerCheckGroup:TriggerCheckGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as pulumi from \"@checkly/pulumi\";\n\nconst testTriggerGroup = new checkly.TriggerCheckGroup(\"testTriggerGroup\", {groupId: \"215\"});\nexport const testTriggerGroupUrl = testTriggerGroup.url;\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ntest_trigger_group = checkly.TriggerCheckGroup(\"testTriggerGroup\", group_id=215)\npulumi.export(\"testTriggerGroupUrl\", test_trigger_group.url)\n```\n```csharp\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testTriggerGroup = new Checkly.TriggerCheckGroup(\"testTriggerGroup\", new Checkly.TriggerCheckGroupArgs\n        {\n            GroupId = 215,\n        });\n        this.TestTriggerGroupUrl = testTriggerGroup.Url;\n    }\n\n    [Output(\"testTriggerGroupUrl\")]\n    public Output\u003cstring\u003e TestTriggerGroupUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestTriggerGroup, err := checkly.NewTriggerCheckGroup(ctx, \"testTriggerGroup\", \u0026checkly.TriggerCheckGroupArgs{\n\t\t\tGroupId: pulumi.Int(215),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"testTriggerGroupUrl\", testTriggerGroup.Url)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the group\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the group run.\n"
                }
            },
            "required": [
                "groupId",
                "token",
                "url"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the group\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the group run.\n"
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerCheckGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the group that you want to attach the trigger to.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token value created to trigger the group\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The request URL to trigger the group run.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/checkly/pulumi-checkly/sdk/go/checkly"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Checkly monitoring resources.",
            "packageName": "@checkly/pulumi",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/checkly/terraform-provider-checkly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-checkly` repo](https://github.com/pulumi/pulumi-checkly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`checkly/terraform-provider-checkly` repo](https://github.com/checkly/terraform-provider-checkly/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/checkly/terraform-provider-checkly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-checkly` repo](https://github.com/pulumi/pulumi-checkly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`checkly/terraform-provider-checkly` repo](https://github.com/checkly/terraform-provider-checkly/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}