{
    "name": "checkly",
    "displayName": "Checkly",
    "description": "A Pulumi package for creating and managing Checkly monitoring resources.",
    "keywords": [
        "pulumi",
        "checkly",
        "category/monitoring"
    ],
    "homepage": "https://www.pulumi.com/registry/packages/checkly",
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`checkly` Terraform Provider](https://github.com/checkly/terraform-provider-checkly).",
    "repository": "https://github.com/checkly/pulumi-checkly",
    "logoUrl": "https://raw.githubusercontent.com/checkly/pulumi-checkly/main/assets/checkly.svg",
    "pluginDownloadURL": "github://api.github.com/checkly",
    "publisher": "checkly",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/checkly/pulumi-checkly/sdk/go/checkly",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@checkly/pulumi",
            "packageDescription": "A Pulumi package for creating and managing Checkly monitoring resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/checkly/terraform-provider-checkly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-checkly` repo](https://github.com/checkly/pulumi-checkly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-checkly` repo](https://github.com/checkly/terraform-provider-checkly/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/checkly/terraform-provider-checkly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-checkly` repo](https://github.com/checkly/pulumi-checkly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-checkly` repo](https://github.com/checkly/terraform-provider-checkly/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string"
            }
        },
        "defaults": [
            "apiKey"
        ]
    },
    "types": {
        "checkly:index/AlertChannelCall:AlertChannelCall": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this alert channel\n"
                },
                "number": {
                    "type": "string",
                    "description": "The mobile number to receive the alerts\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "number"
            ]
        },
        "checkly:index/AlertChannelEmail:AlertChannelEmail": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The email address of this email alert channel.\n"
                }
            },
            "type": "object",
            "required": [
                "address"
            ]
        },
        "checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie": {
            "properties": {
                "apiKey": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "priority": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "name",
                "priority",
                "region"
            ]
        },
        "checkly:index/AlertChannelPagerduty:AlertChannelPagerduty": {
            "properties": {
                "account": {
                    "type": "string"
                },
                "serviceKey": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "serviceKey"
            ]
        },
        "checkly:index/AlertChannelSlack:AlertChannelSlack": {
            "properties": {
                "channel": {
                    "type": "string",
                    "description": "The name of the alert's Slack channel\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Slack webhook URL\n"
                }
            },
            "type": "object",
            "required": [
                "channel",
                "url"
            ]
        },
        "checkly:index/AlertChannelSms:AlertChannelSms": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of this alert channel\n"
                },
                "number": {
                    "type": "string",
                    "description": "The mobile number to receive the alerts\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "number"
            ]
        },
        "checkly:index/AlertChannelWebhook:AlertChannelWebhook": {
            "properties": {
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "method": {
                    "type": "string",
                    "description": "(Default `POST`)\n"
                },
                "name": {
                    "type": "string"
                },
                "queryParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "template": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "webhookSecret": {
                    "type": "string"
                },
                "webhookType": {
                    "type": "string",
                    "description": "Type of the webhook. Possible values are 'WEBHOOK*DISCORD', 'WEBHOOK*FIREHYDRANT', 'WEBHOOK*GITLAB*ALERT', 'WEBHOOK*SPIKESH', 'WEBHOOK*SPLUNK', 'WEBHOOK*MSTEAMS' and 'WEBHOOK*TELEGRAM'.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "name",
                        "queryParameters",
                        "url"
                    ]
                }
            }
        },
        "checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription": {
            "properties": {
                "activated": {
                    "type": "boolean"
                },
                "channelId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "activated",
                "channelId"
            ]
        },
        "checkly:index/CheckAlertSettings:CheckAlertSettings": {
            "properties": {
                "escalationType": {
                    "type": "string",
                    "description": "Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.\n"
                },
                "parallelRunFailureThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsParallelRunFailureThreshold:CheckAlertSettingsParallelRunFailureThreshold"
                    }
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsReminder:CheckAlertSettingsReminder"
                    }
                },
                "runBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsRunBasedEscalation:CheckAlertSettingsRunBasedEscalation"
                    }
                },
                "sslCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsSslCertificate:CheckAlertSettingsSslCertificate"
                    },
                    "deprecationMessage": "This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "timeBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertSettingsTimeBasedEscalation:CheckAlertSettingsTimeBasedEscalation"
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsParallelRunFailureThreshold:CheckAlertSettingsParallelRunFailureThreshold": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Applicable only for checks scheduled in parallel in multiple locations.\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsReminder:CheckAlertSettingsReminder": {
            "properties": {
                "amount": {
                    "type": "integer",
                    "description": "How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Possible values are `5`, `10`, `15`, and `30`. (Default `5`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsRunBasedEscalation:CheckAlertSettingsRunBasedEscalation": {
            "properties": {
                "failedRunThreshold": {
                    "type": "integer",
                    "description": "After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsSslCertificate:CheckAlertSettingsSslCertificate": {
            "properties": {
                "alertThreshold": {
                    "type": "integer",
                    "description": "How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Applicable only for checks scheduled in parallel in multiple locations.\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckAlertSettingsTimeBasedEscalation:CheckAlertSettingsTimeBasedEscalation": {
            "properties": {
                "minutesFailingThreshold": {
                    "type": "integer",
                    "description": "After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckEnvironmentVariable:CheckEnvironmentVariable": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription": {
            "properties": {
                "activated": {
                    "type": "boolean"
                },
                "channelId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "activated",
                "channelId"
            ]
        },
        "checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings": {
            "properties": {
                "escalationType": {
                    "type": "string",
                    "description": "Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.\n"
                },
                "parallelRunFailureThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsParallelRunFailureThreshold:CheckGroupAlertSettingsParallelRunFailureThreshold"
                    }
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsReminder:CheckGroupAlertSettingsReminder"
                    }
                },
                "runBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsRunBasedEscalation:CheckGroupAlertSettingsRunBasedEscalation"
                    }
                },
                "sslCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsSslCertificate:CheckGroupAlertSettingsSslCertificate"
                    },
                    "deprecationMessage": "This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "timeBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettingsTimeBasedEscalation:CheckGroupAlertSettingsTimeBasedEscalation"
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsParallelRunFailureThreshold:CheckGroupAlertSettingsParallelRunFailureThreshold": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Applicable only for checks scheduled in parallel in multiple locations.\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsReminder:CheckGroupAlertSettingsReminder": {
            "properties": {
                "amount": {
                    "type": "integer",
                    "description": "How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Possible values are `5`, `10`, `15`, and `30`. (Default `5`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsRunBasedEscalation:CheckGroupAlertSettingsRunBasedEscalation": {
            "properties": {
                "failedRunThreshold": {
                    "type": "integer",
                    "description": "After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsSslCertificate:CheckGroupAlertSettingsSslCertificate": {
            "properties": {
                "alertThreshold": {
                    "type": "integer",
                    "description": "At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. (Default `3`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Applicable only for checks scheduled in parallel in multiple locations.\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupAlertSettingsTimeBasedEscalation:CheckGroupAlertSettingsTimeBasedEscalation": {
            "properties": {
                "minutesFailingThreshold": {
                    "type": "integer",
                    "description": "After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults": {
            "properties": {
                "assertions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaultsAssertion:CheckGroupApiCheckDefaultsAssertion"
                    }
                },
                "basicAuth": {
                    "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaultsBasicAuth:CheckGroupApiCheckDefaultsBasicAuth"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "queryParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The base url for this group which you can reference with the `GROUP_BASE_URL` variable in all group checks.\n",
                    "default": ""
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basicAuth",
                        "headers",
                        "queryParameters",
                        "url"
                    ]
                }
            }
        },
        "checkly:index/CheckGroupApiCheckDefaultsAssertion:CheckGroupApiCheckDefaultsAssertion": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.\n"
                },
                "property": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.\n"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source",
                "target"
            ]
        },
        "checkly:index/CheckGroupApiCheckDefaultsBasicAuth:CheckGroupApiCheckDefaultsBasicAuth": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "checkly:index/CheckGroupEnvironmentVariable:CheckGroupEnvironmentVariable": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "checkly:index/CheckGroupRetryStrategy:CheckGroupRetryStrategy": {
            "properties": {
                "baseBackoffSeconds": {
                    "type": "integer",
                    "description": "The number of seconds to wait before the first retry attempt.\n"
                },
                "maxDurationSeconds": {
                    "type": "integer",
                    "description": "The total amount of time to continue retrying the check (maximum 600 seconds).\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "The maximum number of times to retry the check. Value must be between 1 and 10.\n"
                },
                "sameRegion": {
                    "type": "boolean",
                    "description": "Whether retries should be run in the same region as the initial check run.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "checkly:index/CheckRequest:CheckRequest": {
            "properties": {
                "assertions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckRequestAssertion:CheckRequestAssertion"
                    },
                    "description": "A request can have multiple assertions.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/checkly:index/CheckRequestBasicAuth:CheckRequestBasicAuth",
                    "description": "Set up HTTP basic authentication (username \u0026 password).\n"
                },
                "body": {
                    "type": "string",
                    "description": "The body of the request.\n"
                },
                "bodyType": {
                    "type": "string",
                    "description": "The `Content-Type` header of the request. Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.\n"
                },
                "followRedirects": {
                    "type": "boolean"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. (Default `GET`).\n"
                },
                "queryParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "skipSsl": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basicAuth",
                        "headers",
                        "queryParameters",
                        "url"
                    ]
                }
            }
        },
        "checkly:index/CheckRequestAssertion:CheckRequestAssertion": {
            "properties": {
                "comparison": {
                    "type": "string",
                    "description": "The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.\n"
                },
                "property": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "description": "The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.\n"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source"
            ]
        },
        "checkly:index/CheckRequestBasicAuth:CheckRequestBasicAuth": {
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "checkly:index/CheckRetryStrategy:CheckRetryStrategy": {
            "properties": {
                "baseBackoffSeconds": {
                    "type": "integer",
                    "description": "The number of seconds to wait before the first retry attempt.\n"
                },
                "maxDurationSeconds": {
                    "type": "integer",
                    "description": "The total amount of time to continue retrying the check (maximum 600 seconds).\n"
                },
                "maxRetries": {
                    "type": "integer",
                    "description": "The maximum number of times to retry the check. Value must be between 1 and 10.\n"
                },
                "sameRegion": {
                    "type": "boolean",
                    "description": "Whether retries should be run in the same region as the initial check run.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "checkly:index/HeartbeatAlertChannelSubscription:HeartbeatAlertChannelSubscription": {
            "properties": {
                "activated": {
                    "type": "boolean"
                },
                "channelId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "activated",
                "channelId"
            ]
        },
        "checkly:index/HeartbeatAlertSettings:HeartbeatAlertSettings": {
            "properties": {
                "escalationType": {
                    "type": "string",
                    "description": "Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.\n"
                },
                "parallelRunFailureThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertSettingsParallelRunFailureThreshold:HeartbeatAlertSettingsParallelRunFailureThreshold"
                    }
                },
                "reminders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertSettingsReminder:HeartbeatAlertSettingsReminder"
                    }
                },
                "runBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertSettingsRunBasedEscalation:HeartbeatAlertSettingsRunBasedEscalation"
                    }
                },
                "sslCertificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertSettingsSslCertificate:HeartbeatAlertSettingsSslCertificate"
                    },
                    "deprecationMessage": "This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "timeBasedEscalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertSettingsTimeBasedEscalation:HeartbeatAlertSettingsTimeBasedEscalation"
                    }
                }
            },
            "type": "object"
        },
        "checkly:index/HeartbeatAlertSettingsParallelRunFailureThreshold:HeartbeatAlertSettingsParallelRunFailureThreshold": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Applicable only for checks scheduled in parallel in multiple locations.\n"
                },
                "percentage": {
                    "type": "integer",
                    "description": "Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/HeartbeatAlertSettingsReminder:HeartbeatAlertSettingsReminder": {
            "properties": {
                "amount": {
                    "type": "integer",
                    "description": "How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "Possible values are `5`, `10`, `15`, and `30`. (Default `5`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/HeartbeatAlertSettingsRunBasedEscalation:HeartbeatAlertSettingsRunBasedEscalation": {
            "properties": {
                "failedRunThreshold": {
                    "type": "integer",
                    "description": "After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/HeartbeatAlertSettingsSslCertificate:HeartbeatAlertSettingsSslCertificate": {
            "properties": {
                "alertThreshold": {
                    "type": "integer",
                    "description": "How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Applicable only for checks scheduled in parallel in multiple locations.\n"
                }
            },
            "type": "object"
        },
        "checkly:index/HeartbeatAlertSettingsTimeBasedEscalation:HeartbeatAlertSettingsTimeBasedEscalation": {
            "properties": {
                "minutesFailingThreshold": {
                    "type": "integer",
                    "description": "After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).\n"
                }
            },
            "type": "object"
        },
        "checkly:index/HeartbeatHeartbeat:HeartbeatHeartbeat": {
            "properties": {
                "grace": {
                    "type": "integer",
                    "description": "How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.\n"
                },
                "graceUnit": {
                    "type": "string",
                    "description": "Possible values `seconds`, `minutes`, `hours` and `days`.\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How often you expect a ping to the ping URL.\n"
                },
                "periodUnit": {
                    "type": "string",
                    "description": "Possible values `seconds`, `minutes`, `hours` and `days`.\n"
                },
                "pingToken": {
                    "type": "string",
                    "description": "Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.\n"
                }
            },
            "type": "object",
            "required": [
                "grace",
                "graceUnit",
                "period",
                "periodUnit"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "grace",
                        "graceUnit",
                        "period",
                        "periodUnit",
                        "pingToken"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the checkly package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string"
            }
        },
        "required": [
            "apiKey"
        ],
        "inputProperties": {
            "accountId": {
                "type": "string"
            },
            "apiKey": {
                "type": "string"
            },
            "apiUrl": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "apiKey"
        ]
    },
    "resources": {
        "checkly:index/alertChannel:AlertChannel": {
            "description": "Allows you to define alerting channels for the checks and groups in your account\n",
            "properties": {
                "call": {
                    "$ref": "#/types/checkly:index/AlertChannelCall:AlertChannelCall"
                },
                "email": {
                    "$ref": "#/types/checkly:index/AlertChannelEmail:AlertChannelEmail"
                },
                "opsgenie": {
                    "$ref": "#/types/checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie"
                },
                "pagerduty": {
                    "$ref": "#/types/checkly:index/AlertChannelPagerduty:AlertChannelPagerduty"
                },
                "sendDegraded": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sendFailure": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "sendRecovery": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "slack": {
                    "$ref": "#/types/checkly:index/AlertChannelSlack:AlertChannelSlack"
                },
                "sms": {
                    "$ref": "#/types/checkly:index/AlertChannelSms:AlertChannelSms"
                },
                "sslExpiry": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sslExpiryThreshold": {
                    "type": "integer",
                    "description": "Value must be between 1 and 30 (Default `30`)\n"
                },
                "webhook": {
                    "$ref": "#/types/checkly:index/AlertChannelWebhook:AlertChannelWebhook"
                }
            },
            "inputProperties": {
                "call": {
                    "$ref": "#/types/checkly:index/AlertChannelCall:AlertChannelCall"
                },
                "email": {
                    "$ref": "#/types/checkly:index/AlertChannelEmail:AlertChannelEmail"
                },
                "opsgenie": {
                    "$ref": "#/types/checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie"
                },
                "pagerduty": {
                    "$ref": "#/types/checkly:index/AlertChannelPagerduty:AlertChannelPagerduty"
                },
                "sendDegraded": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sendFailure": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "sendRecovery": {
                    "type": "boolean",
                    "description": "(Default `true`)\n"
                },
                "slack": {
                    "$ref": "#/types/checkly:index/AlertChannelSlack:AlertChannelSlack"
                },
                "sms": {
                    "$ref": "#/types/checkly:index/AlertChannelSms:AlertChannelSms"
                },
                "sslExpiry": {
                    "type": "boolean",
                    "description": "(Default `false`)\n"
                },
                "sslExpiryThreshold": {
                    "type": "integer",
                    "description": "Value must be between 1 and 30 (Default `30`)\n"
                },
                "webhook": {
                    "$ref": "#/types/checkly:index/AlertChannelWebhook:AlertChannelWebhook"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertChannel resources.\n",
                "properties": {
                    "call": {
                        "$ref": "#/types/checkly:index/AlertChannelCall:AlertChannelCall"
                    },
                    "email": {
                        "$ref": "#/types/checkly:index/AlertChannelEmail:AlertChannelEmail"
                    },
                    "opsgenie": {
                        "$ref": "#/types/checkly:index/AlertChannelOpsgenie:AlertChannelOpsgenie"
                    },
                    "pagerduty": {
                        "$ref": "#/types/checkly:index/AlertChannelPagerduty:AlertChannelPagerduty"
                    },
                    "sendDegraded": {
                        "type": "boolean",
                        "description": "(Default `false`)\n"
                    },
                    "sendFailure": {
                        "type": "boolean",
                        "description": "(Default `true`)\n"
                    },
                    "sendRecovery": {
                        "type": "boolean",
                        "description": "(Default `true`)\n"
                    },
                    "slack": {
                        "$ref": "#/types/checkly:index/AlertChannelSlack:AlertChannelSlack"
                    },
                    "sms": {
                        "$ref": "#/types/checkly:index/AlertChannelSms:AlertChannelSms"
                    },
                    "sslExpiry": {
                        "type": "boolean",
                        "description": "(Default `false`)\n"
                    },
                    "sslExpiryThreshold": {
                        "type": "integer",
                        "description": "Value must be between 1 and 30 (Default `30`)\n"
                    },
                    "webhook": {
                        "$ref": "#/types/checkly:index/AlertChannelWebhook:AlertChannelWebhook"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/check:Check": {
            "description": "Checks allows you to monitor key webapp flows, backend API's and set up alerting, so you get a notification when things break or slow down.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\n// Basic API Check\nconst exampleCheckCheck = new checkly.Check(\"exampleCheckCheck\", {\n    type: \"API\",\n    activated: true,\n    shouldFail: false,\n    frequency: 1,\n    useGlobalAlertSettings: true,\n    locations: [\"us-west-1\"],\n    request: {\n        url: \"https://api.example.com/\",\n        followRedirects: true,\n        skipSsl: false,\n        assertions: [{\n            source: \"STATUS_CODE\",\n            comparison: \"EQUALS\",\n            target: \"200\",\n        }],\n    },\n});\n// A more complex example using more assertions and setting alerts\nconst exampleCheck2 = new checkly.Check(\"exampleCheck2\", {\n    type: \"API\",\n    activated: true,\n    shouldFail: true,\n    frequency: 1,\n    degradedResponseTime: 5000,\n    maxResponseTime: 10000,\n    locations: [\n        \"us-west-1\",\n        \"ap-northeast-1\",\n        \"ap-south-1\",\n    ],\n    alertSettings: {\n        escalationType: \"RUN_BASED\",\n        runBasedEscalations: [{\n            failedRunThreshold: 1,\n        }],\n        reminders: [{\n            amount: 1,\n        }],\n    },\n    retryStrategy: {\n        type: \"FIXED\",\n        baseBackoffSeconds: 60,\n        maxDurationSeconds: 600,\n        maxRetries: 3,\n        sameRegion: false,\n    },\n    request: {\n        followRedirects: true,\n        skipSsl: false,\n        url: \"http://api.example.com/\",\n        queryParameters: {\n            search: \"foo\",\n        },\n        headers: {\n            \"X-Bogus\": \"bogus\",\n        },\n        assertions: [\n            {\n                source: \"JSON_BODY\",\n                property: \"code\",\n                comparison: \"HAS_VALUE\",\n                target: \"authentication.failed\",\n            },\n            {\n                source: \"STATUS_CODE\",\n                property: \"\",\n                comparison: \"EQUALS\",\n                target: \"401\",\n            },\n        ],\n        basicAuth: {\n            username: \"\",\n            password: \"\",\n        },\n    },\n});\n// Basic Browser  Check\nconst browserCheck1 = new checkly.Check(\"browserCheck1\", {\n    type: \"BROWSER\",\n    activated: true,\n    shouldFail: false,\n    frequency: 10,\n    useGlobalAlertSettings: true,\n    locations: [\"us-west-1\"],\n    runtimeId: \"2023.02\",\n    script: `const { expect, test } = require('@playwright/test')\n\ntest.use({ actionTimeout: 10000 })\n\ntest('visit page and take screenshot', async ({ page }) =\u003e {\n    const response = await page.goto(process.env.ENVIRONMENT_URL || 'https://checklyhq.com')\n    await page.screenshot({ path: 'screenshot.jpg' })\n    expect(response.status(), 'should respond with correct status code').toBeLessThan(400)\n})\n`,\n});\n// Connection checks with alert channels\nconst emailAc1 = new checkly.AlertChannel(\"emailAc1\", {email: {\n    address: \"info1@example.com\",\n}});\nconst emailAc2 = new checkly.AlertChannel(\"emailAc2\", {email: {\n    address: \"info2@example.com\",\n}});\nconst exampleCheckIndex_checkCheck = new checkly.Check(\"exampleCheckIndex/checkCheck\", {alertChannelSubscriptions: [\n    {\n        channelId: emailAc1.id,\n        activated: true,\n    },\n    {\n        channelId: emailAc2.id,\n        activated: true,\n    },\n]});\n// resource \"checkly_check\" \"browser_check_1\" {\n//   name                      = \"Example check\"\n//   type                      = \"BROWSER\"\n//   activated                 = true\n//   should_fail               = false\n//   frequency                 = 10\n//   use_global_alert_settings = true\n//   locations = [\n//     \"us-west-1\"\n//   ]\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\n# Basic API Check\nexample_check_check = checkly.Check(\"exampleCheckCheck\",\n    type=\"API\",\n    activated=True,\n    should_fail=False,\n    frequency=1,\n    use_global_alert_settings=True,\n    locations=[\"us-west-1\"],\n    request=checkly.CheckRequestArgs(\n        url=\"https://api.example.com/\",\n        follow_redirects=True,\n        skip_ssl=False,\n        assertions=[checkly.CheckRequestAssertionArgs(\n            source=\"STATUS_CODE\",\n            comparison=\"EQUALS\",\n            target=\"200\",\n        )],\n    ))\n# A more complex example using more assertions and setting alerts\nexample_check2 = checkly.Check(\"exampleCheck2\",\n    type=\"API\",\n    activated=True,\n    should_fail=True,\n    frequency=1,\n    degraded_response_time=5000,\n    max_response_time=10000,\n    locations=[\n        \"us-west-1\",\n        \"ap-northeast-1\",\n        \"ap-south-1\",\n    ],\n    alert_settings=checkly.CheckAlertSettingsArgs(\n        escalation_type=\"RUN_BASED\",\n        run_based_escalations=[checkly.CheckAlertSettingsRunBasedEscalationArgs(\n            failed_run_threshold=1,\n        )],\n        reminders=[checkly.CheckAlertSettingsReminderArgs(\n            amount=1,\n        )],\n    ),\n    retry_strategy=checkly.CheckRetryStrategyArgs(\n        type=\"FIXED\",\n        base_backoff_seconds=60,\n        max_duration_seconds=600,\n        max_retries=3,\n        same_region=False,\n    ),\n    request=checkly.CheckRequestArgs(\n        follow_redirects=True,\n        skip_ssl=False,\n        url=\"http://api.example.com/\",\n        query_parameters={\n            \"search\": \"foo\",\n        },\n        headers={\n            \"X-Bogus\": \"bogus\",\n        },\n        assertions=[\n            checkly.CheckRequestAssertionArgs(\n                source=\"JSON_BODY\",\n                property=\"code\",\n                comparison=\"HAS_VALUE\",\n                target=\"authentication.failed\",\n            ),\n            checkly.CheckRequestAssertionArgs(\n                source=\"STATUS_CODE\",\n                property=\"\",\n                comparison=\"EQUALS\",\n                target=\"401\",\n            ),\n        ],\n        basic_auth=checkly.CheckRequestBasicAuthArgs(\n            username=\"\",\n            password=\"\",\n        ),\n    ))\n# Basic Browser  Check\nbrowser_check1 = checkly.Check(\"browserCheck1\",\n    type=\"BROWSER\",\n    activated=True,\n    should_fail=False,\n    frequency=10,\n    use_global_alert_settings=True,\n    locations=[\"us-west-1\"],\n    runtime_id=\"2023.02\",\n    script=\"\"\"const { expect, test } = require('@playwright/test')\n\ntest.use({ actionTimeout: 10000 })\n\ntest('visit page and take screenshot', async ({ page }) =\u003e {\n    const response = await page.goto(process.env.ENVIRONMENT_URL || 'https://checklyhq.com')\n    await page.screenshot({ path: 'screenshot.jpg' })\n    expect(response.status(), 'should respond with correct status code').toBeLessThan(400)\n})\n\"\"\")\n# Connection checks with alert channels\nemail_ac1 = checkly.AlertChannel(\"emailAc1\", email=checkly.AlertChannelEmailArgs(\n    address=\"info1@example.com\",\n))\nemail_ac2 = checkly.AlertChannel(\"emailAc2\", email=checkly.AlertChannelEmailArgs(\n    address=\"info2@example.com\",\n))\nexample_check_index_check_check = checkly.Check(\"exampleCheckIndex/checkCheck\", alert_channel_subscriptions=[\n    checkly.CheckAlertChannelSubscriptionArgs(\n        channel_id=email_ac1.id,\n        activated=True,\n    ),\n    checkly.CheckAlertChannelSubscriptionArgs(\n        channel_id=email_ac2.id,\n        activated=True,\n    ),\n])\n# resource \"checkly_check\" \"browser_check_1\" {\n#   name                      = \"Example check\"\n#   type                      = \"BROWSER\"\n#   activated                 = true\n#   should_fail               = false\n#   frequency                 = 10\n#   use_global_alert_settings = true\n#   locations = [\n#     \"us-west-1\"\n#   ]\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Basic API Check\n    var exampleCheckCheck = new Checkly.Check(\"exampleCheckCheck\", new()\n    {\n        Type = \"API\",\n        Activated = true,\n        ShouldFail = false,\n        Frequency = 1,\n        UseGlobalAlertSettings = true,\n        Locations = new[]\n        {\n            \"us-west-1\",\n        },\n        Request = new Checkly.Inputs.CheckRequestArgs\n        {\n            Url = \"https://api.example.com/\",\n            FollowRedirects = true,\n            SkipSsl = false,\n            Assertions = new[]\n            {\n                new Checkly.Inputs.CheckRequestAssertionArgs\n                {\n                    Source = \"STATUS_CODE\",\n                    Comparison = \"EQUALS\",\n                    Target = \"200\",\n                },\n            },\n        },\n    });\n\n    // A more complex example using more assertions and setting alerts\n    var exampleCheck2 = new Checkly.Check(\"exampleCheck2\", new()\n    {\n        Type = \"API\",\n        Activated = true,\n        ShouldFail = true,\n        Frequency = 1,\n        DegradedResponseTime = 5000,\n        MaxResponseTime = 10000,\n        Locations = new[]\n        {\n            \"us-west-1\",\n            \"ap-northeast-1\",\n            \"ap-south-1\",\n        },\n        AlertSettings = new Checkly.Inputs.CheckAlertSettingsArgs\n        {\n            EscalationType = \"RUN_BASED\",\n            RunBasedEscalations = new[]\n            {\n                new Checkly.Inputs.CheckAlertSettingsRunBasedEscalationArgs\n                {\n                    FailedRunThreshold = 1,\n                },\n            },\n            Reminders = new[]\n            {\n                new Checkly.Inputs.CheckAlertSettingsReminderArgs\n                {\n                    Amount = 1,\n                },\n            },\n        },\n        RetryStrategy = new Checkly.Inputs.CheckRetryStrategyArgs\n        {\n            Type = \"FIXED\",\n            BaseBackoffSeconds = 60,\n            MaxDurationSeconds = 600,\n            MaxRetries = 3,\n            SameRegion = false,\n        },\n        Request = new Checkly.Inputs.CheckRequestArgs\n        {\n            FollowRedirects = true,\n            SkipSsl = false,\n            Url = \"http://api.example.com/\",\n            QueryParameters = \n            {\n                { \"search\", \"foo\" },\n            },\n            Headers = \n            {\n                { \"X-Bogus\", \"bogus\" },\n            },\n            Assertions = new[]\n            {\n                new Checkly.Inputs.CheckRequestAssertionArgs\n                {\n                    Source = \"JSON_BODY\",\n                    Property = \"code\",\n                    Comparison = \"HAS_VALUE\",\n                    Target = \"authentication.failed\",\n                },\n                new Checkly.Inputs.CheckRequestAssertionArgs\n                {\n                    Source = \"STATUS_CODE\",\n                    Property = \"\",\n                    Comparison = \"EQUALS\",\n                    Target = \"401\",\n                },\n            },\n            BasicAuth = new Checkly.Inputs.CheckRequestBasicAuthArgs\n            {\n                Username = \"\",\n                Password = \"\",\n            },\n        },\n    });\n\n    // Basic Browser  Check\n    var browserCheck1 = new Checkly.Check(\"browserCheck1\", new()\n    {\n        Type = \"BROWSER\",\n        Activated = true,\n        ShouldFail = false,\n        Frequency = 10,\n        UseGlobalAlertSettings = true,\n        Locations = new[]\n        {\n            \"us-west-1\",\n        },\n        RuntimeId = \"2023.02\",\n        Script = @\"const { expect, test } = require('@playwright/test')\n\ntest.use({ actionTimeout: 10000 })\n\ntest('visit page and take screenshot', async ({ page }) =\u003e {\n    const response = await page.goto(process.env.ENVIRONMENT_URL || 'https://checklyhq.com')\n    await page.screenshot({ path: 'screenshot.jpg' })\n    expect(response.status(), 'should respond with correct status code').toBeLessThan(400)\n})\n\",\n    });\n\n    // Connection checks with alert channels\n    var emailAc1 = new Checkly.AlertChannel(\"emailAc1\", new()\n    {\n        Email = new Checkly.Inputs.AlertChannelEmailArgs\n        {\n            Address = \"info1@example.com\",\n        },\n    });\n\n    var emailAc2 = new Checkly.AlertChannel(\"emailAc2\", new()\n    {\n        Email = new Checkly.Inputs.AlertChannelEmailArgs\n        {\n            Address = \"info2@example.com\",\n        },\n    });\n\n    var exampleCheckIndex_checkCheck = new Checkly.Check(\"exampleCheckIndex/checkCheck\", new()\n    {\n        AlertChannelSubscriptions = new[]\n        {\n            new Checkly.Inputs.CheckAlertChannelSubscriptionArgs\n            {\n                ChannelId = emailAc1.Id,\n                Activated = true,\n            },\n            new Checkly.Inputs.CheckAlertChannelSubscriptionArgs\n            {\n                ChannelId = emailAc2.Id,\n                Activated = true,\n            },\n        },\n    });\n\n    // resource \"checkly_check\" \"browser_check_1\" {\n    //   name                      = \"Example check\"\n    //   type                      = \"BROWSER\"\n    //   activated                 = true\n    //   should_fail               = false\n    //   frequency                 = 10\n    //   use_global_alert_settings = true\n    //   locations = [\n    //     \"us-west-1\"\n    //   ]\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewCheck(ctx, \"exampleCheckCheck\", \u0026checkly.CheckArgs{\n\t\t\tType:                   pulumi.String(\"API\"),\n\t\t\tActivated:              pulumi.Bool(true),\n\t\t\tShouldFail:             pulumi.Bool(false),\n\t\t\tFrequency:              pulumi.Int(1),\n\t\t\tUseGlobalAlertSettings: pulumi.Bool(true),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t},\n\t\t\tRequest: \u0026checkly.CheckRequestArgs{\n\t\t\t\tUrl:             pulumi.String(\"https://api.example.com/\"),\n\t\t\t\tFollowRedirects: pulumi.Bool(true),\n\t\t\t\tSkipSsl:         pulumi.Bool(false),\n\t\t\t\tAssertions: checkly.CheckRequestAssertionArray{\n\t\t\t\t\t\u0026checkly.CheckRequestAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"STATUS_CODE\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"EQUALS\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"200\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheck(ctx, \"exampleCheck2\", \u0026checkly.CheckArgs{\n\t\t\tType:                 pulumi.String(\"API\"),\n\t\t\tActivated:            pulumi.Bool(true),\n\t\t\tShouldFail:           pulumi.Bool(true),\n\t\t\tFrequency:            pulumi.Int(1),\n\t\t\tDegradedResponseTime: pulumi.Int(5000),\n\t\t\tMaxResponseTime:      pulumi.Int(10000),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t\tpulumi.String(\"ap-northeast-1\"),\n\t\t\t\tpulumi.String(\"ap-south-1\"),\n\t\t\t},\n\t\t\tAlertSettings: \u0026checkly.CheckAlertSettingsArgs{\n\t\t\t\tEscalationType: pulumi.String(\"RUN_BASED\"),\n\t\t\t\tRunBasedEscalations: checkly.CheckAlertSettingsRunBasedEscalationArray{\n\t\t\t\t\t\u0026checkly.CheckAlertSettingsRunBasedEscalationArgs{\n\t\t\t\t\t\tFailedRunThreshold: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tReminders: checkly.CheckAlertSettingsReminderArray{\n\t\t\t\t\t\u0026checkly.CheckAlertSettingsReminderArgs{\n\t\t\t\t\t\tAmount: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRetryStrategy: \u0026checkly.CheckRetryStrategyArgs{\n\t\t\t\tType:               pulumi.String(\"FIXED\"),\n\t\t\t\tBaseBackoffSeconds: pulumi.Int(60),\n\t\t\t\tMaxDurationSeconds: pulumi.Int(600),\n\t\t\t\tMaxRetries:         pulumi.Int(3),\n\t\t\t\tSameRegion:         pulumi.Bool(false),\n\t\t\t},\n\t\t\tRequest: \u0026checkly.CheckRequestArgs{\n\t\t\t\tFollowRedirects: pulumi.Bool(true),\n\t\t\t\tSkipSsl:         pulumi.Bool(false),\n\t\t\t\tUrl:             pulumi.String(\"http://api.example.com/\"),\n\t\t\t\tQueryParameters: pulumi.Map{\n\t\t\t\t\t\"search\": pulumi.Any(\"foo\"),\n\t\t\t\t},\n\t\t\t\tHeaders: pulumi.Map{\n\t\t\t\t\t\"X-Bogus\": pulumi.Any(\"bogus\"),\n\t\t\t\t},\n\t\t\t\tAssertions: checkly.CheckRequestAssertionArray{\n\t\t\t\t\t\u0026checkly.CheckRequestAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"JSON_BODY\"),\n\t\t\t\t\t\tProperty:   pulumi.String(\"code\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"HAS_VALUE\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"authentication.failed\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026checkly.CheckRequestAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"STATUS_CODE\"),\n\t\t\t\t\t\tProperty:   pulumi.String(\"\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"EQUALS\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"401\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tBasicAuth: \u0026checkly.CheckRequestBasicAuthArgs{\n\t\t\t\t\tUsername: pulumi.String(\"\"),\n\t\t\t\t\tPassword: pulumi.String(\"\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheck(ctx, \"browserCheck1\", \u0026checkly.CheckArgs{\n\t\t\tType:                   pulumi.String(\"BROWSER\"),\n\t\t\tActivated:              pulumi.Bool(true),\n\t\t\tShouldFail:             pulumi.Bool(false),\n\t\t\tFrequency:              pulumi.Int(10),\n\t\t\tUseGlobalAlertSettings: pulumi.Bool(true),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t},\n\t\t\tRuntimeId: pulumi.String(\"2023.02\"),\n\t\t\tScript: pulumi.String(`const { expect, test } = require('@playwright/test')\n\ntest.use({ actionTimeout: 10000 })\n\ntest('visit page and take screenshot', async ({ page }) =\u003e {\n    const response = await page.goto(process.env.ENVIRONMENT_URL || 'https://checklyhq.com')\n    await page.screenshot({ path: 'screenshot.jpg' })\n    expect(response.status(), 'should respond with correct status code').toBeLessThan(400)\n})\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailAc1, err := checkly.NewAlertChannel(ctx, \"emailAc1\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026checkly.AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"info1@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailAc2, err := checkly.NewAlertChannel(ctx, \"emailAc2\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026checkly.AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"info2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheck(ctx, \"exampleCheckIndex/checkCheck\", \u0026checkly.CheckArgs{\n\t\t\tAlertChannelSubscriptions: checkly.CheckAlertChannelSubscriptionArray{\n\t\t\t\t\u0026checkly.CheckAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc1.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026checkly.CheckAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc2.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.Check;\nimport com.pulumi.checkly.CheckArgs;\nimport com.pulumi.checkly.inputs.CheckRequestArgs;\nimport com.pulumi.checkly.inputs.CheckAlertSettingsArgs;\nimport com.pulumi.checkly.inputs.CheckRetryStrategyArgs;\nimport com.pulumi.checkly.inputs.CheckRequestBasicAuthArgs;\nimport com.pulumi.checkly.AlertChannel;\nimport com.pulumi.checkly.AlertChannelArgs;\nimport com.pulumi.checkly.inputs.AlertChannelEmailArgs;\nimport com.pulumi.checkly.inputs.CheckAlertChannelSubscriptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleCheckCheck = new Check(\"exampleCheckCheck\", CheckArgs.builder()        \n            .type(\"API\")\n            .activated(true)\n            .shouldFail(false)\n            .frequency(1)\n            .useGlobalAlertSettings(true)\n            .locations(\"us-west-1\")\n            .request(CheckRequestArgs.builder()\n                .url(\"https://api.example.com/\")\n                .followRedirects(true)\n                .skipSsl(false)\n                .assertions(CheckRequestAssertionArgs.builder()\n                    .source(\"STATUS_CODE\")\n                    .comparison(\"EQUALS\")\n                    .target(\"200\")\n                    .build())\n                .build())\n            .build());\n\n        var exampleCheck2 = new Check(\"exampleCheck2\", CheckArgs.builder()        \n            .type(\"API\")\n            .activated(true)\n            .shouldFail(true)\n            .frequency(1)\n            .degradedResponseTime(5000)\n            .maxResponseTime(10000)\n            .locations(            \n                \"us-west-1\",\n                \"ap-northeast-1\",\n                \"ap-south-1\")\n            .alertSettings(CheckAlertSettingsArgs.builder()\n                .escalationType(\"RUN_BASED\")\n                .runBasedEscalations(CheckAlertSettingsRunBasedEscalationArgs.builder()\n                    .failedRunThreshold(1)\n                    .build())\n                .reminders(CheckAlertSettingsReminderArgs.builder()\n                    .amount(1)\n                    .build())\n                .build())\n            .retryStrategy(CheckRetryStrategyArgs.builder()\n                .type(\"FIXED\")\n                .baseBackoffSeconds(60)\n                .maxDurationSeconds(600)\n                .maxRetries(3)\n                .sameRegion(false)\n                .build())\n            .request(CheckRequestArgs.builder()\n                .followRedirects(true)\n                .skipSsl(false)\n                .url(\"http://api.example.com/\")\n                .queryParameters(Map.of(\"search\", \"foo\"))\n                .headers(Map.of(\"X-Bogus\", \"bogus\"))\n                .assertions(                \n                    CheckRequestAssertionArgs.builder()\n                        .source(\"JSON_BODY\")\n                        .property(\"code\")\n                        .comparison(\"HAS_VALUE\")\n                        .target(\"authentication.failed\")\n                        .build(),\n                    CheckRequestAssertionArgs.builder()\n                        .source(\"STATUS_CODE\")\n                        .property(\"\")\n                        .comparison(\"EQUALS\")\n                        .target(\"401\")\n                        .build())\n                .basicAuth(CheckRequestBasicAuthArgs.builder()\n                    .username(\"\")\n                    .password(\"\")\n                    .build())\n                .build())\n            .build());\n\n        var browserCheck1 = new Check(\"browserCheck1\", CheckArgs.builder()        \n            .type(\"BROWSER\")\n            .activated(true)\n            .shouldFail(false)\n            .frequency(10)\n            .useGlobalAlertSettings(true)\n            .locations(\"us-west-1\")\n            .runtimeId(\"2023.02\")\n            .script(\"\"\"\nconst { expect, test } = require('@playwright/test')\n\ntest.use({ actionTimeout: 10000 })\n\ntest('visit page and take screenshot', async ({ page }) =\u003e {\n    const response = await page.goto(process.env.ENVIRONMENT_URL || 'https://checklyhq.com')\n    await page.screenshot({ path: 'screenshot.jpg' })\n    expect(response.status(), 'should respond with correct status code').toBeLessThan(400)\n})\n            \"\"\")\n            .build());\n\n        var emailAc1 = new AlertChannel(\"emailAc1\", AlertChannelArgs.builder()        \n            .email(AlertChannelEmailArgs.builder()\n                .address(\"info1@example.com\")\n                .build())\n            .build());\n\n        var emailAc2 = new AlertChannel(\"emailAc2\", AlertChannelArgs.builder()        \n            .email(AlertChannelEmailArgs.builder()\n                .address(\"info2@example.com\")\n                .build())\n            .build());\n\n        var exampleCheckIndex_checkCheck = new Check(\"exampleCheckIndex/checkCheck\", CheckArgs.builder()        \n            .alertChannelSubscriptions(            \n                CheckAlertChannelSubscriptionArgs.builder()\n                    .channelId(emailAc1.id())\n                    .activated(true)\n                    .build(),\n                CheckAlertChannelSubscriptionArgs.builder()\n                    .channelId(emailAc2.id())\n                    .activated(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Basic API Check\n  exampleCheckCheck:\n    type: checkly:Check\n    properties:\n      type: API\n      activated: true\n      shouldFail: false\n      frequency: 1\n      useGlobalAlertSettings: true\n      locations:\n        - us-west-1\n      request:\n        url: https://api.example.com/\n        followRedirects: true\n        skipSsl: false\n        assertions:\n          - source: STATUS_CODE\n            comparison: EQUALS\n            target: '200'\n  # A more complex example using more assertions and setting alerts\n  exampleCheck2:\n    type: checkly:Check\n    properties:\n      type: API\n      activated: true\n      shouldFail: true\n      frequency: 1\n      degradedResponseTime: 5000\n      maxResponseTime: 10000\n      locations:\n        - us-west-1\n        - ap-northeast-1\n        - ap-south-1\n      alertSettings:\n        escalationType: RUN_BASED\n        runBasedEscalations:\n          - failedRunThreshold: 1\n        reminders:\n          - amount: 1\n      retryStrategy:\n        type: FIXED\n        baseBackoffSeconds: 60\n        maxDurationSeconds: 600\n        maxRetries: 3\n        sameRegion: false\n      request:\n        followRedirects: true\n        skipSsl: false\n        url: http://api.example.com/\n        queryParameters:\n          search: foo\n        headers:\n          X-Bogus: bogus\n        assertions:\n          - source: JSON_BODY\n            property: code\n            comparison: HAS_VALUE\n            target: authentication.failed\n          - source: STATUS_CODE\n            property:\n            comparison: EQUALS\n            target: '401'\n        basicAuth:\n          username:\n          password:\n  # Basic Browser  Check\n  browserCheck1:\n    type: checkly:Check\n    properties:\n      type: BROWSER\n      activated: true\n      shouldFail: false\n      frequency: 10\n      useGlobalAlertSettings: true\n      locations:\n        - us-west-1\n      runtimeId: '2023.02'\n      script: |\n        const { expect, test } = require('@playwright/test')\n\n        test.use({ actionTimeout: 10000 })\n\n        test('visit page and take screenshot', async ({ page }) =\u003e {\n            const response = await page.goto(process.env.ENVIRONMENT_URL || 'https://checklyhq.com')\n            await page.screenshot({ path: 'screenshot.jpg' })\n            expect(response.status(), 'should respond with correct status code').toBeLessThan(400)\n        })\n  # Connection checks with alert channels\n  emailAc1:\n    type: checkly:AlertChannel\n    properties:\n      email:\n        address: info1@example.com\n  emailAc2:\n    type: checkly:AlertChannel\n    properties:\n      email:\n        address: info2@example.com\n  exampleCheckIndex/checkCheck: # resource \"checkly_check\" \"browser_check_1\" {\n  #   name                      = \"Example check\"\n  #   type                      = \"BROWSER\"\n  #   activated                 = true\n  #   should_fail               = false\n  #   frequency                 = 10\n  #   use_global_alert_settings = true\n  #   locations = [\n  #     \"us-west-1\"\n  #   ]\n    type: checkly:Check\n    properties:\n      alertChannelSubscriptions:\n        - channelId: ${emailAc1.id}\n          activated: true\n        - channelId: ${emailAc2.id}\n          activated: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription"
                    },
                    "description": "An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.\n"
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckAlertSettings:CheckAlertSettings"
                },
                "degradedResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.\n",
                    "deprecationMessage": "The property `double_check` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retry_strategy` property instead."
                },
                "environmentVariable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckEnvironmentVariable:CheckEnvironmentVariable"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden. These are only relevant for browser checks. Use global environment variables whenever possible.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.\n"
                },
                "frequencyOffset": {
                    "type": "integer",
                    "description": "This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequency_offset` could be `10`, `20` or `30`.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the check group this check is part of.\n"
                },
                "groupOrder": {
                    "type": "integer",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.\n"
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the this check. (Default [\"us-east-1\"])\n"
                },
                "maxResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "request": {
                    "$ref": "#/types/checkly:index/CheckRequest:CheckRequest",
                    "description": "An API check might have one request config.\n"
                },
                "retryStrategy": {
                    "$ref": "#/types/checkly:index/CheckRetryStrategy:CheckRetryStrategy",
                    "description": "A strategy for retrying failed check runs.\n"
                },
                "runParallel": {
                    "type": "boolean",
                    "description": "Determines if the check should run in all selected locations in parallel or round-robin.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this check.\n"
                },
                "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.\n"
                },
                "sslCheck": {
                    "type": "boolean",
                    "description": "Determines if the SSL certificate should be validated for expiry.\n",
                    "deprecationMessage": "The property `ssl_check` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "sslCheckDomain": {
                    "type": "string",
                    "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                }
            },
            "required": [
                "activated",
                "alertSettings",
                "frequency",
                "name",
                "retryStrategy",
                "type"
            ],
            "inputProperties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription"
                    },
                    "description": "An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.\n"
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckAlertSettings:CheckAlertSettings"
                },
                "degradedResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.\n",
                    "deprecationMessage": "The property `double_check` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retry_strategy` property instead."
                },
                "environmentVariable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckEnvironmentVariable:CheckEnvironmentVariable"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden. These are only relevant for browser checks. Use global environment variables whenever possible.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.\n"
                },
                "frequencyOffset": {
                    "type": "integer",
                    "description": "This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequency_offset` could be `10`, `20` or `30`.\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "The id of the check group this check is part of.\n"
                },
                "groupOrder": {
                    "type": "integer",
                    "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.\n"
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the this check. (Default [\"us-east-1\"])\n"
                },
                "maxResponseTime": {
                    "type": "integer",
                    "description": "The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "request": {
                    "$ref": "#/types/checkly:index/CheckRequest:CheckRequest",
                    "description": "An API check might have one request config.\n"
                },
                "retryStrategy": {
                    "$ref": "#/types/checkly:index/CheckRetryStrategy:CheckRetryStrategy",
                    "description": "A strategy for retrying failed check runs.\n"
                },
                "runParallel": {
                    "type": "boolean",
                    "description": "Determines if the check should run in all selected locations in parallel or round-robin.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this check.\n"
                },
                "script": {
                    "type": "string",
                    "description": "A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "shouldFail": {
                    "type": "boolean",
                    "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.\n"
                },
                "sslCheck": {
                    "type": "boolean",
                    "description": "Determines if the SSL certificate should be validated for expiry.\n",
                    "deprecationMessage": "The property `ssl_check` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                },
                "sslCheckDomain": {
                    "type": "string",
                    "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                }
            },
            "requiredInputs": [
                "activated",
                "frequency",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Check resources.\n",
                "properties": {
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                    },
                    "alertChannelSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/CheckAlertChannelSubscription:CheckAlertChannelSubscription"
                        },
                        "description": "An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.\n"
                    },
                    "alertSettings": {
                        "$ref": "#/types/checkly:index/CheckAlertSettings:CheckAlertSettings"
                    },
                    "degradedResponseTime": {
                        "type": "integer",
                        "description": "The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).\n"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.\n",
                        "deprecationMessage": "The property `double_check` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retry_strategy` property instead."
                    },
                    "environmentVariable": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/CheckEnvironmentVariable:CheckEnvironmentVariable"
                        },
                        "description": "Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden. These are only relevant for browser checks. Use global environment variables whenever possible.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.\n",
                        "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.\n"
                    },
                    "frequencyOffset": {
                        "type": "integer",
                        "description": "This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequency_offset` could be `10`, `20` or `30`.\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the check group this check is part of.\n"
                    },
                    "groupOrder": {
                        "type": "integer",
                        "description": "The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.\n"
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase.\n"
                    },
                    "localTeardownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more data center locations where to run the this check. (Default [\"us-east-1\"])\n"
                    },
                    "maxResponseTime": {
                        "type": "integer",
                        "description": "The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).\n"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.\n"
                    },
                    "privateLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more private locations slugs.\n"
                    },
                    "request": {
                        "$ref": "#/types/checkly:index/CheckRequest:CheckRequest",
                        "description": "An API check might have one request config.\n"
                    },
                    "retryStrategy": {
                        "$ref": "#/types/checkly:index/CheckRetryStrategy:CheckRetryStrategy",
                        "description": "A strategy for retrying failed check runs.\n"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "Determines if the check should run in all selected locations in parallel or round-robin.\n"
                    },
                    "runtimeId": {
                        "type": "string",
                        "description": "The id of the runtime to use for this check.\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.\n"
                    },
                    "setupSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                    },
                    "shouldFail": {
                        "type": "boolean",
                        "description": "Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.\n"
                    },
                    "sslCheck": {
                        "type": "boolean",
                        "description": "Determines if the SSL certificate should be validated for expiry.\n",
                        "deprecationMessage": "The property `ssl_check` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version."
                    },
                    "sslCheckDomain": {
                        "type": "string",
                        "description": "A valid fully qualified domain name (FQDN) to check its SSL certificate.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags for organizing and filtering checks.\n"
                    },
                    "teardownSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.\n"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/checkGroup:CheckGroup": {
            "description": "Check groups allow  you to group together a set of related checks, which can also share default settings for various attributes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst testGroup1CheckGroup = new checkly.CheckGroup(\"testGroup1CheckGroup\", {\n    activated: true,\n    muted: false,\n    tags: [\"auto\"],\n    locations: [\"eu-west-1\"],\n    concurrency: 3,\n    apiCheckDefaults: {\n        url: \"http://example.com/\",\n        headers: {\n            \"X-Test\": \"foo\",\n        },\n        queryParameters: {\n            query: \"foo\",\n        },\n        assertions: [\n            {\n                source: \"STATUS_CODE\",\n                property: \"\",\n                comparison: \"EQUALS\",\n                target: \"200\",\n            },\n            {\n                source: \"TEXT_BODY\",\n                property: \"\",\n                comparison: \"CONTAINS\",\n                target: \"welcome\",\n            },\n        ],\n        basicAuth: {\n            username: \"user\",\n            password: \"pass\",\n        },\n    },\n    environmentVariables: [\n        {\n            key: \"TEST_ENV_VAR\",\n            value: \"Hello world\",\n            locked: false,\n        },\n        {\n            key: \"ADDITIONAL_ENV_VAR\",\n            value: \"test value\",\n            locked: true,\n        },\n    ],\n    useGlobalAlertSettings: false,\n    alertSettings: {\n        escalationType: \"RUN_BASED\",\n        runBasedEscalations: [{\n            failedRunThreshold: 1,\n        }],\n        reminders: [{\n            amount: 2,\n            interval: 5,\n        }],\n    },\n    localSetupScript: \"setup-test\",\n    localTeardownScript: \"teardown-test\",\n});\n// Add a check to a group\nconst testCheck1 = new checkly.Check(\"testCheck1\", {\n    type: \"API\",\n    activated: true,\n    frequency: 1,\n    locations: [\"us-west-1\"],\n    request: {\n        url: \"https://api.example.com/\",\n    },\n    groupId: testGroup1CheckGroup.id,\n    groupOrder: 1,\n});\n// Using with alert channels\nconst emailAc1 = new checkly.AlertChannel(\"emailAc1\", {email: {\n    address: \"info@example.com\",\n}});\nconst emailAc2 = new checkly.AlertChannel(\"emailAc2\", {email: {\n    address: \"info2@example.com\",\n}});\n// Connect the check group to the alert channels\nconst testGroup1Index_checkGroupCheckGroup = new checkly.CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", {alertChannelSubscriptions: [\n    {\n        channelId: emailAc1.id,\n        activated: true,\n    },\n    {\n        channelId: emailAc2.id,\n        activated: true,\n    },\n]});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ntest_group1_check_group = checkly.CheckGroup(\"testGroup1CheckGroup\",\n    activated=True,\n    muted=False,\n    tags=[\"auto\"],\n    locations=[\"eu-west-1\"],\n    concurrency=3,\n    api_check_defaults=checkly.CheckGroupApiCheckDefaultsArgs(\n        url=\"http://example.com/\",\n        headers={\n            \"X-Test\": \"foo\",\n        },\n        query_parameters={\n            \"query\": \"foo\",\n        },\n        assertions=[\n            checkly.CheckGroupApiCheckDefaultsAssertionArgs(\n                source=\"STATUS_CODE\",\n                property=\"\",\n                comparison=\"EQUALS\",\n                target=\"200\",\n            ),\n            checkly.CheckGroupApiCheckDefaultsAssertionArgs(\n                source=\"TEXT_BODY\",\n                property=\"\",\n                comparison=\"CONTAINS\",\n                target=\"welcome\",\n            ),\n        ],\n        basic_auth=checkly.CheckGroupApiCheckDefaultsBasicAuthArgs(\n            username=\"user\",\n            password=\"pass\",\n        ),\n    ),\n    environment_variables=[\n        {\n            \"key\": \"TEST_ENV_VAR\",\n            \"value\": \"Hello world\",\n            \"locked\": False,\n        },\n        {\n            \"key\": \"ADDITIONAL_ENV_VAR\",\n            \"value\": \"test value\",\n            \"locked\": True,\n        },\n    ],\n    use_global_alert_settings=False,\n    alert_settings=checkly.CheckGroupAlertSettingsArgs(\n        escalation_type=\"RUN_BASED\",\n        run_based_escalations=[checkly.CheckGroupAlertSettingsRunBasedEscalationArgs(\n            failed_run_threshold=1,\n        )],\n        reminders=[checkly.CheckGroupAlertSettingsReminderArgs(\n            amount=2,\n            interval=5,\n        )],\n    ),\n    local_setup_script=\"setup-test\",\n    local_teardown_script=\"teardown-test\")\n# Add a check to a group\ntest_check1 = checkly.Check(\"testCheck1\",\n    type=\"API\",\n    activated=True,\n    frequency=1,\n    locations=[\"us-west-1\"],\n    request=checkly.CheckRequestArgs(\n        url=\"https://api.example.com/\",\n    ),\n    group_id=test_group1_check_group.id,\n    group_order=1)\n# Using with alert channels\nemail_ac1 = checkly.AlertChannel(\"emailAc1\", email=checkly.AlertChannelEmailArgs(\n    address=\"info@example.com\",\n))\nemail_ac2 = checkly.AlertChannel(\"emailAc2\", email=checkly.AlertChannelEmailArgs(\n    address=\"info2@example.com\",\n))\n# Connect the check group to the alert channels\ntest_group1_index_check_group_check_group = checkly.CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", alert_channel_subscriptions=[\n    checkly.CheckGroupAlertChannelSubscriptionArgs(\n        channel_id=email_ac1.id,\n        activated=True,\n    ),\n    checkly.CheckGroupAlertChannelSubscriptionArgs(\n        channel_id=email_ac2.id,\n        activated=True,\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testGroup1CheckGroup = new Checkly.CheckGroup(\"testGroup1CheckGroup\", new()\n    {\n        Activated = true,\n        Muted = false,\n        Tags = new[]\n        {\n            \"auto\",\n        },\n        Locations = new[]\n        {\n            \"eu-west-1\",\n        },\n        Concurrency = 3,\n        ApiCheckDefaults = new Checkly.Inputs.CheckGroupApiCheckDefaultsArgs\n        {\n            Url = \"http://example.com/\",\n            Headers = \n            {\n                { \"X-Test\", \"foo\" },\n            },\n            QueryParameters = \n            {\n                { \"query\", \"foo\" },\n            },\n            Assertions = new[]\n            {\n                new Checkly.Inputs.CheckGroupApiCheckDefaultsAssertionArgs\n                {\n                    Source = \"STATUS_CODE\",\n                    Property = \"\",\n                    Comparison = \"EQUALS\",\n                    Target = \"200\",\n                },\n                new Checkly.Inputs.CheckGroupApiCheckDefaultsAssertionArgs\n                {\n                    Source = \"TEXT_BODY\",\n                    Property = \"\",\n                    Comparison = \"CONTAINS\",\n                    Target = \"welcome\",\n                },\n            },\n            BasicAuth = new Checkly.Inputs.CheckGroupApiCheckDefaultsBasicAuthArgs\n            {\n                Username = \"user\",\n                Password = \"pass\",\n            },\n        },\n        EnvironmentVariables = new[]\n        {\n            \n            {\n                { \"key\", \"TEST_ENV_VAR\" },\n                { \"value\", \"Hello world\" },\n                { \"locked\", false },\n            },\n            \n            {\n                { \"key\", \"ADDITIONAL_ENV_VAR\" },\n                { \"value\", \"test value\" },\n                { \"locked\", true },\n            },\n        },\n        UseGlobalAlertSettings = false,\n        AlertSettings = new Checkly.Inputs.CheckGroupAlertSettingsArgs\n        {\n            EscalationType = \"RUN_BASED\",\n            RunBasedEscalations = new[]\n            {\n                new Checkly.Inputs.CheckGroupAlertSettingsRunBasedEscalationArgs\n                {\n                    FailedRunThreshold = 1,\n                },\n            },\n            Reminders = new[]\n            {\n                new Checkly.Inputs.CheckGroupAlertSettingsReminderArgs\n                {\n                    Amount = 2,\n                    Interval = 5,\n                },\n            },\n        },\n        LocalSetupScript = \"setup-test\",\n        LocalTeardownScript = \"teardown-test\",\n    });\n\n    // Add a check to a group\n    var testCheck1 = new Checkly.Check(\"testCheck1\", new()\n    {\n        Type = \"API\",\n        Activated = true,\n        Frequency = 1,\n        Locations = new[]\n        {\n            \"us-west-1\",\n        },\n        Request = new Checkly.Inputs.CheckRequestArgs\n        {\n            Url = \"https://api.example.com/\",\n        },\n        GroupId = testGroup1CheckGroup.Id,\n        GroupOrder = 1,\n    });\n\n    // Using with alert channels\n    var emailAc1 = new Checkly.AlertChannel(\"emailAc1\", new()\n    {\n        Email = new Checkly.Inputs.AlertChannelEmailArgs\n        {\n            Address = \"info@example.com\",\n        },\n    });\n\n    var emailAc2 = new Checkly.AlertChannel(\"emailAc2\", new()\n    {\n        Email = new Checkly.Inputs.AlertChannelEmailArgs\n        {\n            Address = \"info2@example.com\",\n        },\n    });\n\n    // Connect the check group to the alert channels\n    var testGroup1Index_checkGroupCheckGroup = new Checkly.CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", new()\n    {\n        AlertChannelSubscriptions = new[]\n        {\n            new Checkly.Inputs.CheckGroupAlertChannelSubscriptionArgs\n            {\n                ChannelId = emailAc1.Id,\n                Activated = true,\n            },\n            new Checkly.Inputs.CheckGroupAlertChannelSubscriptionArgs\n            {\n                ChannelId = emailAc2.Id,\n                Activated = true,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestGroup1CheckGroup, err := checkly.NewCheckGroup(ctx, \"testGroup1CheckGroup\", \u0026checkly.CheckGroupArgs{\n\t\t\tActivated: pulumi.Bool(true),\n\t\t\tMuted:     pulumi.Bool(false),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"auto\"),\n\t\t\t},\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"eu-west-1\"),\n\t\t\t},\n\t\t\tConcurrency: pulumi.Int(3),\n\t\t\tApiCheckDefaults: \u0026checkly.CheckGroupApiCheckDefaultsArgs{\n\t\t\t\tUrl: pulumi.String(\"http://example.com/\"),\n\t\t\t\tHeaders: pulumi.Map{\n\t\t\t\t\t\"X-Test\": pulumi.Any(\"foo\"),\n\t\t\t\t},\n\t\t\t\tQueryParameters: pulumi.Map{\n\t\t\t\t\t\"query\": pulumi.Any(\"foo\"),\n\t\t\t\t},\n\t\t\t\tAssertions: checkly.CheckGroupApiCheckDefaultsAssertionArray{\n\t\t\t\t\t\u0026checkly.CheckGroupApiCheckDefaultsAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"STATUS_CODE\"),\n\t\t\t\t\t\tProperty:   pulumi.String(\"\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"EQUALS\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"200\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026checkly.CheckGroupApiCheckDefaultsAssertionArgs{\n\t\t\t\t\t\tSource:     pulumi.String(\"TEXT_BODY\"),\n\t\t\t\t\t\tProperty:   pulumi.String(\"\"),\n\t\t\t\t\t\tComparison: pulumi.String(\"CONTAINS\"),\n\t\t\t\t\t\tTarget:     pulumi.String(\"welcome\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tBasicAuth: \u0026checkly.CheckGroupApiCheckDefaultsBasicAuthArgs{\n\t\t\t\t\tUsername: pulumi.String(\"user\"),\n\t\t\t\t\tPassword: pulumi.String(\"pass\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironmentVariables: pulumi.Map{\n\t\t\t\tpulumi.Any{\n\t\t\t\t\tKey:    \"TEST_ENV_VAR\",\n\t\t\t\t\tValue:  \"Hello world\",\n\t\t\t\t\tLocked: false,\n\t\t\t\t},\n\t\t\t\tpulumi.Any{\n\t\t\t\t\tKey:    \"ADDITIONAL_ENV_VAR\",\n\t\t\t\t\tValue:  \"test value\",\n\t\t\t\t\tLocked: true,\n\t\t\t\t},\n\t\t\t},\n\t\t\tUseGlobalAlertSettings: pulumi.Bool(false),\n\t\t\tAlertSettings: \u0026checkly.CheckGroupAlertSettingsArgs{\n\t\t\t\tEscalationType: pulumi.String(\"RUN_BASED\"),\n\t\t\t\tRunBasedEscalations: checkly.CheckGroupAlertSettingsRunBasedEscalationArray{\n\t\t\t\t\t\u0026checkly.CheckGroupAlertSettingsRunBasedEscalationArgs{\n\t\t\t\t\t\tFailedRunThreshold: pulumi.Int(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tReminders: checkly.CheckGroupAlertSettingsReminderArray{\n\t\t\t\t\t\u0026checkly.CheckGroupAlertSettingsReminderArgs{\n\t\t\t\t\t\tAmount:   pulumi.Int(2),\n\t\t\t\t\t\tInterval: pulumi.Int(5),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLocalSetupScript:    pulumi.String(\"setup-test\"),\n\t\t\tLocalTeardownScript: pulumi.String(\"teardown-test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheck(ctx, \"testCheck1\", \u0026checkly.CheckArgs{\n\t\t\tType:      pulumi.String(\"API\"),\n\t\t\tActivated: pulumi.Bool(true),\n\t\t\tFrequency: pulumi.Int(1),\n\t\t\tLocations: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"us-west-1\"),\n\t\t\t},\n\t\t\tRequest: \u0026checkly.CheckRequestArgs{\n\t\t\t\tUrl: pulumi.String(\"https://api.example.com/\"),\n\t\t\t},\n\t\t\tGroupId:    testGroup1CheckGroup.ID(),\n\t\t\tGroupOrder: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailAc1, err := checkly.NewAlertChannel(ctx, \"emailAc1\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026checkly.AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"info@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\temailAc2, err := checkly.NewAlertChannel(ctx, \"emailAc2\", \u0026checkly.AlertChannelArgs{\n\t\t\tEmail: \u0026checkly.AlertChannelEmailArgs{\n\t\t\t\tAddress: pulumi.String(\"info2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewCheckGroup(ctx, \"testGroup1Index/checkGroupCheckGroup\", \u0026checkly.CheckGroupArgs{\n\t\t\tAlertChannelSubscriptions: checkly.CheckGroupAlertChannelSubscriptionArray{\n\t\t\t\t\u0026checkly.CheckGroupAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc1.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t\t\u0026checkly.CheckGroupAlertChannelSubscriptionArgs{\n\t\t\t\t\tChannelId: emailAc2.ID(),\n\t\t\t\t\tActivated: pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.CheckGroup;\nimport com.pulumi.checkly.CheckGroupArgs;\nimport com.pulumi.checkly.inputs.CheckGroupApiCheckDefaultsArgs;\nimport com.pulumi.checkly.inputs.CheckGroupApiCheckDefaultsBasicAuthArgs;\nimport com.pulumi.checkly.inputs.CheckGroupAlertSettingsArgs;\nimport com.pulumi.checkly.Check;\nimport com.pulumi.checkly.CheckArgs;\nimport com.pulumi.checkly.inputs.CheckRequestArgs;\nimport com.pulumi.checkly.AlertChannel;\nimport com.pulumi.checkly.AlertChannelArgs;\nimport com.pulumi.checkly.inputs.AlertChannelEmailArgs;\nimport com.pulumi.checkly.inputs.CheckGroupAlertChannelSubscriptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testGroup1CheckGroup = new CheckGroup(\"testGroup1CheckGroup\", CheckGroupArgs.builder()        \n            .activated(true)\n            .muted(false)\n            .tags(\"auto\")\n            .locations(\"eu-west-1\")\n            .concurrency(3)\n            .apiCheckDefaults(CheckGroupApiCheckDefaultsArgs.builder()\n                .url(\"http://example.com/\")\n                .headers(Map.of(\"X-Test\", \"foo\"))\n                .queryParameters(Map.of(\"query\", \"foo\"))\n                .assertions(                \n                    CheckGroupApiCheckDefaultsAssertionArgs.builder()\n                        .source(\"STATUS_CODE\")\n                        .property(\"\")\n                        .comparison(\"EQUALS\")\n                        .target(\"200\")\n                        .build(),\n                    CheckGroupApiCheckDefaultsAssertionArgs.builder()\n                        .source(\"TEXT_BODY\")\n                        .property(\"\")\n                        .comparison(\"CONTAINS\")\n                        .target(\"welcome\")\n                        .build())\n                .basicAuth(CheckGroupApiCheckDefaultsBasicAuthArgs.builder()\n                    .username(\"user\")\n                    .password(\"pass\")\n                    .build())\n                .build())\n            .environmentVariables(            \n                Map.ofEntries(\n                    Map.entry(\"key\", \"TEST_ENV_VAR\"),\n                    Map.entry(\"value\", \"Hello world\"),\n                    Map.entry(\"locked\", false)\n                ),\n                Map.ofEntries(\n                    Map.entry(\"key\", \"ADDITIONAL_ENV_VAR\"),\n                    Map.entry(\"value\", \"test value\"),\n                    Map.entry(\"locked\", true)\n                ))\n            .useGlobalAlertSettings(false)\n            .alertSettings(CheckGroupAlertSettingsArgs.builder()\n                .escalationType(\"RUN_BASED\")\n                .runBasedEscalations(CheckGroupAlertSettingsRunBasedEscalationArgs.builder()\n                    .failedRunThreshold(1)\n                    .build())\n                .reminders(CheckGroupAlertSettingsReminderArgs.builder()\n                    .amount(2)\n                    .interval(5)\n                    .build())\n                .build())\n            .localSetupScript(\"setup-test\")\n            .localTeardownScript(\"teardown-test\")\n            .build());\n\n        var testCheck1 = new Check(\"testCheck1\", CheckArgs.builder()        \n            .type(\"API\")\n            .activated(true)\n            .frequency(1)\n            .locations(\"us-west-1\")\n            .request(CheckRequestArgs.builder()\n                .url(\"https://api.example.com/\")\n                .build())\n            .groupId(testGroup1CheckGroup.id())\n            .groupOrder(1)\n            .build());\n\n        var emailAc1 = new AlertChannel(\"emailAc1\", AlertChannelArgs.builder()        \n            .email(AlertChannelEmailArgs.builder()\n                .address(\"info@example.com\")\n                .build())\n            .build());\n\n        var emailAc2 = new AlertChannel(\"emailAc2\", AlertChannelArgs.builder()        \n            .email(AlertChannelEmailArgs.builder()\n                .address(\"info2@example.com\")\n                .build())\n            .build());\n\n        var testGroup1Index_checkGroupCheckGroup = new CheckGroup(\"testGroup1Index/checkGroupCheckGroup\", CheckGroupArgs.builder()        \n            .alertChannelSubscriptions(            \n                CheckGroupAlertChannelSubscriptionArgs.builder()\n                    .channelId(emailAc1.id())\n                    .activated(true)\n                    .build(),\n                CheckGroupAlertChannelSubscriptionArgs.builder()\n                    .channelId(emailAc2.id())\n                    .activated(true)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testGroup1CheckGroup:\n    type: checkly:CheckGroup\n    properties:\n      activated: true\n      muted: false\n      tags:\n        - auto\n      locations:\n        - eu-west-1\n      concurrency: 3\n      apiCheckDefaults:\n        url: http://example.com/\n        headers:\n          X-Test: foo\n        queryParameters:\n          query: foo\n        assertions:\n          - source: STATUS_CODE\n            property:\n            comparison: EQUALS\n            target: '200'\n          - source: TEXT_BODY\n            property:\n            comparison: CONTAINS\n            target: welcome\n        basicAuth:\n          username: user\n          password: pass\n      environmentVariables:\n        - key: TEST_ENV_VAR\n          value: Hello world\n          locked: false\n        - key: ADDITIONAL_ENV_VAR\n          value: test value\n          locked: true\n      useGlobalAlertSettings: false\n      alertSettings:\n        escalationType: RUN_BASED\n        runBasedEscalations:\n          - failedRunThreshold: 1\n        reminders:\n          - amount: 2\n            interval: 5\n      localSetupScript: setup-test\n      localTeardownScript: teardown-test\n  # Add a check to a group\n  testCheck1:\n    type: checkly:Check\n    properties:\n      type: API\n      activated: true\n      frequency: 1\n      locations:\n        - us-west-1\n      request:\n        url: https://api.example.com/\n      groupId: ${testGroup1CheckGroup.id}\n      groupOrder: 1\n  # Using with alert channels\n  emailAc1:\n    type: checkly:AlertChannel\n    properties:\n      email:\n        address: info@example.com\n  emailAc2:\n    type: checkly:AlertChannel\n    properties:\n      email:\n        address: info2@example.com\n  # Connect the check group to the alert channels\n  testGroup1Index/checkGroupCheckGroup:\n    type: checkly:CheckGroup\n    properties:\n      alertChannelSubscriptions:\n        - channelId: ${emailAc1.id}\n          activated: true\n        - channelId: ${emailAc2.id}\n          activated: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group are running or not.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings"
                },
                "apiCheckDefaults": {
                    "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults"
                },
                "concurrency": {
                    "type": "integer",
                    "description": "Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.\n",
                    "deprecationMessage": "The property `double_check` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retry_strategy` property instead."
                },
                "environmentVariable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupEnvironmentVariable:CheckGroupEnvironmentVariable"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden. These are only relevant for browser checks. Use global environment variables whenever possible.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the checks.\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check in this group fails and/or recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check group.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "retryStrategy": {
                    "$ref": "#/types/checkly:index/CheckGroupRetryStrategy:CheckGroupRetryStrategy",
                    "description": "A strategy for retrying failed check runs.\n"
                },
                "runParallel": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group should run in all selected locations in parallel or round-robin.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this group.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check group.\n"
                }
            },
            "required": [
                "activated",
                "alertSettings",
                "apiCheckDefaults",
                "concurrency",
                "name",
                "retryStrategy"
            ],
            "inputProperties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group are running or not.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings"
                },
                "apiCheckDefaults": {
                    "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults"
                },
                "concurrency": {
                    "type": "integer",
                    "description": "Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.\n"
                },
                "doubleCheck": {
                    "type": "boolean",
                    "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.\n",
                    "deprecationMessage": "The property `double_check` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retry_strategy` property instead."
                },
                "environmentVariable": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/CheckGroupEnvironmentVariable:CheckGroupEnvironmentVariable"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden. These are only relevant for browser checks. Use global environment variables whenever possible.\n"
                },
                "environmentVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.\n",
                    "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                },
                "localSetupScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.\n"
                },
                "localTeardownScript": {
                    "type": "string",
                    "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more data center locations where to run the checks.\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check in this group fails and/or recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check group.\n"
                },
                "privateLocations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of one or more private locations slugs.\n"
                },
                "retryStrategy": {
                    "$ref": "#/types/checkly:index/CheckGroupRetryStrategy:CheckGroupRetryStrategy",
                    "description": "A strategy for retrying failed check runs.\n"
                },
                "runParallel": {
                    "type": "boolean",
                    "description": "Determines if the checks in the group should run in all selected locations in parallel or round-robin.\n"
                },
                "runtimeId": {
                    "type": "string",
                    "description": "The id of the runtime to use for this group.\n"
                },
                "setupSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for organizing and filtering checks.\n"
                },
                "teardownSnippetId": {
                    "type": "integer",
                    "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check group.\n"
                }
            },
            "requiredInputs": [
                "activated",
                "concurrency"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CheckGroup resources.\n",
                "properties": {
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the checks in the group are running or not.\n"
                    },
                    "alertChannelSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/CheckGroupAlertChannelSubscription:CheckGroupAlertChannelSubscription"
                        }
                    },
                    "alertSettings": {
                        "$ref": "#/types/checkly:index/CheckGroupAlertSettings:CheckGroupAlertSettings"
                    },
                    "apiCheckDefaults": {
                        "$ref": "#/types/checkly:index/CheckGroupApiCheckDefaults:CheckGroupApiCheckDefaults"
                    },
                    "concurrency": {
                        "type": "integer",
                        "description": "Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.\n"
                    },
                    "doubleCheck": {
                        "type": "boolean",
                        "description": "Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.\n",
                        "deprecationMessage": "The property `double_check` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retry_strategy` property instead."
                    },
                    "environmentVariable": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/CheckGroupEnvironmentVariable:CheckGroupEnvironmentVariable"
                        },
                        "description": "Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden. These are only relevant for browser checks. Use global environment variables whenever possible.\n"
                    },
                    "environmentVariables": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.\n",
                        "deprecationMessage": "The property `environment_variables` is deprecated and will be removed in a future version. Consider using the new `environment_variable` list."
                    },
                    "localSetupScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the setup phase of an API check in this group.\n"
                    },
                    "localTeardownScript": {
                        "type": "string",
                        "description": "A valid piece of Node.js code to run in the teardown phase of an API check in this group.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more data center locations where to run the checks.\n"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be sent out when a check in this group fails and/or recovers.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check group.\n"
                    },
                    "privateLocations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of one or more private locations slugs.\n"
                    },
                    "retryStrategy": {
                        "$ref": "#/types/checkly:index/CheckGroupRetryStrategy:CheckGroupRetryStrategy",
                        "description": "A strategy for retrying failed check runs.\n"
                    },
                    "runParallel": {
                        "type": "boolean",
                        "description": "Determines if the checks in the group should run in all selected locations in parallel or round-robin.\n"
                    },
                    "runtimeId": {
                        "type": "string",
                        "description": "The id of the runtime to use for this group.\n"
                    },
                    "setupSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the setup phase of an API check.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for organizing and filtering checks.\n"
                    },
                    "teardownSnippetId": {
                        "type": "integer",
                        "description": "An ID reference to a snippet to use in the teardown phase of an API check.\n"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert settings will be used, not the alert setting defined on this check group.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/dashboard:Dashboard": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst dashboard1 = new checkly.Dashboard(\"dashboard1\", {\n    customDomain: \"status.example.com\",\n    customUrl: \"checkly\",\n    header: \"Public dashboard\",\n    hideTags: false,\n    logo: \"https://www.checklyhq.com/logo.png\",\n    paginate: false,\n    paginationRate: 30,\n    refreshRate: 60,\n    tags: [\"production\"],\n    width: \"FULL\",\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ndashboard1 = checkly.Dashboard(\"dashboard1\",\n    custom_domain=\"status.example.com\",\n    custom_url=\"checkly\",\n    header=\"Public dashboard\",\n    hide_tags=False,\n    logo=\"https://www.checklyhq.com/logo.png\",\n    paginate=False,\n    pagination_rate=30,\n    refresh_rate=60,\n    tags=[\"production\"],\n    width=\"FULL\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dashboard1 = new Checkly.Dashboard(\"dashboard1\", new()\n    {\n        CustomDomain = \"status.example.com\",\n        CustomUrl = \"checkly\",\n        Header = \"Public dashboard\",\n        HideTags = false,\n        Logo = \"https://www.checklyhq.com/logo.png\",\n        Paginate = false,\n        PaginationRate = 30,\n        RefreshRate = 60,\n        Tags = new[]\n        {\n            \"production\",\n        },\n        Width = \"FULL\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewDashboard(ctx, \"dashboard1\", \u0026checkly.DashboardArgs{\n\t\t\tCustomDomain:   pulumi.String(\"status.example.com\"),\n\t\t\tCustomUrl:      pulumi.String(\"checkly\"),\n\t\t\tHeader:         pulumi.String(\"Public dashboard\"),\n\t\t\tHideTags:       pulumi.Bool(false),\n\t\t\tLogo:           pulumi.String(\"https://www.checklyhq.com/logo.png\"),\n\t\t\tPaginate:       pulumi.Bool(false),\n\t\t\tPaginationRate: pulumi.Int(30),\n\t\t\tRefreshRate:    pulumi.Int(60),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t\tWidth: pulumi.String(\"FULL\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.Dashboard;\nimport com.pulumi.checkly.DashboardArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dashboard1 = new Dashboard(\"dashboard1\", DashboardArgs.builder()        \n            .customDomain(\"status.example.com\")\n            .customUrl(\"checkly\")\n            .header(\"Public dashboard\")\n            .hideTags(false)\n            .logo(\"https://www.checklyhq.com/logo.png\")\n            .paginate(false)\n            .paginationRate(30)\n            .refreshRate(60)\n            .tags(\"production\")\n            .width(\"FULL\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dashboard1:\n    type: checkly:Dashboard\n    properties:\n      customDomain: status.example.com\n      customUrl: checkly\n      # Should be updated to a unique value. Otherwise, there will be a 409 conflict error.\n      header: Public dashboard\n      hideTags: false\n      logo: https://www.checklyhq.com/logo.png\n      paginate: false\n      paginationRate: 30\n      refreshRate: 60\n      tags:\n        - production\n      width: FULL\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "checksPerPage": {
                    "type": "integer",
                    "description": "Determines how many checks to show per page.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.\n"
                },
                "customUrl": {
                    "type": "string",
                    "description": "A subdomain name under 'checklyhq.com'. Needs to be unique across all users.\n"
                },
                "description": {
                    "type": "string",
                    "description": "HTML \\n\\n description for the dashboard.\n"
                },
                "favicon": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use as browser favicon.\n"
                },
                "header": {
                    "type": "string",
                    "description": "A piece of text displayed at the top of your dashboard.\n"
                },
                "hideTags": {
                    "type": "boolean",
                    "description": "Show or hide the tags on the dashboard.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "Set your dashboard as private and generate key.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The access key when the dashboard is private.\n",
                    "secret": true
                },
                "link": {
                    "type": "string",
                    "description": "A link to for the dashboard logo.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use for the dashboard logo.\n"
                },
                "paginate": {
                    "type": "boolean",
                    "description": "Determines if pagination is on or off.\n"
                },
                "paginationRate": {
                    "type": "integer",
                    "description": "How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.\n"
                },
                "refreshRate": {
                    "type": "integer",
                    "description": "How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more tags that filter which checks to display on the dashboard.\n"
                },
                "useTagsAndOperator": {
                    "type": "boolean",
                    "description": "Set when to use AND operator for fetching dashboard tags.\n"
                },
                "width": {
                    "type": "string",
                    "description": "Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.\n"
                }
            },
            "required": [
                "customUrl",
                "key"
            ],
            "inputProperties": {
                "checksPerPage": {
                    "type": "integer",
                    "description": "Determines how many checks to show per page.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.\n"
                },
                "customUrl": {
                    "type": "string",
                    "description": "A subdomain name under 'checklyhq.com'. Needs to be unique across all users.\n"
                },
                "description": {
                    "type": "string",
                    "description": "HTML \\n\\n description for the dashboard.\n"
                },
                "favicon": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use as browser favicon.\n"
                },
                "header": {
                    "type": "string",
                    "description": "A piece of text displayed at the top of your dashboard.\n"
                },
                "hideTags": {
                    "type": "boolean",
                    "description": "Show or hide the tags on the dashboard.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "Set your dashboard as private and generate key.\n"
                },
                "link": {
                    "type": "string",
                    "description": "A link to for the dashboard logo.\n"
                },
                "logo": {
                    "type": "string",
                    "description": "A URL pointing to an image file to use for the dashboard logo.\n"
                },
                "paginate": {
                    "type": "boolean",
                    "description": "Determines if pagination is on or off.\n"
                },
                "paginationRate": {
                    "type": "integer",
                    "description": "How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.\n"
                },
                "refreshRate": {
                    "type": "integer",
                    "description": "How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of one or more tags that filter which checks to display on the dashboard.\n"
                },
                "useTagsAndOperator": {
                    "type": "boolean",
                    "description": "Set when to use AND operator for fetching dashboard tags.\n"
                },
                "width": {
                    "type": "string",
                    "description": "Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.\n"
                }
            },
            "requiredInputs": [
                "customUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "checksPerPage": {
                        "type": "integer",
                        "description": "Determines how many checks to show per page.\n"
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.\n"
                    },
                    "customUrl": {
                        "type": "string",
                        "description": "A subdomain name under 'checklyhq.com'. Needs to be unique across all users.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "HTML \\n\\n description for the dashboard.\n"
                    },
                    "favicon": {
                        "type": "string",
                        "description": "A URL pointing to an image file to use as browser favicon.\n"
                    },
                    "header": {
                        "type": "string",
                        "description": "A piece of text displayed at the top of your dashboard.\n"
                    },
                    "hideTags": {
                        "type": "boolean",
                        "description": "Show or hide the tags on the dashboard.\n"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Set your dashboard as private and generate key.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The access key when the dashboard is private.\n",
                        "secret": true
                    },
                    "link": {
                        "type": "string",
                        "description": "A link to for the dashboard logo.\n"
                    },
                    "logo": {
                        "type": "string",
                        "description": "A URL pointing to an image file to use for the dashboard logo.\n"
                    },
                    "paginate": {
                        "type": "boolean",
                        "description": "Determines if pagination is on or off.\n"
                    },
                    "paginationRate": {
                        "type": "integer",
                        "description": "How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.\n"
                    },
                    "refreshRate": {
                        "type": "integer",
                        "description": "How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of one or more tags that filter which checks to display on the dashboard.\n"
                    },
                    "useTagsAndOperator": {
                        "type": "boolean",
                        "description": "Set when to use AND operator for fetching dashboard tags.\n"
                    },
                    "width": {
                        "type": "string",
                        "description": "Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/environmentVariable:EnvironmentVariable": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\n// Simple Enviroment Variable example\nconst variable1 = new checkly.EnvironmentVariable(\"variable1\", {\n    key: \"API_KEY\",\n    locked: true,\n    value: \"loZd9hOGHDUrGvmW\",\n});\nconst variable2 = new checkly.EnvironmentVariable(\"variable2\", {\n    key: \"API_URL\",\n    value: \"http://localhost:3000\",\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\n# Simple Enviroment Variable example\nvariable1 = checkly.EnvironmentVariable(\"variable1\",\n    key=\"API_KEY\",\n    locked=True,\n    value=\"loZd9hOGHDUrGvmW\")\nvariable2 = checkly.EnvironmentVariable(\"variable2\",\n    key=\"API_URL\",\n    value=\"http://localhost:3000\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Simple Enviroment Variable example\n    var variable1 = new Checkly.EnvironmentVariable(\"variable1\", new()\n    {\n        Key = \"API_KEY\",\n        Locked = true,\n        Value = \"loZd9hOGHDUrGvmW\",\n    });\n\n    var variable2 = new Checkly.EnvironmentVariable(\"variable2\", new()\n    {\n        Key = \"API_URL\",\n        Value = \"http://localhost:3000\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewEnvironmentVariable(ctx, \"variable1\", \u0026checkly.EnvironmentVariableArgs{\n\t\t\tKey:    pulumi.String(\"API_KEY\"),\n\t\t\tLocked: pulumi.Bool(true),\n\t\t\tValue:  pulumi.String(\"loZd9hOGHDUrGvmW\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewEnvironmentVariable(ctx, \"variable2\", \u0026checkly.EnvironmentVariableArgs{\n\t\t\tKey:   pulumi.String(\"API_URL\"),\n\t\t\tValue: pulumi.String(\"http://localhost:3000\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.EnvironmentVariable;\nimport com.pulumi.checkly.EnvironmentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var variable1 = new EnvironmentVariable(\"variable1\", EnvironmentVariableArgs.builder()        \n            .key(\"API_KEY\")\n            .locked(true)\n            .value(\"loZd9hOGHDUrGvmW\")\n            .build());\n\n        var variable2 = new EnvironmentVariable(\"variable2\", EnvironmentVariableArgs.builder()        \n            .key(\"API_URL\")\n            .value(\"http://localhost:3000\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Simple Enviroment Variable example\n  variable1:\n    type: checkly:EnvironmentVariable\n    properties:\n      key: API_KEY\n      locked: true\n      value: loZd9hOGHDUrGvmW\n  variable2:\n    type: checkly:EnvironmentVariable\n    properties:\n      key: API_URL\n      value: http://localhost:3000\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "key": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "key",
                "value"
            ],
            "inputProperties": {
                "key": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EnvironmentVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/heartbeat:Heartbeat": {
            "description": "Heartbeats allows you to monitor your cron jobs and set up alerting, so you get a notification when things break or slow down.\n",
            "properties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertChannelSubscription:HeartbeatAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/HeartbeatAlertSettings:HeartbeatAlertSettings"
                },
                "heartbeat": {
                    "$ref": "#/types/checkly:index/HeartbeatHeartbeat:HeartbeatHeartbeat"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags for organizing and filtering checks.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                }
            },
            "required": [
                "activated",
                "alertSettings",
                "heartbeat",
                "name"
            ],
            "inputProperties": {
                "activated": {
                    "type": "boolean",
                    "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                },
                "alertChannelSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertChannelSubscription:HeartbeatAlertChannelSubscription"
                    }
                },
                "alertSettings": {
                    "$ref": "#/types/checkly:index/HeartbeatAlertSettings:HeartbeatAlertSettings"
                },
                "heartbeat": {
                    "$ref": "#/types/checkly:index/HeartbeatHeartbeat:HeartbeatHeartbeat"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the check.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of tags for organizing and filtering checks.\n"
                },
                "useGlobalAlertSettings": {
                    "type": "boolean",
                    "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                }
            },
            "requiredInputs": [
                "activated",
                "heartbeat"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Heartbeat resources.\n",
                "properties": {
                    "activated": {
                        "type": "boolean",
                        "description": "Determines if the check is running or not. Possible values `true`, and `false`.\n"
                    },
                    "alertChannelSubscriptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/checkly:index/HeartbeatAlertChannelSubscription:HeartbeatAlertChannelSubscription"
                        }
                    },
                    "alertSettings": {
                        "$ref": "#/types/checkly:index/HeartbeatAlertSettings:HeartbeatAlertSettings"
                    },
                    "heartbeat": {
                        "$ref": "#/types/checkly:index/HeartbeatHeartbeat:HeartbeatHeartbeat"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Determines if any notifications will be sent out when a check fails/degrades/recovers.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the check.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags for organizing and filtering checks.\n"
                    },
                    "useGlobalAlertSettings": {
                        "type": "boolean",
                        "description": "When true, the account level alert settings will be used, not the alert setting defined on this check.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/maintenanceWindow:MaintenanceWindow": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst maintenance_1 = new checkly.MaintenanceWindow(\"maintenance-1\", {\n    endsAt: \"2014-08-25T00:00:00.000Z\",\n    repeatEndsAt: \"2014-08-24T00:00:00.000Z\",\n    repeatInterval: 1,\n    repeatUnit: \"MONTH\",\n    startsAt: \"2014-08-24T00:00:00.000Z\",\n    tags: [\"production\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\nmaintenance_1 = checkly.MaintenanceWindow(\"maintenance-1\",\n    ends_at=\"2014-08-25T00:00:00.000Z\",\n    repeat_ends_at=\"2014-08-24T00:00:00.000Z\",\n    repeat_interval=1,\n    repeat_unit=\"MONTH\",\n    starts_at=\"2014-08-24T00:00:00.000Z\",\n    tags=[\"production\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var maintenance_1 = new Checkly.MaintenanceWindow(\"maintenance-1\", new()\n    {\n        EndsAt = \"2014-08-25T00:00:00.000Z\",\n        RepeatEndsAt = \"2014-08-24T00:00:00.000Z\",\n        RepeatInterval = 1,\n        RepeatUnit = \"MONTH\",\n        StartsAt = \"2014-08-24T00:00:00.000Z\",\n        Tags = new[]\n        {\n            \"production\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewMaintenanceWindow(ctx, \"maintenance-1\", \u0026checkly.MaintenanceWindowArgs{\n\t\t\tEndsAt:         pulumi.String(\"2014-08-25T00:00:00.000Z\"),\n\t\t\tRepeatEndsAt:   pulumi.String(\"2014-08-24T00:00:00.000Z\"),\n\t\t\tRepeatInterval: pulumi.Int(1),\n\t\t\tRepeatUnit:     pulumi.String(\"MONTH\"),\n\t\t\tStartsAt:       pulumi.String(\"2014-08-24T00:00:00.000Z\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"production\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.MaintenanceWindow;\nimport com.pulumi.checkly.MaintenanceWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var maintenance_1 = new MaintenanceWindow(\"maintenance-1\", MaintenanceWindowArgs.builder()        \n            .endsAt(\"2014-08-25T00:00:00.000Z\")\n            .repeatEndsAt(\"2014-08-24T00:00:00.000Z\")\n            .repeatInterval(1)\n            .repeatUnit(\"MONTH\")\n            .startsAt(\"2014-08-24T00:00:00.000Z\")\n            .tags(\"production\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  maintenance-1:\n    type: checkly:MaintenanceWindow\n    properties:\n      endsAt: 2014-08-25T00:00:00.000Z\n      repeatEndsAt: 2014-08-24T00:00:00.000Z\n      repeatInterval: 1\n      repeatUnit: MONTH\n      startsAt: 2014-08-24T00:00:00.000Z\n      tags:\n        - production\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "endsAt": {
                    "type": "string",
                    "description": "The end date of the maintenance window.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The maintenance window name.\n"
                },
                "repeatEndsAt": {
                    "type": "string",
                    "description": "The date on which the maintenance window should stop repeating.\n"
                },
                "repeatInterval": {
                    "type": "integer",
                    "description": "The repeat interval of the maintenance window from the first occurrence.\n"
                },
                "repeatUnit": {
                    "type": "string",
                    "description": "The repeat cadence for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.\n"
                },
                "startsAt": {
                    "type": "string",
                    "description": "The start date of the maintenance window.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the checks and groups maintenance window should apply to.\n"
                }
            },
            "required": [
                "endsAt",
                "name",
                "startsAt"
            ],
            "inputProperties": {
                "endsAt": {
                    "type": "string",
                    "description": "The end date of the maintenance window.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The maintenance window name.\n"
                },
                "repeatEndsAt": {
                    "type": "string",
                    "description": "The date on which the maintenance window should stop repeating.\n"
                },
                "repeatInterval": {
                    "type": "integer",
                    "description": "The repeat interval of the maintenance window from the first occurrence.\n"
                },
                "repeatUnit": {
                    "type": "string",
                    "description": "The repeat cadence for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.\n"
                },
                "startsAt": {
                    "type": "string",
                    "description": "The start date of the maintenance window.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the checks and groups maintenance window should apply to.\n"
                }
            },
            "requiredInputs": [
                "endsAt",
                "startsAt"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "endsAt": {
                        "type": "string",
                        "description": "The end date of the maintenance window.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The maintenance window name.\n"
                    },
                    "repeatEndsAt": {
                        "type": "string",
                        "description": "The date on which the maintenance window should stop repeating.\n"
                    },
                    "repeatInterval": {
                        "type": "integer",
                        "description": "The repeat interval of the maintenance window from the first occurrence.\n"
                    },
                    "repeatUnit": {
                        "type": "string",
                        "description": "The repeat cadence for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.\n"
                    },
                    "startsAt": {
                        "type": "string",
                        "description": "The start date of the maintenance window.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of the checks and groups maintenance window should apply to.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/privateLocation:PrivateLocation": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst location = new checkly.PrivateLocation(\"location\", {slugName: \"new-private-location\"});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\nlocation = checkly.PrivateLocation(\"location\", slug_name=\"new-private-location\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var location = new Checkly.PrivateLocation(\"location\", new()\n    {\n        SlugName = \"new-private-location\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewPrivateLocation(ctx, \"location\", \u0026checkly.PrivateLocationArgs{\n\t\t\tSlugName: pulumi.String(\"new-private-location\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.PrivateLocation;\nimport com.pulumi.checkly.PrivateLocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var location = new PrivateLocation(\"location\", PrivateLocationArgs.builder()        \n            .slugName(\"new-private-location\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  location:\n    type: checkly:PrivateLocation\n    properties:\n      slugName: new-private-location\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "icon": {
                    "type": "string",
                    "description": "Icon assigned to the private location.\n"
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Private location API keys.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The private location name.\n"
                },
                "slugName": {
                    "type": "string",
                    "description": "Valid slug name.\n"
                }
            },
            "required": [
                "keys",
                "name",
                "slugName"
            ],
            "inputProperties": {
                "icon": {
                    "type": "string",
                    "description": "Icon assigned to the private location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The private location name.\n"
                },
                "slugName": {
                    "type": "string",
                    "description": "Valid slug name.\n"
                }
            },
            "requiredInputs": [
                "slugName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateLocation resources.\n",
                "properties": {
                    "icon": {
                        "type": "string",
                        "description": "Icon assigned to the private location.\n"
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Private location API keys.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The private location name.\n"
                    },
                    "slugName": {
                        "type": "string",
                        "description": "Valid slug name.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/snippet:Snippet": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst example1 = new checkly.Snippet(\"example1\", {script: \"console.log('test');\"});\n// An alternative way to use multi-line script.\nconst example2 = new checkly.Snippet(\"example2\", {script: `    console.log('test1');\n    console.log('test2');\n\n`});\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\nexample1 = checkly.Snippet(\"example1\", script=\"console.log('test');\")\n# An alternative way to use multi-line script.\nexample2 = checkly.Snippet(\"example2\", script=\"\"\"    console.log('test1');\n    console.log('test2');\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = new Checkly.Snippet(\"example1\", new()\n    {\n        Script = \"console.log('test');\",\n    });\n\n    // An alternative way to use multi-line script.\n    var example2 = new Checkly.Snippet(\"example2\", new()\n    {\n        Script = @\"    console.log('test1');\n    console.log('test2');\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := checkly.NewSnippet(ctx, \"example1\", \u0026checkly.SnippetArgs{\n\t\t\tScript: pulumi.String(\"console.log('test');\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = checkly.NewSnippet(ctx, \"example2\", \u0026checkly.SnippetArgs{\n\t\t\tScript: pulumi.String(\"    console.log('test1');\\n    console.log('test2');\\n\\n\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.Snippet;\nimport com.pulumi.checkly.SnippetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example1 = new Snippet(\"example1\", SnippetArgs.builder()        \n            .script(\"console.log('test');\")\n            .build());\n\n        var example2 = new Snippet(\"example2\", SnippetArgs.builder()        \n            .script(\"\"\"\n    console.log('test1');\n    console.log('test2');\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example1:\n    type: checkly:Snippet\n    properties:\n      script: console.log('test');\n  # An alternative way to use multi-line script.\n  example2:\n    type: checkly:Snippet\n    properties:\n      script: |2+\n            console.log('test1');\n            console.log('test2');\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snippet\n"
                },
                "script": {
                    "type": "string",
                    "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.\n"
                }
            },
            "required": [
                "name",
                "script"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the snippet\n"
                },
                "script": {
                    "type": "string",
                    "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.\n"
                }
            },
            "requiredInputs": [
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Snippet resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the snippet\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "Your Node.js code that interacts with the API check lifecycle, or functions as a partial for browser checks.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/triggerCheck:TriggerCheck": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst testTriggerCheck = new checkly.TriggerCheck(\"testTriggerCheck\", {checkId: \"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\"});\nexport const testTriggerCheckUrl = testTriggerCheck.url;\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ntest_trigger_check = checkly.TriggerCheck(\"testTriggerCheck\", check_id=\"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\")\npulumi.export(\"testTriggerCheckUrl\", test_trigger_check.url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testTriggerCheck = new Checkly.TriggerCheck(\"testTriggerCheck\", new()\n    {\n        CheckId = \"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"testTriggerCheckUrl\"] = testTriggerCheck.Url,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestTriggerCheck, err := checkly.NewTriggerCheck(ctx, \"testTriggerCheck\", \u0026checkly.TriggerCheckArgs{\n\t\t\tCheckId: pulumi.String(\"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"testTriggerCheckUrl\", testTriggerCheck.Url)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.TriggerCheck;\nimport com.pulumi.checkly.TriggerCheckArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testTriggerCheck = new TriggerCheck(\"testTriggerCheck\", TriggerCheckArgs.builder()        \n            .checkId(\"c1ff95c5-d7f6-4a90-9ce2-1e605f117592\")\n            .build());\n\n        ctx.export(\"testTriggerCheckUrl\", testTriggerCheck.url());\n    }\n}\n```\n```yaml\nresources:\n  testTriggerCheck:\n    type: checkly:TriggerCheck\n    properties:\n      checkId: c1ff95c5-d7f6-4a90-9ce2-1e605f117592\noutputs:\n  testTriggerCheckUrl: ${testTriggerCheck.url}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "checkId": {
                    "type": "string",
                    "description": "The id of the check that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the check\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the check run.\n"
                }
            },
            "required": [
                "checkId",
                "token",
                "url"
            ],
            "inputProperties": {
                "checkId": {
                    "type": "string",
                    "description": "The id of the check that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the check\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the check run.\n"
                }
            },
            "requiredInputs": [
                "checkId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerCheck resources.\n",
                "properties": {
                    "checkId": {
                        "type": "string",
                        "description": "The id of the check that you want to attach the trigger to.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token value created to trigger the check\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The request URL to trigger the check run.\n"
                    }
                },
                "type": "object"
            }
        },
        "checkly:index/triggerCheckGroup:TriggerCheckGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as checkly from \"@checkly/pulumi\";\n\nconst testTriggerGroup = new checkly.TriggerCheckGroup(\"testTriggerGroup\", {groupId: 215});\nexport const testTriggerGroupUrl = testTriggerGroup.url;\n```\n```python\nimport pulumi\nimport pulumi_checkly as checkly\n\ntest_trigger_group = checkly.TriggerCheckGroup(\"testTriggerGroup\", group_id=215)\npulumi.export(\"testTriggerGroupUrl\", test_trigger_group.url)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Checkly = Pulumi.Checkly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testTriggerGroup = new Checkly.TriggerCheckGroup(\"testTriggerGroup\", new()\n    {\n        GroupId = 215,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"testTriggerGroupUrl\"] = testTriggerGroup.Url,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/checkly/pulumi-checkly/sdk/go/checkly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestTriggerGroup, err := checkly.NewTriggerCheckGroup(ctx, \"testTriggerGroup\", \u0026checkly.TriggerCheckGroupArgs{\n\t\t\tGroupId: pulumi.Int(215),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"testTriggerGroupUrl\", testTriggerGroup.Url)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.checkly.TriggerCheckGroup;\nimport com.pulumi.checkly.TriggerCheckGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testTriggerGroup = new TriggerCheckGroup(\"testTriggerGroup\", TriggerCheckGroupArgs.builder()        \n            .groupId(\"215\")\n            .build());\n\n        ctx.export(\"testTriggerGroupUrl\", testTriggerGroup.url());\n    }\n}\n```\n```yaml\nresources:\n  testTriggerGroup:\n    type: checkly:TriggerCheckGroup\n    properties:\n      groupId: '215'\noutputs:\n  testTriggerGroupUrl: ${testTriggerGroup.url}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the group\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the group run.\n"
                }
            },
            "required": [
                "groupId",
                "token",
                "url"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "integer",
                    "description": "The id of the group that you want to attach the trigger to.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token value created to trigger the group\n"
                },
                "url": {
                    "type": "string",
                    "description": "The request URL to trigger the group run.\n"
                }
            },
            "requiredInputs": [
                "groupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerCheckGroup resources.\n",
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "The id of the group that you want to attach the trigger to.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token value created to trigger the group\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The request URL to trigger the group run.\n"
                    }
                },
                "type": "object"
            }
        }
    }
}