// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TCP checks allow you to monitor remote endpoints at a lower level.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic TCP monitor
//			_, err := checkly.NewTcpMonitor(ctx, "example-tcp-monitor", &checkly.TcpMonitorArgs{
//				Name:                   pulumi.String("Example TCP monitor"),
//				Activated:              pulumi.Bool(true),
//				ShouldFail:             pulumi.Bool(false),
//				Frequency:              pulumi.Int(1),
//				UseGlobalAlertSettings: pulumi.Bool(true),
//				Locations: pulumi.StringArray{
//					pulumi.String("us-west-1"),
//				},
//				Request: &checkly.TcpMonitorRequestArgs{
//					Hostname: pulumi.String("api.checklyhq.com"),
//					Port:     pulumi.Int(80),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// A more complex example using assertions and setting alerts
//			_, err = checkly.NewTcpMonitor(ctx, "example-tcp-monitor-2", &checkly.TcpMonitorArgs{
//				Name:                 pulumi.String("Example TCP monitor 2"),
//				Activated:            pulumi.Bool(true),
//				ShouldFail:           pulumi.Bool(true),
//				Frequency:            pulumi.Int(1),
//				DegradedResponseTime: pulumi.Int(5000),
//				MaxResponseTime:      pulumi.Int(10000),
//				Locations: pulumi.StringArray{
//					pulumi.String("us-west-1"),
//					pulumi.String("ap-northeast-1"),
//					pulumi.String("ap-south-1"),
//				},
//				AlertSettings: &checkly.TcpMonitorAlertSettingsArgs{
//					EscalationType: pulumi.String("RUN_BASED"),
//					RunBasedEscalations: checkly.TcpMonitorAlertSettingsRunBasedEscalationArray{
//						&checkly.TcpMonitorAlertSettingsRunBasedEscalationArgs{
//							FailedRunThreshold: pulumi.Int(1),
//						},
//					},
//					Reminders: checkly.TcpMonitorAlertSettingsReminderArray{
//						&checkly.TcpMonitorAlertSettingsReminderArgs{
//							Amount: pulumi.Int(1),
//						},
//					},
//				},
//				RetryStrategy: &checkly.TcpMonitorRetryStrategyArgs{
//					Type:               pulumi.String("FIXED"),
//					BaseBackoffSeconds: pulumi.Int(60),
//					MaxDurationSeconds: pulumi.Int(600),
//					MaxRetries:         pulumi.Int(3),
//					SameRegion:         pulumi.Bool(false),
//				},
//				Request: &checkly.TcpMonitorRequestArgs{
//					Hostname: pulumi.String("api.checklyhq.com"),
//					Port:     pulumi.Int(80),
//					Data:     pulumi.String("hello"),
//					Assertions: checkly.TcpMonitorRequestAssertionArray{
//						&checkly.TcpMonitorRequestAssertionArgs{
//							Source:     pulumi.String("RESPONSE_DATA"),
//							Property:   pulumi.String(""),
//							Comparison: pulumi.String("CONTAINS"),
//							Target:     pulumi.String("welcome"),
//						},
//						&checkly.TcpMonitorRequestAssertionArgs{
//							Source:     pulumi.String("RESPONSE_TIME"),
//							Property:   pulumi.String(""),
//							Comparison: pulumi.String("LESS_THAN"),
//							Target:     pulumi.String("2000"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TcpMonitor struct {
	pulumi.CustomResourceState

	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolOutput `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions TcpMonitorAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	AlertSettings             TcpMonitorAlertSettingsOutput                 `pulumi:"alertSettings"`
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 5000. (Default `4000`).
	DegradedResponseTime pulumi.IntPtrOutput `pulumi:"degradedResponseTime"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// To create a high frequency check, the property `frequency` must be `0` and `frequencyOffset` can be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrOutput `pulumi:"frequencyOffset"`
	// The id of the check group this check is part of.
	GroupId pulumi.IntPtrOutput `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrOutput `pulumi:"groupOrder"`
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 5000. (Default `5000`).
	MaxResponseTime pulumi.IntPtrOutput `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the check.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayOutput `pulumi:"privateLocations"`
	// The parameters for the TCP connection.
	Request TcpMonitorRequestOutput `pulumi:"request"`
	// A strategy for retrying failed check/monitor runs.
	RetryStrategy TcpMonitorRetryStrategyOutput `pulumi:"retryStrategy"`
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel pulumi.BoolPtrOutput `pulumi:"runParallel"`
	// The ID of the runtime to use for this check.
	RuntimeId pulumi.StringPtrOutput `pulumi:"runtimeId"`
	// Allows to invert the behaviour of when a check is considered to fail.
	ShouldFail pulumi.BoolPtrOutput `pulumi:"shouldFail"`
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident TcpMonitorTriggerIncidentPtrOutput `pulumi:"triggerIncident"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewTcpMonitor registers a new resource with the given unique name, arguments, and options.
func NewTcpMonitor(ctx *pulumi.Context,
	name string, args *TcpMonitorArgs, opts ...pulumi.ResourceOption) (*TcpMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Request == nil {
		return nil, errors.New("invalid value for required argument 'Request'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TcpMonitor
	err := ctx.RegisterResource("checkly:index/tcpMonitor:TcpMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTcpMonitor gets an existing TcpMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTcpMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TcpMonitorState, opts ...pulumi.ResourceOption) (*TcpMonitor, error) {
	var resource TcpMonitor
	err := ctx.ReadResource("checkly:index/tcpMonitor:TcpMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TcpMonitor resources.
type tcpMonitorState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated *bool `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions []TcpMonitorAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *TcpMonitorAlertSettings             `pulumi:"alertSettings"`
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 5000. (Default `4000`).
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency *int `pulumi:"frequency"`
	// To create a high frequency check, the property `frequency` must be `0` and `frequencyOffset` can be `10`, `20` or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// The id of the check group this check is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 5000. (Default `5000`).
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations []string `pulumi:"privateLocations"`
	// The parameters for the TCP connection.
	Request *TcpMonitorRequest `pulumi:"request"`
	// A strategy for retrying failed check/monitor runs.
	RetryStrategy *TcpMonitorRetryStrategy `pulumi:"retryStrategy"`
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel *bool `pulumi:"runParallel"`
	// The ID of the runtime to use for this check.
	RuntimeId *string `pulumi:"runtimeId"`
	// Allows to invert the behaviour of when a check is considered to fail.
	ShouldFail *bool `pulumi:"shouldFail"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident *TcpMonitorTriggerIncident `pulumi:"triggerIncident"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type TcpMonitorState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolPtrInput
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions TcpMonitorAlertChannelSubscriptionArrayInput
	AlertSettings             TcpMonitorAlertSettingsPtrInput
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 5000. (Default `4000`).
	DegradedResponseTime pulumi.IntPtrInput
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntPtrInput
	// To create a high frequency check, the property `frequency` must be `0` and `frequencyOffset` can be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// The id of the check group this check is part of.
	GroupId pulumi.IntPtrInput
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations pulumi.StringArrayInput
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 5000. (Default `5000`).
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayInput
	// The parameters for the TCP connection.
	Request TcpMonitorRequestPtrInput
	// A strategy for retrying failed check/monitor runs.
	RetryStrategy TcpMonitorRetryStrategyPtrInput
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel pulumi.BoolPtrInput
	// The ID of the runtime to use for this check.
	RuntimeId pulumi.StringPtrInput
	// Allows to invert the behaviour of when a check is considered to fail.
	ShouldFail pulumi.BoolPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident TcpMonitorTriggerIncidentPtrInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (TcpMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpMonitorState)(nil)).Elem()
}

type tcpMonitorArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated bool `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions []TcpMonitorAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *TcpMonitorAlertSettings             `pulumi:"alertSettings"`
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 5000. (Default `4000`).
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency int `pulumi:"frequency"`
	// To create a high frequency check, the property `frequency` must be `0` and `frequencyOffset` can be `10`, `20` or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// The id of the check group this check is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 5000. (Default `5000`).
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations []string `pulumi:"privateLocations"`
	// The parameters for the TCP connection.
	Request TcpMonitorRequest `pulumi:"request"`
	// A strategy for retrying failed check/monitor runs.
	RetryStrategy *TcpMonitorRetryStrategy `pulumi:"retryStrategy"`
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel *bool `pulumi:"runParallel"`
	// The ID of the runtime to use for this check.
	RuntimeId *string `pulumi:"runtimeId"`
	// Allows to invert the behaviour of when a check is considered to fail.
	ShouldFail *bool `pulumi:"shouldFail"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident *TcpMonitorTriggerIncident `pulumi:"triggerIncident"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a TcpMonitor resource.
type TcpMonitorArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolInput
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions TcpMonitorAlertChannelSubscriptionArrayInput
	AlertSettings             TcpMonitorAlertSettingsPtrInput
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 5000. (Default `4000`).
	DegradedResponseTime pulumi.IntPtrInput
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntInput
	// To create a high frequency check, the property `frequency` must be `0` and `frequencyOffset` can be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// The id of the check group this check is part of.
	GroupId pulumi.IntPtrInput
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations pulumi.StringArrayInput
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 5000. (Default `5000`).
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayInput
	// The parameters for the TCP connection.
	Request TcpMonitorRequestInput
	// A strategy for retrying failed check/monitor runs.
	RetryStrategy TcpMonitorRetryStrategyPtrInput
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel pulumi.BoolPtrInput
	// The ID of the runtime to use for this check.
	RuntimeId pulumi.StringPtrInput
	// Allows to invert the behaviour of when a check is considered to fail.
	ShouldFail pulumi.BoolPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident TcpMonitorTriggerIncidentPtrInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (TcpMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpMonitorArgs)(nil)).Elem()
}

type TcpMonitorInput interface {
	pulumi.Input

	ToTcpMonitorOutput() TcpMonitorOutput
	ToTcpMonitorOutputWithContext(ctx context.Context) TcpMonitorOutput
}

func (*TcpMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitor)(nil)).Elem()
}

func (i *TcpMonitor) ToTcpMonitorOutput() TcpMonitorOutput {
	return i.ToTcpMonitorOutputWithContext(context.Background())
}

func (i *TcpMonitor) ToTcpMonitorOutputWithContext(ctx context.Context) TcpMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorOutput)
}

// TcpMonitorArrayInput is an input type that accepts TcpMonitorArray and TcpMonitorArrayOutput values.
// You can construct a concrete instance of `TcpMonitorArrayInput` via:
//
//	TcpMonitorArray{ TcpMonitorArgs{...} }
type TcpMonitorArrayInput interface {
	pulumi.Input

	ToTcpMonitorArrayOutput() TcpMonitorArrayOutput
	ToTcpMonitorArrayOutputWithContext(context.Context) TcpMonitorArrayOutput
}

type TcpMonitorArray []TcpMonitorInput

func (TcpMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpMonitor)(nil)).Elem()
}

func (i TcpMonitorArray) ToTcpMonitorArrayOutput() TcpMonitorArrayOutput {
	return i.ToTcpMonitorArrayOutputWithContext(context.Background())
}

func (i TcpMonitorArray) ToTcpMonitorArrayOutputWithContext(ctx context.Context) TcpMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorArrayOutput)
}

// TcpMonitorMapInput is an input type that accepts TcpMonitorMap and TcpMonitorMapOutput values.
// You can construct a concrete instance of `TcpMonitorMapInput` via:
//
//	TcpMonitorMap{ "key": TcpMonitorArgs{...} }
type TcpMonitorMapInput interface {
	pulumi.Input

	ToTcpMonitorMapOutput() TcpMonitorMapOutput
	ToTcpMonitorMapOutputWithContext(context.Context) TcpMonitorMapOutput
}

type TcpMonitorMap map[string]TcpMonitorInput

func (TcpMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpMonitor)(nil)).Elem()
}

func (i TcpMonitorMap) ToTcpMonitorMapOutput() TcpMonitorMapOutput {
	return i.ToTcpMonitorMapOutputWithContext(context.Background())
}

func (i TcpMonitorMap) ToTcpMonitorMapOutputWithContext(ctx context.Context) TcpMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorMapOutput)
}

type TcpMonitorOutput struct{ *pulumi.OutputState }

func (TcpMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitor)(nil)).Elem()
}

func (o TcpMonitorOutput) ToTcpMonitorOutput() TcpMonitorOutput {
	return o
}

func (o TcpMonitorOutput) ToTcpMonitorOutputWithContext(ctx context.Context) TcpMonitorOutput {
	return o
}

// Determines if the check is running or not. Possible values `true`, and `false`.
func (o TcpMonitorOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.BoolOutput { return v.Activated }).(pulumi.BoolOutput)
}

// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
func (o TcpMonitorOutput) AlertChannelSubscriptions() TcpMonitorAlertChannelSubscriptionArrayOutput {
	return o.ApplyT(func(v *TcpMonitor) TcpMonitorAlertChannelSubscriptionArrayOutput { return v.AlertChannelSubscriptions }).(TcpMonitorAlertChannelSubscriptionArrayOutput)
}

func (o TcpMonitorOutput) AlertSettings() TcpMonitorAlertSettingsOutput {
	return o.ApplyT(func(v *TcpMonitor) TcpMonitorAlertSettingsOutput { return v.AlertSettings }).(TcpMonitorAlertSettingsOutput)
}

// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 5000. (Default `4000`).
func (o TcpMonitorOutput) DegradedResponseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.IntPtrOutput { return v.DegradedResponseTime }).(pulumi.IntPtrOutput)
}

// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
func (o TcpMonitorOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// To create a high frequency check, the property `frequency` must be `0` and `frequencyOffset` can be `10`, `20` or `30`.
func (o TcpMonitorOutput) FrequencyOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.IntPtrOutput { return v.FrequencyOffset }).(pulumi.IntPtrOutput)
}

// The id of the check group this check is part of.
func (o TcpMonitorOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
func (o TcpMonitorOutput) GroupOrder() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.IntPtrOutput { return v.GroupOrder }).(pulumi.IntPtrOutput)
}

// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
func (o TcpMonitorOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 5000. (Default `5000`).
func (o TcpMonitorOutput) MaxResponseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.IntPtrOutput { return v.MaxResponseTime }).(pulumi.IntPtrOutput)
}

// Determines if any notifications will be sent out when a check fails/degrades/recovers.
func (o TcpMonitorOutput) Muted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.BoolPtrOutput { return v.Muted }).(pulumi.BoolPtrOutput)
}

// The name of the check.
func (o TcpMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of one or more private locations slugs.
func (o TcpMonitorOutput) PrivateLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.StringArrayOutput { return v.PrivateLocations }).(pulumi.StringArrayOutput)
}

// The parameters for the TCP connection.
func (o TcpMonitorOutput) Request() TcpMonitorRequestOutput {
	return o.ApplyT(func(v *TcpMonitor) TcpMonitorRequestOutput { return v.Request }).(TcpMonitorRequestOutput)
}

// A strategy for retrying failed check/monitor runs.
func (o TcpMonitorOutput) RetryStrategy() TcpMonitorRetryStrategyOutput {
	return o.ApplyT(func(v *TcpMonitor) TcpMonitorRetryStrategyOutput { return v.RetryStrategy }).(TcpMonitorRetryStrategyOutput)
}

// Determines if the check should run in all selected locations in parallel or round-robin.
func (o TcpMonitorOutput) RunParallel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.BoolPtrOutput { return v.RunParallel }).(pulumi.BoolPtrOutput)
}

// The ID of the runtime to use for this check.
func (o TcpMonitorOutput) RuntimeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.StringPtrOutput { return v.RuntimeId }).(pulumi.StringPtrOutput)
}

// Allows to invert the behaviour of when a check is considered to fail.
func (o TcpMonitorOutput) ShouldFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.BoolPtrOutput { return v.ShouldFail }).(pulumi.BoolPtrOutput)
}

// A list of tags for organizing and filtering checks.
func (o TcpMonitorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Create and resolve an incident based on the alert configuration. Useful for status page automation.
func (o TcpMonitorOutput) TriggerIncident() TcpMonitorTriggerIncidentPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) TcpMonitorTriggerIncidentPtrOutput { return v.TriggerIncident }).(TcpMonitorTriggerIncidentPtrOutput)
}

// When true, the account level alert settings will be used, not the alert setting defined on this check.
func (o TcpMonitorOutput) UseGlobalAlertSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpMonitor) pulumi.BoolPtrOutput { return v.UseGlobalAlertSettings }).(pulumi.BoolPtrOutput)
}

type TcpMonitorArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpMonitor)(nil)).Elem()
}

func (o TcpMonitorArrayOutput) ToTcpMonitorArrayOutput() TcpMonitorArrayOutput {
	return o
}

func (o TcpMonitorArrayOutput) ToTcpMonitorArrayOutputWithContext(ctx context.Context) TcpMonitorArrayOutput {
	return o
}

func (o TcpMonitorArrayOutput) Index(i pulumi.IntInput) TcpMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TcpMonitor {
		return vs[0].([]*TcpMonitor)[vs[1].(int)]
	}).(TcpMonitorOutput)
}

type TcpMonitorMapOutput struct{ *pulumi.OutputState }

func (TcpMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpMonitor)(nil)).Elem()
}

func (o TcpMonitorMapOutput) ToTcpMonitorMapOutput() TcpMonitorMapOutput {
	return o
}

func (o TcpMonitorMapOutput) ToTcpMonitorMapOutputWithContext(ctx context.Context) TcpMonitorMapOutput {
	return o
}

func (o TcpMonitorMapOutput) MapIndex(k pulumi.StringInput) TcpMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TcpMonitor {
		return vs[0].(map[string]*TcpMonitor)[vs[1].(string)]
	}).(TcpMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorInput)(nil)).Elem(), &TcpMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorArrayInput)(nil)).Elem(), TcpMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorMapInput)(nil)).Elem(), TcpMonitorMap{})
	pulumi.RegisterOutputType(TcpMonitorOutput{})
	pulumi.RegisterOutputType(TcpMonitorArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorMapOutput{})
}
