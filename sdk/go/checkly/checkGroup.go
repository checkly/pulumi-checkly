// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CheckGroup struct {
	pulumi.CustomResourceState

	Activated                 pulumi.BoolOutput                             `pulumi:"activated"`
	AlertChannelSubscriptions CheckGroupAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	AlertSettings             CheckGroupAlertSettingsOutput                 `pulumi:"alertSettings"`
	ApiCheckDefaults          CheckGroupApiCheckDefaultsOutput              `pulumi:"apiCheckDefaults"`
	Concurrency               pulumi.IntOutput                              `pulumi:"concurrency"`
	DoubleCheck               pulumi.BoolPtrOutput                          `pulumi:"doubleCheck"`
	EnvironmentVariables      pulumi.MapOutput                              `pulumi:"environmentVariables"`
	LocalSetupScript          pulumi.StringPtrOutput                        `pulumi:"localSetupScript"`
	LocalTeardownScript       pulumi.StringPtrOutput                        `pulumi:"localTeardownScript"`
	Locations                 pulumi.StringArrayOutput                      `pulumi:"locations"`
	Muted                     pulumi.BoolPtrOutput                          `pulumi:"muted"`
	Name                      pulumi.StringOutput                           `pulumi:"name"`
	RuntimeId                 pulumi.StringPtrOutput                        `pulumi:"runtimeId"`
	SetupSnippetId            pulumi.IntPtrOutput                           `pulumi:"setupSnippetId"`
	Tags                      pulumi.StringArrayOutput                      `pulumi:"tags"`
	TeardownSnippetId         pulumi.IntPtrOutput                           `pulumi:"teardownSnippetId"`
	UseGlobalAlertSettings    pulumi.BoolPtrOutput                          `pulumi:"useGlobalAlertSettings"`
}

// NewCheckGroup registers a new resource with the given unique name, arguments, and options.
func NewCheckGroup(ctx *pulumi.Context,
	name string, args *CheckGroupArgs, opts ...pulumi.ResourceOption) (*CheckGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Concurrency == nil {
		return nil, errors.New("invalid value for required argument 'Concurrency'")
	}
	if args.Locations == nil {
		return nil, errors.New("invalid value for required argument 'Locations'")
	}
	apiCheckDefaultsApplier := func(v CheckGroupApiCheckDefaults) *CheckGroupApiCheckDefaults { return v.Defaults() }
	if args.ApiCheckDefaults != nil {
		args.ApiCheckDefaults = args.ApiCheckDefaults.ToCheckGroupApiCheckDefaultsPtrOutput().Elem().ApplyT(apiCheckDefaultsApplier).(CheckGroupApiCheckDefaultsPtrOutput)
	}
	var resource CheckGroup
	err := ctx.RegisterResource("checkly:index/checkGroup:CheckGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCheckGroup gets an existing CheckGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCheckGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CheckGroupState, opts ...pulumi.ResourceOption) (*CheckGroup, error) {
	var resource CheckGroup
	err := ctx.ReadResource("checkly:index/checkGroup:CheckGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CheckGroup resources.
type checkGroupState struct {
	Activated                 *bool                                `pulumi:"activated"`
	AlertChannelSubscriptions []CheckGroupAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *CheckGroupAlertSettings             `pulumi:"alertSettings"`
	ApiCheckDefaults          *CheckGroupApiCheckDefaults          `pulumi:"apiCheckDefaults"`
	Concurrency               *int                                 `pulumi:"concurrency"`
	DoubleCheck               *bool                                `pulumi:"doubleCheck"`
	EnvironmentVariables      map[string]interface{}               `pulumi:"environmentVariables"`
	LocalSetupScript          *string                              `pulumi:"localSetupScript"`
	LocalTeardownScript       *string                              `pulumi:"localTeardownScript"`
	Locations                 []string                             `pulumi:"locations"`
	Muted                     *bool                                `pulumi:"muted"`
	Name                      *string                              `pulumi:"name"`
	RuntimeId                 *string                              `pulumi:"runtimeId"`
	SetupSnippetId            *int                                 `pulumi:"setupSnippetId"`
	Tags                      []string                             `pulumi:"tags"`
	TeardownSnippetId         *int                                 `pulumi:"teardownSnippetId"`
	UseGlobalAlertSettings    *bool                                `pulumi:"useGlobalAlertSettings"`
}

type CheckGroupState struct {
	Activated                 pulumi.BoolPtrInput
	AlertChannelSubscriptions CheckGroupAlertChannelSubscriptionArrayInput
	AlertSettings             CheckGroupAlertSettingsPtrInput
	ApiCheckDefaults          CheckGroupApiCheckDefaultsPtrInput
	Concurrency               pulumi.IntPtrInput
	DoubleCheck               pulumi.BoolPtrInput
	EnvironmentVariables      pulumi.MapInput
	LocalSetupScript          pulumi.StringPtrInput
	LocalTeardownScript       pulumi.StringPtrInput
	Locations                 pulumi.StringArrayInput
	Muted                     pulumi.BoolPtrInput
	Name                      pulumi.StringPtrInput
	RuntimeId                 pulumi.StringPtrInput
	SetupSnippetId            pulumi.IntPtrInput
	Tags                      pulumi.StringArrayInput
	TeardownSnippetId         pulumi.IntPtrInput
	UseGlobalAlertSettings    pulumi.BoolPtrInput
}

func (CheckGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*checkGroupState)(nil)).Elem()
}

type checkGroupArgs struct {
	Activated                 bool                                 `pulumi:"activated"`
	AlertChannelSubscriptions []CheckGroupAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *CheckGroupAlertSettings             `pulumi:"alertSettings"`
	ApiCheckDefaults          *CheckGroupApiCheckDefaults          `pulumi:"apiCheckDefaults"`
	Concurrency               int                                  `pulumi:"concurrency"`
	DoubleCheck               *bool                                `pulumi:"doubleCheck"`
	EnvironmentVariables      map[string]interface{}               `pulumi:"environmentVariables"`
	LocalSetupScript          *string                              `pulumi:"localSetupScript"`
	LocalTeardownScript       *string                              `pulumi:"localTeardownScript"`
	Locations                 []string                             `pulumi:"locations"`
	Muted                     *bool                                `pulumi:"muted"`
	Name                      *string                              `pulumi:"name"`
	RuntimeId                 *string                              `pulumi:"runtimeId"`
	SetupSnippetId            *int                                 `pulumi:"setupSnippetId"`
	Tags                      []string                             `pulumi:"tags"`
	TeardownSnippetId         *int                                 `pulumi:"teardownSnippetId"`
	UseGlobalAlertSettings    *bool                                `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a CheckGroup resource.
type CheckGroupArgs struct {
	Activated                 pulumi.BoolInput
	AlertChannelSubscriptions CheckGroupAlertChannelSubscriptionArrayInput
	AlertSettings             CheckGroupAlertSettingsPtrInput
	ApiCheckDefaults          CheckGroupApiCheckDefaultsPtrInput
	Concurrency               pulumi.IntInput
	DoubleCheck               pulumi.BoolPtrInput
	EnvironmentVariables      pulumi.MapInput
	LocalSetupScript          pulumi.StringPtrInput
	LocalTeardownScript       pulumi.StringPtrInput
	Locations                 pulumi.StringArrayInput
	Muted                     pulumi.BoolPtrInput
	Name                      pulumi.StringPtrInput
	RuntimeId                 pulumi.StringPtrInput
	SetupSnippetId            pulumi.IntPtrInput
	Tags                      pulumi.StringArrayInput
	TeardownSnippetId         pulumi.IntPtrInput
	UseGlobalAlertSettings    pulumi.BoolPtrInput
}

func (CheckGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*checkGroupArgs)(nil)).Elem()
}

type CheckGroupInput interface {
	pulumi.Input

	ToCheckGroupOutput() CheckGroupOutput
	ToCheckGroupOutputWithContext(ctx context.Context) CheckGroupOutput
}

func (*CheckGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroup)(nil)).Elem()
}

func (i *CheckGroup) ToCheckGroupOutput() CheckGroupOutput {
	return i.ToCheckGroupOutputWithContext(context.Background())
}

func (i *CheckGroup) ToCheckGroupOutputWithContext(ctx context.Context) CheckGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupOutput)
}

// CheckGroupArrayInput is an input type that accepts CheckGroupArray and CheckGroupArrayOutput values.
// You can construct a concrete instance of `CheckGroupArrayInput` via:
//
//          CheckGroupArray{ CheckGroupArgs{...} }
type CheckGroupArrayInput interface {
	pulumi.Input

	ToCheckGroupArrayOutput() CheckGroupArrayOutput
	ToCheckGroupArrayOutputWithContext(context.Context) CheckGroupArrayOutput
}

type CheckGroupArray []CheckGroupInput

func (CheckGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CheckGroup)(nil)).Elem()
}

func (i CheckGroupArray) ToCheckGroupArrayOutput() CheckGroupArrayOutput {
	return i.ToCheckGroupArrayOutputWithContext(context.Background())
}

func (i CheckGroupArray) ToCheckGroupArrayOutputWithContext(ctx context.Context) CheckGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupArrayOutput)
}

// CheckGroupMapInput is an input type that accepts CheckGroupMap and CheckGroupMapOutput values.
// You can construct a concrete instance of `CheckGroupMapInput` via:
//
//          CheckGroupMap{ "key": CheckGroupArgs{...} }
type CheckGroupMapInput interface {
	pulumi.Input

	ToCheckGroupMapOutput() CheckGroupMapOutput
	ToCheckGroupMapOutputWithContext(context.Context) CheckGroupMapOutput
}

type CheckGroupMap map[string]CheckGroupInput

func (CheckGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CheckGroup)(nil)).Elem()
}

func (i CheckGroupMap) ToCheckGroupMapOutput() CheckGroupMapOutput {
	return i.ToCheckGroupMapOutputWithContext(context.Background())
}

func (i CheckGroupMap) ToCheckGroupMapOutputWithContext(ctx context.Context) CheckGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupMapOutput)
}

type CheckGroupOutput struct{ *pulumi.OutputState }

func (CheckGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroup)(nil)).Elem()
}

func (o CheckGroupOutput) ToCheckGroupOutput() CheckGroupOutput {
	return o
}

func (o CheckGroupOutput) ToCheckGroupOutputWithContext(ctx context.Context) CheckGroupOutput {
	return o
}

type CheckGroupArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CheckGroup)(nil)).Elem()
}

func (o CheckGroupArrayOutput) ToCheckGroupArrayOutput() CheckGroupArrayOutput {
	return o
}

func (o CheckGroupArrayOutput) ToCheckGroupArrayOutputWithContext(ctx context.Context) CheckGroupArrayOutput {
	return o
}

func (o CheckGroupArrayOutput) Index(i pulumi.IntInput) CheckGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CheckGroup {
		return vs[0].([]*CheckGroup)[vs[1].(int)]
	}).(CheckGroupOutput)
}

type CheckGroupMapOutput struct{ *pulumi.OutputState }

func (CheckGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CheckGroup)(nil)).Elem()
}

func (o CheckGroupMapOutput) ToCheckGroupMapOutput() CheckGroupMapOutput {
	return o
}

func (o CheckGroupMapOutput) ToCheckGroupMapOutputWithContext(ctx context.Context) CheckGroupMapOutput {
	return o
}

func (o CheckGroupMapOutput) MapIndex(k pulumi.StringInput) CheckGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CheckGroup {
		return vs[0].(map[string]*CheckGroup)[vs[1].(string)]
	}).(CheckGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupInput)(nil)).Elem(), &CheckGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupArrayInput)(nil)).Elem(), CheckGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupMapInput)(nil)).Elem(), CheckGroupMap{})
	pulumi.RegisterOutputType(CheckGroupOutput{})
	pulumi.RegisterOutputType(CheckGroupArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupMapOutput{})
}
