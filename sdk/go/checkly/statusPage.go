// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Checkly status pages allow you to easily communicate the uptime and health of your applications and services to your customers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			api, err := checkly.NewStatusPageService(ctx, "api", &checkly.StatusPageServiceArgs{
//				Name: pulumi.String("API"),
//			})
//			if err != nil {
//				return err
//			}
//			database, err := checkly.NewStatusPageService(ctx, "database", &checkly.StatusPageServiceArgs{
//				Name: pulumi.String("Database"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = checkly.NewStatusPage(ctx, "example", &checkly.StatusPageArgs{
//				Name:         pulumi.String("Example Application"),
//				Url:          pulumi.String("my-example-status-page"),
//				DefaultTheme: pulumi.String("DARK"),
//				Cards: checkly.StatusPageCardArray{
//					&checkly.StatusPageCardArgs{
//						Name: pulumi.String("Services"),
//						ServiceAttachments: checkly.StatusPageCardServiceAttachmentArray{
//							&checkly.StatusPageCardServiceAttachmentArgs{
//								ServiceId: api.ID(),
//							},
//							&checkly.StatusPageCardServiceAttachmentArgs{
//								ServiceId: database.ID(),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StatusPage struct {
	pulumi.CustomResourceState

	// A list of cards to include on the status page.
	Cards StatusPageCardArrayOutput `pulumi:"cards"`
	// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
	CustomDomain pulumi.StringPtrOutput `pulumi:"customDomain"`
	// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
	DefaultTheme pulumi.StringPtrOutput `pulumi:"defaultTheme"`
	// A URL to an image file to use as the favicon of the status page.
	Favicon pulumi.StringPtrOutput `pulumi:"favicon"`
	// A URL to an image file to use as the logo for the status page.
	Logo pulumi.StringPtrOutput `pulumi:"logo"`
	// The name of the status page.
	Name pulumi.StringOutput `pulumi:"name"`
	// The URL the user should be redirected to when clicking the logo.
	RedirectTo pulumi.StringPtrOutput `pulumi:"redirectTo"`
	// The URL of the status page.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewStatusPage registers a new resource with the given unique name, arguments, and options.
func NewStatusPage(ctx *pulumi.Context,
	name string, args *StatusPageArgs, opts ...pulumi.ResourceOption) (*StatusPage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cards == nil {
		return nil, errors.New("invalid value for required argument 'Cards'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StatusPage
	err := ctx.RegisterResource("checkly:index/statusPage:StatusPage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatusPage gets an existing StatusPage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStatusPage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StatusPageState, opts ...pulumi.ResourceOption) (*StatusPage, error) {
	var resource StatusPage
	err := ctx.ReadResource("checkly:index/statusPage:StatusPage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StatusPage resources.
type statusPageState struct {
	// A list of cards to include on the status page.
	Cards []StatusPageCard `pulumi:"cards"`
	// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
	CustomDomain *string `pulumi:"customDomain"`
	// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
	DefaultTheme *string `pulumi:"defaultTheme"`
	// A URL to an image file to use as the favicon of the status page.
	Favicon *string `pulumi:"favicon"`
	// A URL to an image file to use as the logo for the status page.
	Logo *string `pulumi:"logo"`
	// The name of the status page.
	Name *string `pulumi:"name"`
	// The URL the user should be redirected to when clicking the logo.
	RedirectTo *string `pulumi:"redirectTo"`
	// The URL of the status page.
	Url *string `pulumi:"url"`
}

type StatusPageState struct {
	// A list of cards to include on the status page.
	Cards StatusPageCardArrayInput
	// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
	CustomDomain pulumi.StringPtrInput
	// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
	DefaultTheme pulumi.StringPtrInput
	// A URL to an image file to use as the favicon of the status page.
	Favicon pulumi.StringPtrInput
	// A URL to an image file to use as the logo for the status page.
	Logo pulumi.StringPtrInput
	// The name of the status page.
	Name pulumi.StringPtrInput
	// The URL the user should be redirected to when clicking the logo.
	RedirectTo pulumi.StringPtrInput
	// The URL of the status page.
	Url pulumi.StringPtrInput
}

func (StatusPageState) ElementType() reflect.Type {
	return reflect.TypeOf((*statusPageState)(nil)).Elem()
}

type statusPageArgs struct {
	// A list of cards to include on the status page.
	Cards []StatusPageCard `pulumi:"cards"`
	// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
	CustomDomain *string `pulumi:"customDomain"`
	// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
	DefaultTheme *string `pulumi:"defaultTheme"`
	// A URL to an image file to use as the favicon of the status page.
	Favicon *string `pulumi:"favicon"`
	// A URL to an image file to use as the logo for the status page.
	Logo *string `pulumi:"logo"`
	// The name of the status page.
	Name *string `pulumi:"name"`
	// The URL the user should be redirected to when clicking the logo.
	RedirectTo *string `pulumi:"redirectTo"`
	// The URL of the status page.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a StatusPage resource.
type StatusPageArgs struct {
	// A list of cards to include on the status page.
	Cards StatusPageCardArrayInput
	// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
	CustomDomain pulumi.StringPtrInput
	// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
	DefaultTheme pulumi.StringPtrInput
	// A URL to an image file to use as the favicon of the status page.
	Favicon pulumi.StringPtrInput
	// A URL to an image file to use as the logo for the status page.
	Logo pulumi.StringPtrInput
	// The name of the status page.
	Name pulumi.StringPtrInput
	// The URL the user should be redirected to when clicking the logo.
	RedirectTo pulumi.StringPtrInput
	// The URL of the status page.
	Url pulumi.StringInput
}

func (StatusPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*statusPageArgs)(nil)).Elem()
}

type StatusPageInput interface {
	pulumi.Input

	ToStatusPageOutput() StatusPageOutput
	ToStatusPageOutputWithContext(ctx context.Context) StatusPageOutput
}

func (*StatusPage) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusPage)(nil)).Elem()
}

func (i *StatusPage) ToStatusPageOutput() StatusPageOutput {
	return i.ToStatusPageOutputWithContext(context.Background())
}

func (i *StatusPage) ToStatusPageOutputWithContext(ctx context.Context) StatusPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageOutput)
}

// StatusPageArrayInput is an input type that accepts StatusPageArray and StatusPageArrayOutput values.
// You can construct a concrete instance of `StatusPageArrayInput` via:
//
//	StatusPageArray{ StatusPageArgs{...} }
type StatusPageArrayInput interface {
	pulumi.Input

	ToStatusPageArrayOutput() StatusPageArrayOutput
	ToStatusPageArrayOutputWithContext(context.Context) StatusPageArrayOutput
}

type StatusPageArray []StatusPageInput

func (StatusPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatusPage)(nil)).Elem()
}

func (i StatusPageArray) ToStatusPageArrayOutput() StatusPageArrayOutput {
	return i.ToStatusPageArrayOutputWithContext(context.Background())
}

func (i StatusPageArray) ToStatusPageArrayOutputWithContext(ctx context.Context) StatusPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageArrayOutput)
}

// StatusPageMapInput is an input type that accepts StatusPageMap and StatusPageMapOutput values.
// You can construct a concrete instance of `StatusPageMapInput` via:
//
//	StatusPageMap{ "key": StatusPageArgs{...} }
type StatusPageMapInput interface {
	pulumi.Input

	ToStatusPageMapOutput() StatusPageMapOutput
	ToStatusPageMapOutputWithContext(context.Context) StatusPageMapOutput
}

type StatusPageMap map[string]StatusPageInput

func (StatusPageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatusPage)(nil)).Elem()
}

func (i StatusPageMap) ToStatusPageMapOutput() StatusPageMapOutput {
	return i.ToStatusPageMapOutputWithContext(context.Background())
}

func (i StatusPageMap) ToStatusPageMapOutputWithContext(ctx context.Context) StatusPageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageMapOutput)
}

type StatusPageOutput struct{ *pulumi.OutputState }

func (StatusPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusPage)(nil)).Elem()
}

func (o StatusPageOutput) ToStatusPageOutput() StatusPageOutput {
	return o
}

func (o StatusPageOutput) ToStatusPageOutputWithContext(ctx context.Context) StatusPageOutput {
	return o
}

// A list of cards to include on the status page.
func (o StatusPageOutput) Cards() StatusPageCardArrayOutput {
	return o.ApplyT(func(v *StatusPage) StatusPageCardArrayOutput { return v.Cards }).(StatusPageCardArrayOutput)
}

// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
func (o StatusPageOutput) CustomDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringPtrOutput { return v.CustomDomain }).(pulumi.StringPtrOutput)
}

// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
func (o StatusPageOutput) DefaultTheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringPtrOutput { return v.DefaultTheme }).(pulumi.StringPtrOutput)
}

// A URL to an image file to use as the favicon of the status page.
func (o StatusPageOutput) Favicon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringPtrOutput { return v.Favicon }).(pulumi.StringPtrOutput)
}

// A URL to an image file to use as the logo for the status page.
func (o StatusPageOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringPtrOutput { return v.Logo }).(pulumi.StringPtrOutput)
}

// The name of the status page.
func (o StatusPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The URL the user should be redirected to when clicking the logo.
func (o StatusPageOutput) RedirectTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringPtrOutput { return v.RedirectTo }).(pulumi.StringPtrOutput)
}

// The URL of the status page.
func (o StatusPageOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPage) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type StatusPageArrayOutput struct{ *pulumi.OutputState }

func (StatusPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatusPage)(nil)).Elem()
}

func (o StatusPageArrayOutput) ToStatusPageArrayOutput() StatusPageArrayOutput {
	return o
}

func (o StatusPageArrayOutput) ToStatusPageArrayOutputWithContext(ctx context.Context) StatusPageArrayOutput {
	return o
}

func (o StatusPageArrayOutput) Index(i pulumi.IntInput) StatusPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StatusPage {
		return vs[0].([]*StatusPage)[vs[1].(int)]
	}).(StatusPageOutput)
}

type StatusPageMapOutput struct{ *pulumi.OutputState }

func (StatusPageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatusPage)(nil)).Elem()
}

func (o StatusPageMapOutput) ToStatusPageMapOutput() StatusPageMapOutput {
	return o
}

func (o StatusPageMapOutput) ToStatusPageMapOutputWithContext(ctx context.Context) StatusPageMapOutput {
	return o
}

func (o StatusPageMapOutput) MapIndex(k pulumi.StringInput) StatusPageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StatusPage {
		return vs[0].(map[string]*StatusPage)[vs[1].(string)]
	}).(StatusPageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageInput)(nil)).Elem(), &StatusPage{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageArrayInput)(nil)).Elem(), StatusPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageMapInput)(nil)).Elem(), StatusPageMap{})
	pulumi.RegisterOutputType(StatusPageOutput{})
	pulumi.RegisterOutputType(StatusPageArrayOutput{})
	pulumi.RegisterOutputType(StatusPageMapOutput{})
}
