// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a URL Monitor to check HTTP endpoint availability and response times.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := checkly.NewUrlMonitor(ctx, "example-url-monitor", &checkly.UrlMonitorArgs{
//				Name:                   pulumi.String("Example URL monitor"),
//				Activated:              pulumi.Bool(true),
//				Frequency:              pulumi.Int(2),
//				UseGlobalAlertSettings: pulumi.Bool(true),
//				Locations: pulumi.StringArray{
//					pulumi.String("eu-west-1"),
//				},
//				Request: &checkly.UrlMonitorRequestArgs{
//					Url: pulumi.String("https://welcome.checklyhq.com"),
//					Assertions: checkly.UrlMonitorRequestAssertionArray{
//						&checkly.UrlMonitorRequestAssertionArgs{
//							Source:     pulumi.String("STATUS_CODE"),
//							Comparison: pulumi.String("EQUALS"),
//							Target:     pulumi.String("200"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UrlMonitor struct {
	pulumi.CustomResourceState

	// Determines whether the monitor will run periodically or not after being deployed.
	Activated pulumi.BoolOutput `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
	AlertChannelSubscriptions UrlMonitorAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	// Determines the alert escalation policy for the monitor.
	AlertSettings UrlMonitorAlertSettingsOutput `pulumi:"alertSettings"`
	// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
	DegradedResponseTime pulumi.IntPtrOutput `pulumi:"degradedResponseTime"`
	// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
	FrequencyOffset pulumi.IntPtrOutput `pulumi:"frequencyOffset"`
	// The ID of the check group that this monitor is part of.
	GroupId pulumi.IntPtrOutput `pulumi:"groupId"`
	// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrOutput `pulumi:"groupOrder"`
	// An array of one or more data center locations where to run the this monitor.
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
	MaxResponseTime pulumi.IntPtrOutput `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the monitor.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayOutput `pulumi:"privateLocations"`
	// The parameters of the HTTP request.
	Request UrlMonitorRequestOutput `pulumi:"request"`
	// A strategy for retrying failed monitor runs.
	RetryStrategy UrlMonitorRetryStrategyOutput `pulumi:"retryStrategy"`
	// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
	RunParallel pulumi.BoolPtrOutput `pulumi:"runParallel"`
	// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
	ShouldFail pulumi.BoolPtrOutput `pulumi:"shouldFail"`
	// A list of tags for organizing and filtering checks and monitors.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewUrlMonitor registers a new resource with the given unique name, arguments, and options.
func NewUrlMonitor(ctx *pulumi.Context,
	name string, args *UrlMonitorArgs, opts ...pulumi.ResourceOption) (*UrlMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Request == nil {
		return nil, errors.New("invalid value for required argument 'Request'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UrlMonitor
	err := ctx.RegisterResource("checkly:index/urlMonitor:UrlMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUrlMonitor gets an existing UrlMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUrlMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UrlMonitorState, opts ...pulumi.ResourceOption) (*UrlMonitor, error) {
	var resource UrlMonitor
	err := ctx.ReadResource("checkly:index/urlMonitor:UrlMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UrlMonitor resources.
type urlMonitorState struct {
	// Determines whether the monitor will run periodically or not after being deployed.
	Activated *bool `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
	AlertChannelSubscriptions []UrlMonitorAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	// Determines the alert escalation policy for the monitor.
	AlertSettings *UrlMonitorAlertSettings `pulumi:"alertSettings"`
	// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency *int `pulumi:"frequency"`
	// To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// The ID of the check group that this monitor is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// An array of one or more data center locations where to run the this monitor.
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
	Muted *bool `pulumi:"muted"`
	// The name of the monitor.
	Name *string `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations []string `pulumi:"privateLocations"`
	// The parameters of the HTTP request.
	Request *UrlMonitorRequest `pulumi:"request"`
	// A strategy for retrying failed monitor runs.
	RetryStrategy *UrlMonitorRetryStrategy `pulumi:"retryStrategy"`
	// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
	RunParallel *bool `pulumi:"runParallel"`
	// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
	ShouldFail *bool `pulumi:"shouldFail"`
	// A list of tags for organizing and filtering checks and monitors.
	Tags []string `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type UrlMonitorState struct {
	// Determines whether the monitor will run periodically or not after being deployed.
	Activated pulumi.BoolPtrInput
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
	AlertChannelSubscriptions UrlMonitorAlertChannelSubscriptionArrayInput
	// Determines the alert escalation policy for the monitor.
	AlertSettings UrlMonitorAlertSettingsPtrInput
	// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
	DegradedResponseTime pulumi.IntPtrInput
	// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntPtrInput
	// To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// The ID of the check group that this monitor is part of.
	GroupId pulumi.IntPtrInput
	// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// An array of one or more data center locations where to run the this monitor.
	Locations pulumi.StringArrayInput
	// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
	Muted pulumi.BoolPtrInput
	// The name of the monitor.
	Name pulumi.StringPtrInput
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayInput
	// The parameters of the HTTP request.
	Request UrlMonitorRequestPtrInput
	// A strategy for retrying failed monitor runs.
	RetryStrategy UrlMonitorRetryStrategyPtrInput
	// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
	RunParallel pulumi.BoolPtrInput
	// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
	ShouldFail pulumi.BoolPtrInput
	// A list of tags for organizing and filtering checks and monitors.
	Tags pulumi.StringArrayInput
	// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (UrlMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*urlMonitorState)(nil)).Elem()
}

type urlMonitorArgs struct {
	// Determines whether the monitor will run periodically or not after being deployed.
	Activated bool `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
	AlertChannelSubscriptions []UrlMonitorAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	// Determines the alert escalation policy for the monitor.
	AlertSettings *UrlMonitorAlertSettings `pulumi:"alertSettings"`
	// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency int `pulumi:"frequency"`
	// To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// The ID of the check group that this monitor is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// An array of one or more data center locations where to run the this monitor.
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
	Muted *bool `pulumi:"muted"`
	// The name of the monitor.
	Name *string `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations []string `pulumi:"privateLocations"`
	// The parameters of the HTTP request.
	Request UrlMonitorRequest `pulumi:"request"`
	// A strategy for retrying failed monitor runs.
	RetryStrategy *UrlMonitorRetryStrategy `pulumi:"retryStrategy"`
	// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
	RunParallel *bool `pulumi:"runParallel"`
	// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
	ShouldFail *bool `pulumi:"shouldFail"`
	// A list of tags for organizing and filtering checks and monitors.
	Tags []string `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a UrlMonitor resource.
type UrlMonitorArgs struct {
	// Determines whether the monitor will run periodically or not after being deployed.
	Activated pulumi.BoolInput
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
	AlertChannelSubscriptions UrlMonitorAlertChannelSubscriptionArrayInput
	// Determines the alert escalation policy for the monitor.
	AlertSettings UrlMonitorAlertSettingsPtrInput
	// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
	DegradedResponseTime pulumi.IntPtrInput
	// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntInput
	// To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// The ID of the check group that this monitor is part of.
	GroupId pulumi.IntPtrInput
	// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// An array of one or more data center locations where to run the this monitor.
	Locations pulumi.StringArrayInput
	// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
	Muted pulumi.BoolPtrInput
	// The name of the monitor.
	Name pulumi.StringPtrInput
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayInput
	// The parameters of the HTTP request.
	Request UrlMonitorRequestInput
	// A strategy for retrying failed monitor runs.
	RetryStrategy UrlMonitorRetryStrategyPtrInput
	// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
	RunParallel pulumi.BoolPtrInput
	// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
	ShouldFail pulumi.BoolPtrInput
	// A list of tags for organizing and filtering checks and monitors.
	Tags pulumi.StringArrayInput
	// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (UrlMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*urlMonitorArgs)(nil)).Elem()
}

type UrlMonitorInput interface {
	pulumi.Input

	ToUrlMonitorOutput() UrlMonitorOutput
	ToUrlMonitorOutputWithContext(ctx context.Context) UrlMonitorOutput
}

func (*UrlMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitor)(nil)).Elem()
}

func (i *UrlMonitor) ToUrlMonitorOutput() UrlMonitorOutput {
	return i.ToUrlMonitorOutputWithContext(context.Background())
}

func (i *UrlMonitor) ToUrlMonitorOutputWithContext(ctx context.Context) UrlMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorOutput)
}

// UrlMonitorArrayInput is an input type that accepts UrlMonitorArray and UrlMonitorArrayOutput values.
// You can construct a concrete instance of `UrlMonitorArrayInput` via:
//
//	UrlMonitorArray{ UrlMonitorArgs{...} }
type UrlMonitorArrayInput interface {
	pulumi.Input

	ToUrlMonitorArrayOutput() UrlMonitorArrayOutput
	ToUrlMonitorArrayOutputWithContext(context.Context) UrlMonitorArrayOutput
}

type UrlMonitorArray []UrlMonitorInput

func (UrlMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlMonitor)(nil)).Elem()
}

func (i UrlMonitorArray) ToUrlMonitorArrayOutput() UrlMonitorArrayOutput {
	return i.ToUrlMonitorArrayOutputWithContext(context.Background())
}

func (i UrlMonitorArray) ToUrlMonitorArrayOutputWithContext(ctx context.Context) UrlMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorArrayOutput)
}

// UrlMonitorMapInput is an input type that accepts UrlMonitorMap and UrlMonitorMapOutput values.
// You can construct a concrete instance of `UrlMonitorMapInput` via:
//
//	UrlMonitorMap{ "key": UrlMonitorArgs{...} }
type UrlMonitorMapInput interface {
	pulumi.Input

	ToUrlMonitorMapOutput() UrlMonitorMapOutput
	ToUrlMonitorMapOutputWithContext(context.Context) UrlMonitorMapOutput
}

type UrlMonitorMap map[string]UrlMonitorInput

func (UrlMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlMonitor)(nil)).Elem()
}

func (i UrlMonitorMap) ToUrlMonitorMapOutput() UrlMonitorMapOutput {
	return i.ToUrlMonitorMapOutputWithContext(context.Background())
}

func (i UrlMonitorMap) ToUrlMonitorMapOutputWithContext(ctx context.Context) UrlMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorMapOutput)
}

type UrlMonitorOutput struct{ *pulumi.OutputState }

func (UrlMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitor)(nil)).Elem()
}

func (o UrlMonitorOutput) ToUrlMonitorOutput() UrlMonitorOutput {
	return o
}

func (o UrlMonitorOutput) ToUrlMonitorOutputWithContext(ctx context.Context) UrlMonitorOutput {
	return o
}

// Determines whether the monitor will run periodically or not after being deployed.
func (o UrlMonitorOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.BoolOutput { return v.Activated }).(pulumi.BoolOutput)
}

// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
func (o UrlMonitorOutput) AlertChannelSubscriptions() UrlMonitorAlertChannelSubscriptionArrayOutput {
	return o.ApplyT(func(v *UrlMonitor) UrlMonitorAlertChannelSubscriptionArrayOutput { return v.AlertChannelSubscriptions }).(UrlMonitorAlertChannelSubscriptionArrayOutput)
}

// Determines the alert escalation policy for the monitor.
func (o UrlMonitorOutput) AlertSettings() UrlMonitorAlertSettingsOutput {
	return o.ApplyT(func(v *UrlMonitor) UrlMonitorAlertSettingsOutput { return v.AlertSettings }).(UrlMonitorAlertSettingsOutput)
}

// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
func (o UrlMonitorOutput) DegradedResponseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.IntPtrOutput { return v.DegradedResponseTime }).(pulumi.IntPtrOutput)
}

// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
func (o UrlMonitorOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
func (o UrlMonitorOutput) FrequencyOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.IntPtrOutput { return v.FrequencyOffset }).(pulumi.IntPtrOutput)
}

// The ID of the check group that this monitor is part of.
func (o UrlMonitorOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
func (o UrlMonitorOutput) GroupOrder() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.IntPtrOutput { return v.GroupOrder }).(pulumi.IntPtrOutput)
}

// An array of one or more data center locations where to run the this monitor.
func (o UrlMonitorOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
func (o UrlMonitorOutput) MaxResponseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.IntPtrOutput { return v.MaxResponseTime }).(pulumi.IntPtrOutput)
}

// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
func (o UrlMonitorOutput) Muted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.BoolPtrOutput { return v.Muted }).(pulumi.BoolPtrOutput)
}

// The name of the monitor.
func (o UrlMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of one or more private locations slugs.
func (o UrlMonitorOutput) PrivateLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.StringArrayOutput { return v.PrivateLocations }).(pulumi.StringArrayOutput)
}

// The parameters of the HTTP request.
func (o UrlMonitorOutput) Request() UrlMonitorRequestOutput {
	return o.ApplyT(func(v *UrlMonitor) UrlMonitorRequestOutput { return v.Request }).(UrlMonitorRequestOutput)
}

// A strategy for retrying failed monitor runs.
func (o UrlMonitorOutput) RetryStrategy() UrlMonitorRetryStrategyOutput {
	return o.ApplyT(func(v *UrlMonitor) UrlMonitorRetryStrategyOutput { return v.RetryStrategy }).(UrlMonitorRetryStrategyOutput)
}

// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
func (o UrlMonitorOutput) RunParallel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.BoolPtrOutput { return v.RunParallel }).(pulumi.BoolPtrOutput)
}

// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
func (o UrlMonitorOutput) ShouldFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.BoolPtrOutput { return v.ShouldFail }).(pulumi.BoolPtrOutput)
}

// A list of tags for organizing and filtering checks and monitors.
func (o UrlMonitorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
func (o UrlMonitorOutput) UseGlobalAlertSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitor) pulumi.BoolPtrOutput { return v.UseGlobalAlertSettings }).(pulumi.BoolPtrOutput)
}

type UrlMonitorArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlMonitor)(nil)).Elem()
}

func (o UrlMonitorArrayOutput) ToUrlMonitorArrayOutput() UrlMonitorArrayOutput {
	return o
}

func (o UrlMonitorArrayOutput) ToUrlMonitorArrayOutputWithContext(ctx context.Context) UrlMonitorArrayOutput {
	return o
}

func (o UrlMonitorArrayOutput) Index(i pulumi.IntInput) UrlMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UrlMonitor {
		return vs[0].([]*UrlMonitor)[vs[1].(int)]
	}).(UrlMonitorOutput)
}

type UrlMonitorMapOutput struct{ *pulumi.OutputState }

func (UrlMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlMonitor)(nil)).Elem()
}

func (o UrlMonitorMapOutput) ToUrlMonitorMapOutput() UrlMonitorMapOutput {
	return o
}

func (o UrlMonitorMapOutput) ToUrlMonitorMapOutputWithContext(ctx context.Context) UrlMonitorMapOutput {
	return o
}

func (o UrlMonitorMapOutput) MapIndex(k pulumi.StringInput) UrlMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UrlMonitor {
		return vs[0].(map[string]*UrlMonitor)[vs[1].(string)]
	}).(UrlMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorInput)(nil)).Elem(), &UrlMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorArrayInput)(nil)).Elem(), UrlMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorMapInput)(nil)).Elem(), UrlMonitorMap{})
	pulumi.RegisterOutputType(UrlMonitorOutput{})
	pulumi.RegisterOutputType(UrlMonitorArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorMapOutput{})
}
