// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Checks allows you to monitor key webapp flows, backend API's and set up alerting, so you get a notification when things break or slow down.
type Check struct {
	pulumi.CustomResourceState

	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolOutput `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions CheckAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	AlertSettings             CheckAlertSettingsOutput                 `pulumi:"alertSettings"`
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
	DegradedResponseTime pulumi.IntPtrOutput `pulumi:"degradedResponseTime"`
	// Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
	//
	// Deprecated: The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
	DoubleCheck pulumi.BoolPtrOutput `pulumi:"doubleCheck"`
	// Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
	EnvironmentVariable CheckEnvironmentVariableArrayOutput `pulumi:"environmentVariable"`
	// Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
	//
	// Deprecated: The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
	EnvironmentVariables pulumi.StringMapOutput `pulumi:"environmentVariables"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrOutput `pulumi:"frequencyOffset"`
	// The id of the check group this check is part of.
	GroupId pulumi.IntPtrOutput `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrOutput `pulumi:"groupOrder"`
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript pulumi.StringPtrOutput `pulumi:"localSetupScript"`
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript pulumi.StringPtrOutput `pulumi:"localTeardownScript"`
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
	MaxResponseTime pulumi.IntPtrOutput `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the check.
	Name pulumi.StringOutput `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayOutput `pulumi:"privateLocations"`
	// An API check might have one request config.
	Request CheckRequestPtrOutput `pulumi:"request"`
	// A strategy for retrying failed check runs.
	RetryStrategy CheckRetryStrategyOutput `pulumi:"retryStrategy"`
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel pulumi.BoolPtrOutput `pulumi:"runParallel"`
	// The id of the runtime to use for this check.
	RuntimeId pulumi.StringPtrOutput `pulumi:"runtimeId"`
	// A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
	Script pulumi.StringPtrOutput `pulumi:"script"`
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId pulumi.IntPtrOutput `pulumi:"setupSnippetId"`
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
	ShouldFail pulumi.BoolPtrOutput `pulumi:"shouldFail"`
	// Determines if the SSL certificate should be validated for expiry.
	//
	// Deprecated: The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCheck pulumi.BoolPtrOutput `pulumi:"sslCheck"`
	// A valid fully qualified domain name (FQDN) to check its SSL certificate.
	SslCheckDomain pulumi.StringPtrOutput `pulumi:"sslCheckDomain"`
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId pulumi.IntPtrOutput `pulumi:"teardownSnippetId"`
	// The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
	Type pulumi.StringOutput `pulumi:"type"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewCheck registers a new resource with the given unique name, arguments, and options.
func NewCheck(ctx *pulumi.Context,
	name string, args *CheckArgs, opts ...pulumi.ResourceOption) (*Check, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Check
	err := ctx.RegisterResource("checkly:index/check:Check", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCheck gets an existing Check resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CheckState, opts ...pulumi.ResourceOption) (*Check, error) {
	var resource Check
	err := ctx.ReadResource("checkly:index/check:Check", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Check resources.
type checkState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated *bool `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions []CheckAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *CheckAlertSettings             `pulumi:"alertSettings"`
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
	//
	// Deprecated: The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
	DoubleCheck *bool `pulumi:"doubleCheck"`
	// Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
	EnvironmentVariable []CheckEnvironmentVariable `pulumi:"environmentVariable"`
	// Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
	//
	// Deprecated: The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency *int `pulumi:"frequency"`
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// The id of the check group this check is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript *string `pulumi:"localSetupScript"`
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript *string `pulumi:"localTeardownScript"`
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations []string `pulumi:"privateLocations"`
	// An API check might have one request config.
	Request *CheckRequest `pulumi:"request"`
	// A strategy for retrying failed check runs.
	RetryStrategy *CheckRetryStrategy `pulumi:"retryStrategy"`
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel *bool `pulumi:"runParallel"`
	// The id of the runtime to use for this check.
	RuntimeId *string `pulumi:"runtimeId"`
	// A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
	Script *string `pulumi:"script"`
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId *int `pulumi:"setupSnippetId"`
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
	ShouldFail *bool `pulumi:"shouldFail"`
	// Determines if the SSL certificate should be validated for expiry.
	//
	// Deprecated: The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCheck *bool `pulumi:"sslCheck"`
	// A valid fully qualified domain name (FQDN) to check its SSL certificate.
	SslCheckDomain *string `pulumi:"sslCheckDomain"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId *int `pulumi:"teardownSnippetId"`
	// The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
	Type *string `pulumi:"type"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type CheckState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolPtrInput
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions CheckAlertChannelSubscriptionArrayInput
	AlertSettings             CheckAlertSettingsPtrInput
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
	DegradedResponseTime pulumi.IntPtrInput
	// Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
	//
	// Deprecated: The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
	DoubleCheck pulumi.BoolPtrInput
	// Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
	EnvironmentVariable CheckEnvironmentVariableArrayInput
	// Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
	//
	// Deprecated: The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
	EnvironmentVariables pulumi.StringMapInput
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntPtrInput
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// The id of the check group this check is part of.
	GroupId pulumi.IntPtrInput
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript pulumi.StringPtrInput
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript pulumi.StringPtrInput
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations pulumi.StringArrayInput
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayInput
	// An API check might have one request config.
	Request CheckRequestPtrInput
	// A strategy for retrying failed check runs.
	RetryStrategy CheckRetryStrategyPtrInput
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel pulumi.BoolPtrInput
	// The id of the runtime to use for this check.
	RuntimeId pulumi.StringPtrInput
	// A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
	Script pulumi.StringPtrInput
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId pulumi.IntPtrInput
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
	ShouldFail pulumi.BoolPtrInput
	// Determines if the SSL certificate should be validated for expiry.
	//
	// Deprecated: The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCheck pulumi.BoolPtrInput
	// A valid fully qualified domain name (FQDN) to check its SSL certificate.
	SslCheckDomain pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId pulumi.IntPtrInput
	// The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
	Type pulumi.StringPtrInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (CheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*checkState)(nil)).Elem()
}

type checkArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated bool `pulumi:"activated"`
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions []CheckAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *CheckAlertSettings             `pulumi:"alertSettings"`
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
	//
	// Deprecated: The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
	DoubleCheck *bool `pulumi:"doubleCheck"`
	// Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
	EnvironmentVariable []CheckEnvironmentVariable `pulumi:"environmentVariable"`
	// Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
	//
	// Deprecated: The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency int `pulumi:"frequency"`
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// The id of the check group this check is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript *string `pulumi:"localSetupScript"`
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript *string `pulumi:"localTeardownScript"`
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// An array of one or more private locations slugs.
	PrivateLocations []string `pulumi:"privateLocations"`
	// An API check might have one request config.
	Request *CheckRequest `pulumi:"request"`
	// A strategy for retrying failed check runs.
	RetryStrategy *CheckRetryStrategy `pulumi:"retryStrategy"`
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel *bool `pulumi:"runParallel"`
	// The id of the runtime to use for this check.
	RuntimeId *string `pulumi:"runtimeId"`
	// A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
	Script *string `pulumi:"script"`
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId *int `pulumi:"setupSnippetId"`
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
	ShouldFail *bool `pulumi:"shouldFail"`
	// Determines if the SSL certificate should be validated for expiry.
	//
	// Deprecated: The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCheck *bool `pulumi:"sslCheck"`
	// A valid fully qualified domain name (FQDN) to check its SSL certificate.
	SslCheckDomain *string `pulumi:"sslCheckDomain"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId *int `pulumi:"teardownSnippetId"`
	// The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
	Type string `pulumi:"type"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a Check resource.
type CheckArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolInput
	// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
	AlertChannelSubscriptions CheckAlertChannelSubscriptionArrayInput
	AlertSettings             CheckAlertSettingsPtrInput
	// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
	DegradedResponseTime pulumi.IntPtrInput
	// Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
	//
	// Deprecated: The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
	DoubleCheck pulumi.BoolPtrInput
	// Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
	EnvironmentVariable CheckEnvironmentVariableArrayInput
	// Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
	//
	// Deprecated: The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
	EnvironmentVariables pulumi.StringMapInput
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
	Frequency pulumi.IntInput
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// The id of the check group this check is part of.
	GroupId pulumi.IntPtrInput
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript pulumi.StringPtrInput
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript pulumi.StringPtrInput
	// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
	Locations pulumi.StringArrayInput
	// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// An array of one or more private locations slugs.
	PrivateLocations pulumi.StringArrayInput
	// An API check might have one request config.
	Request CheckRequestPtrInput
	// A strategy for retrying failed check runs.
	RetryStrategy CheckRetryStrategyPtrInput
	// Determines if the check should run in all selected locations in parallel or round-robin.
	RunParallel pulumi.BoolPtrInput
	// The id of the runtime to use for this check.
	RuntimeId pulumi.StringPtrInput
	// A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
	Script pulumi.StringPtrInput
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId pulumi.IntPtrInput
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
	ShouldFail pulumi.BoolPtrInput
	// Determines if the SSL certificate should be validated for expiry.
	//
	// Deprecated: The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCheck pulumi.BoolPtrInput
	// A valid fully qualified domain name (FQDN) to check its SSL certificate.
	SslCheckDomain pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId pulumi.IntPtrInput
	// The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
	Type pulumi.StringInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (CheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*checkArgs)(nil)).Elem()
}

type CheckInput interface {
	pulumi.Input

	ToCheckOutput() CheckOutput
	ToCheckOutputWithContext(ctx context.Context) CheckOutput
}

func (*Check) ElementType() reflect.Type {
	return reflect.TypeOf((**Check)(nil)).Elem()
}

func (i *Check) ToCheckOutput() CheckOutput {
	return i.ToCheckOutputWithContext(context.Background())
}

func (i *Check) ToCheckOutputWithContext(ctx context.Context) CheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckOutput)
}

// CheckArrayInput is an input type that accepts CheckArray and CheckArrayOutput values.
// You can construct a concrete instance of `CheckArrayInput` via:
//
//	CheckArray{ CheckArgs{...} }
type CheckArrayInput interface {
	pulumi.Input

	ToCheckArrayOutput() CheckArrayOutput
	ToCheckArrayOutputWithContext(context.Context) CheckArrayOutput
}

type CheckArray []CheckInput

func (CheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Check)(nil)).Elem()
}

func (i CheckArray) ToCheckArrayOutput() CheckArrayOutput {
	return i.ToCheckArrayOutputWithContext(context.Background())
}

func (i CheckArray) ToCheckArrayOutputWithContext(ctx context.Context) CheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckArrayOutput)
}

// CheckMapInput is an input type that accepts CheckMap and CheckMapOutput values.
// You can construct a concrete instance of `CheckMapInput` via:
//
//	CheckMap{ "key": CheckArgs{...} }
type CheckMapInput interface {
	pulumi.Input

	ToCheckMapOutput() CheckMapOutput
	ToCheckMapOutputWithContext(context.Context) CheckMapOutput
}

type CheckMap map[string]CheckInput

func (CheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Check)(nil)).Elem()
}

func (i CheckMap) ToCheckMapOutput() CheckMapOutput {
	return i.ToCheckMapOutputWithContext(context.Background())
}

func (i CheckMap) ToCheckMapOutputWithContext(ctx context.Context) CheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckMapOutput)
}

type CheckOutput struct{ *pulumi.OutputState }

func (CheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Check)(nil)).Elem()
}

func (o CheckOutput) ToCheckOutput() CheckOutput {
	return o
}

func (o CheckOutput) ToCheckOutputWithContext(ctx context.Context) CheckOutput {
	return o
}

// Determines if the check is running or not. Possible values `true`, and `false`.
func (o CheckOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolOutput { return v.Activated }).(pulumi.BoolOutput)
}

// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
func (o CheckOutput) AlertChannelSubscriptions() CheckAlertChannelSubscriptionArrayOutput {
	return o.ApplyT(func(v *Check) CheckAlertChannelSubscriptionArrayOutput { return v.AlertChannelSubscriptions }).(CheckAlertChannelSubscriptionArrayOutput)
}

func (o CheckOutput) AlertSettings() CheckAlertSettingsOutput {
	return o.ApplyT(func(v *Check) CheckAlertSettingsOutput { return v.AlertSettings }).(CheckAlertSettingsOutput)
}

// The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
func (o CheckOutput) DegradedResponseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.DegradedResponseTime }).(pulumi.IntPtrOutput)
}

// Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed.
//
// Deprecated: The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
func (o CheckOutput) DoubleCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolPtrOutput { return v.DoubleCheck }).(pulumi.BoolPtrOutput)
}

// Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
func (o CheckOutput) EnvironmentVariable() CheckEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v *Check) CheckEnvironmentVariableArrayOutput { return v.EnvironmentVariable }).(CheckEnvironmentVariableArrayOutput)
}

// Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
//
// Deprecated: The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
func (o CheckOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Check) pulumi.StringMapOutput { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
func (o CheckOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *Check) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
func (o CheckOutput) FrequencyOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.FrequencyOffset }).(pulumi.IntPtrOutput)
}

// The id of the check group this check is part of.
func (o CheckOutput) GroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.GroupId }).(pulumi.IntPtrOutput)
}

// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
func (o CheckOutput) GroupOrder() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.GroupOrder }).(pulumi.IntPtrOutput)
}

// A valid piece of Node.js code to run in the setup phase.
func (o CheckOutput) LocalSetupScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.StringPtrOutput { return v.LocalSetupScript }).(pulumi.StringPtrOutput)
}

// A valid piece of Node.js code to run in the teardown phase.
func (o CheckOutput) LocalTeardownScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.StringPtrOutput { return v.LocalTeardownScript }).(pulumi.StringPtrOutput)
}

// An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
func (o CheckOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Check) pulumi.StringArrayOutput { return v.Locations }).(pulumi.StringArrayOutput)
}

// The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
func (o CheckOutput) MaxResponseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.MaxResponseTime }).(pulumi.IntPtrOutput)
}

// Determines if any notifications will be sent out when a check fails/degrades/recovers.
func (o CheckOutput) Muted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolPtrOutput { return v.Muted }).(pulumi.BoolPtrOutput)
}

// The name of the check.
func (o CheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Check) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An array of one or more private locations slugs.
func (o CheckOutput) PrivateLocations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Check) pulumi.StringArrayOutput { return v.PrivateLocations }).(pulumi.StringArrayOutput)
}

// An API check might have one request config.
func (o CheckOutput) Request() CheckRequestPtrOutput {
	return o.ApplyT(func(v *Check) CheckRequestPtrOutput { return v.Request }).(CheckRequestPtrOutput)
}

// A strategy for retrying failed check runs.
func (o CheckOutput) RetryStrategy() CheckRetryStrategyOutput {
	return o.ApplyT(func(v *Check) CheckRetryStrategyOutput { return v.RetryStrategy }).(CheckRetryStrategyOutput)
}

// Determines if the check should run in all selected locations in parallel or round-robin.
func (o CheckOutput) RunParallel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolPtrOutput { return v.RunParallel }).(pulumi.BoolPtrOutput)
}

// The id of the runtime to use for this check.
func (o CheckOutput) RuntimeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.StringPtrOutput { return v.RuntimeId }).(pulumi.StringPtrOutput)
}

// A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
func (o CheckOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.StringPtrOutput { return v.Script }).(pulumi.StringPtrOutput)
}

// An ID reference to a snippet to use in the setup phase of an API check.
func (o CheckOutput) SetupSnippetId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.SetupSnippetId }).(pulumi.IntPtrOutput)
}

// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
func (o CheckOutput) ShouldFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolPtrOutput { return v.ShouldFail }).(pulumi.BoolPtrOutput)
}

// Determines if the SSL certificate should be validated for expiry.
//
// Deprecated: The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o CheckOutput) SslCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolPtrOutput { return v.SslCheck }).(pulumi.BoolPtrOutput)
}

// A valid fully qualified domain name (FQDN) to check its SSL certificate.
func (o CheckOutput) SslCheckDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.StringPtrOutput { return v.SslCheckDomain }).(pulumi.StringPtrOutput)
}

// A list of tags for organizing and filtering checks.
func (o CheckOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Check) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// An ID reference to a snippet to use in the teardown phase of an API check.
func (o CheckOutput) TeardownSnippetId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.IntPtrOutput { return v.TeardownSnippetId }).(pulumi.IntPtrOutput)
}

// The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
func (o CheckOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Check) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// When true, the account level alert settings will be used, not the alert setting defined on this check.
func (o CheckOutput) UseGlobalAlertSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Check) pulumi.BoolPtrOutput { return v.UseGlobalAlertSettings }).(pulumi.BoolPtrOutput)
}

type CheckArrayOutput struct{ *pulumi.OutputState }

func (CheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Check)(nil)).Elem()
}

func (o CheckArrayOutput) ToCheckArrayOutput() CheckArrayOutput {
	return o
}

func (o CheckArrayOutput) ToCheckArrayOutputWithContext(ctx context.Context) CheckArrayOutput {
	return o
}

func (o CheckArrayOutput) Index(i pulumi.IntInput) CheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Check {
		return vs[0].([]*Check)[vs[1].(int)]
	}).(CheckOutput)
}

type CheckMapOutput struct{ *pulumi.OutputState }

func (CheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Check)(nil)).Elem()
}

func (o CheckMapOutput) ToCheckMapOutput() CheckMapOutput {
	return o
}

func (o CheckMapOutput) ToCheckMapOutputWithContext(ctx context.Context) CheckMapOutput {
	return o
}

func (o CheckMapOutput) MapIndex(k pulumi.StringInput) CheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Check {
		return vs[0].(map[string]*Check)[vs[1].(string)]
	}).(CheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckInput)(nil)).Elem(), &Check{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckArrayInput)(nil)).Elem(), CheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckMapInput)(nil)).Elem(), CheckMap{})
	pulumi.RegisterOutputType(CheckOutput{})
	pulumi.RegisterOutputType(CheckArrayOutput{})
	pulumi.RegisterOutputType(CheckMapOutput{})
}
