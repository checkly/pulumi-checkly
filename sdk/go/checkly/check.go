// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Check struct {
	pulumi.CustomResourceState

	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolOutput                        `pulumi:"activated"`
	AlertChannelSubscriptions CheckAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	// . Supported values documented below.
	AlertSettings CheckAlertSettingsOutput `pulumi:"alertSettings"`
	// The response time in milliseconds where a check should be considered degraded. Possible values are between 0 and 30000. Defaults to `15000`.
	DegradedResponseTime pulumi.IntPtrOutput `pulumi:"degradedResponseTime"`
	// Setting this to "true" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. Possible values `true`, and `false`.
	DoubleCheck pulumi.BoolPtrOutput `pulumi:"doubleCheck"`
	// Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.
	EnvironmentVariables pulumi.MapOutput `pulumi:"environmentVariables"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `5`, `10`, `15`, `30`, `60`, `720`, and `1440`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrOutput `pulumi:"frequencyOffset"`
	// . The id of the check group this check is part of.
	GroupId pulumi.IntPtrOutput `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrOutput `pulumi:"groupOrder"`
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript pulumi.StringPtrOutput `pulumi:"localSetupScript"`
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript pulumi.StringPtrOutput `pulumi:"localTeardownScript"`
	// An array of one or more data center locations where to run the this check. Defaults to["us-east-1"].
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// The response time in milliseconds where a check should be considered failing. Possible values are between 0 and 30000. Defaults to `30000`.
	MaxResponseTime pulumi.IntPtrOutput `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails and/or recovers. Possible values `true`, and `false`.
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the check.
	Name pulumi.StringOutput `pulumi:"name"`
	// . An API check might have one request config. Supported values documented below.
	Request CheckRequestPtrOutput `pulumi:"request"`
	// . The id of the runtime to use for this check.
	RuntimeId pulumi.StringPtrOutput `pulumi:"runtimeId"`
	Script    pulumi.StringPtrOutput `pulumi:"script"`
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId pulumi.IntPtrOutput `pulumi:"setupSnippetId"`
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404. Possible values `true`, and `false`.
	ShouldFail pulumi.BoolPtrOutput `pulumi:"shouldFail"`
	// Determines if the SSL certificate should be validated for expiry. Possible values `true`, and `false`.
	SslCheck pulumi.BoolPtrOutput     `pulumi:"sslCheck"`
	Tags     pulumi.StringArrayOutput `pulumi:"tags"`
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId pulumi.IntPtrOutput `pulumi:"teardownSnippetId"`
	// The type of the check. Possible values are `API`, and `BROWSER`.
	Type pulumi.StringOutput `pulumi:"type"`
	// When true, the account level alert setting will be used, not the alert setting defined on this check. Possible values `true`, and `false`.
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewCheck registers a new resource with the given unique name, arguments, and options.
func NewCheck(ctx *pulumi.Context,
	name string, args *CheckArgs, opts ...pulumi.ResourceOption) (*Check, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Frequency == nil {
		return nil, errors.New("invalid value for required argument 'Frequency'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource Check
	err := ctx.RegisterResource("checkly:index/check:Check", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCheck gets an existing Check resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CheckState, opts ...pulumi.ResourceOption) (*Check, error) {
	var resource Check
	err := ctx.ReadResource("checkly:index/check:Check", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Check resources.
type checkState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 *bool                           `pulumi:"activated"`
	AlertChannelSubscriptions []CheckAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	// . Supported values documented below.
	AlertSettings *CheckAlertSettings `pulumi:"alertSettings"`
	// The response time in milliseconds where a check should be considered degraded. Possible values are between 0 and 30000. Defaults to `15000`.
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// Setting this to "true" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. Possible values `true`, and `false`.
	DoubleCheck *bool `pulumi:"doubleCheck"`
	// Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.
	EnvironmentVariables map[string]interface{} `pulumi:"environmentVariables"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `5`, `10`, `15`, `30`, `60`, `720`, and `1440`.
	Frequency *int `pulumi:"frequency"`
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// . The id of the check group this check is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript *string `pulumi:"localSetupScript"`
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript *string `pulumi:"localTeardownScript"`
	// An array of one or more data center locations where to run the this check. Defaults to["us-east-1"].
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds where a check should be considered failing. Possible values are between 0 and 30000. Defaults to `30000`.
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails and/or recovers. Possible values `true`, and `false`.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// . An API check might have one request config. Supported values documented below.
	Request *CheckRequest `pulumi:"request"`
	// . The id of the runtime to use for this check.
	RuntimeId *string `pulumi:"runtimeId"`
	Script    *string `pulumi:"script"`
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId *int `pulumi:"setupSnippetId"`
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404. Possible values `true`, and `false`.
	ShouldFail *bool `pulumi:"shouldFail"`
	// Determines if the SSL certificate should be validated for expiry. Possible values `true`, and `false`.
	SslCheck *bool    `pulumi:"sslCheck"`
	Tags     []string `pulumi:"tags"`
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId *int `pulumi:"teardownSnippetId"`
	// The type of the check. Possible values are `API`, and `BROWSER`.
	Type *string `pulumi:"type"`
	// When true, the account level alert setting will be used, not the alert setting defined on this check. Possible values `true`, and `false`.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type CheckState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolPtrInput
	AlertChannelSubscriptions CheckAlertChannelSubscriptionArrayInput
	// . Supported values documented below.
	AlertSettings CheckAlertSettingsPtrInput
	// The response time in milliseconds where a check should be considered degraded. Possible values are between 0 and 30000. Defaults to `15000`.
	DegradedResponseTime pulumi.IntPtrInput
	// Setting this to "true" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. Possible values `true`, and `false`.
	DoubleCheck pulumi.BoolPtrInput
	// Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.
	EnvironmentVariables pulumi.MapInput
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `5`, `10`, `15`, `30`, `60`, `720`, and `1440`.
	Frequency pulumi.IntPtrInput
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// . The id of the check group this check is part of.
	GroupId pulumi.IntPtrInput
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript pulumi.StringPtrInput
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript pulumi.StringPtrInput
	// An array of one or more data center locations where to run the this check. Defaults to["us-east-1"].
	Locations pulumi.StringArrayInput
	// The response time in milliseconds where a check should be considered failing. Possible values are between 0 and 30000. Defaults to `30000`.
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when a check fails and/or recovers. Possible values `true`, and `false`.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// . An API check might have one request config. Supported values documented below.
	Request CheckRequestPtrInput
	// . The id of the runtime to use for this check.
	RuntimeId pulumi.StringPtrInput
	Script    pulumi.StringPtrInput
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId pulumi.IntPtrInput
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404. Possible values `true`, and `false`.
	ShouldFail pulumi.BoolPtrInput
	// Determines if the SSL certificate should be validated for expiry. Possible values `true`, and `false`.
	SslCheck pulumi.BoolPtrInput
	Tags     pulumi.StringArrayInput
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId pulumi.IntPtrInput
	// The type of the check. Possible values are `API`, and `BROWSER`.
	Type pulumi.StringPtrInput
	// When true, the account level alert setting will be used, not the alert setting defined on this check. Possible values `true`, and `false`.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (CheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*checkState)(nil)).Elem()
}

type checkArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 bool                            `pulumi:"activated"`
	AlertChannelSubscriptions []CheckAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	// . Supported values documented below.
	AlertSettings *CheckAlertSettings `pulumi:"alertSettings"`
	// The response time in milliseconds where a check should be considered degraded. Possible values are between 0 and 30000. Defaults to `15000`.
	DegradedResponseTime *int `pulumi:"degradedResponseTime"`
	// Setting this to "true" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. Possible values `true`, and `false`.
	DoubleCheck *bool `pulumi:"doubleCheck"`
	// Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.
	EnvironmentVariables map[string]interface{} `pulumi:"environmentVariables"`
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `5`, `10`, `15`, `30`, `60`, `720`, and `1440`.
	Frequency int `pulumi:"frequency"`
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset *int `pulumi:"frequencyOffset"`
	// . The id of the check group this check is part of.
	GroupId *int `pulumi:"groupId"`
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder *int `pulumi:"groupOrder"`
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript *string `pulumi:"localSetupScript"`
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript *string `pulumi:"localTeardownScript"`
	// An array of one or more data center locations where to run the this check. Defaults to["us-east-1"].
	Locations []string `pulumi:"locations"`
	// The response time in milliseconds where a check should be considered failing. Possible values are between 0 and 30000. Defaults to `30000`.
	MaxResponseTime *int `pulumi:"maxResponseTime"`
	// Determines if any notifications will be sent out when a check fails and/or recovers. Possible values `true`, and `false`.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// . An API check might have one request config. Supported values documented below.
	Request *CheckRequest `pulumi:"request"`
	// . The id of the runtime to use for this check.
	RuntimeId *string `pulumi:"runtimeId"`
	Script    *string `pulumi:"script"`
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId *int `pulumi:"setupSnippetId"`
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404. Possible values `true`, and `false`.
	ShouldFail *bool `pulumi:"shouldFail"`
	// Determines if the SSL certificate should be validated for expiry. Possible values `true`, and `false`.
	SslCheck *bool    `pulumi:"sslCheck"`
	Tags     []string `pulumi:"tags"`
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId *int `pulumi:"teardownSnippetId"`
	// The type of the check. Possible values are `API`, and `BROWSER`.
	Type string `pulumi:"type"`
	// When true, the account level alert setting will be used, not the alert setting defined on this check. Possible values `true`, and `false`.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a Check resource.
type CheckArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolInput
	AlertChannelSubscriptions CheckAlertChannelSubscriptionArrayInput
	// . Supported values documented below.
	AlertSettings CheckAlertSettingsPtrInput
	// The response time in milliseconds where a check should be considered degraded. Possible values are between 0 and 30000. Defaults to `15000`.
	DegradedResponseTime pulumi.IntPtrInput
	// Setting this to "true" will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. Possible values `true`, and `false`.
	DoubleCheck pulumi.BoolPtrInput
	// Key/value pairs for setting environment variables during check execution. These are only relevant for Browser checks. Use global environment variables whenever possible.
	EnvironmentVariables pulumi.MapInput
	// The frequency in minutes to run the check. Possible values are `0`, `1`, `5`, `10`, `15`, `30`, `60`, `720`, and `1440`.
	Frequency pulumi.IntInput
	// This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
	FrequencyOffset pulumi.IntPtrInput
	// . The id of the check group this check is part of.
	GroupId pulumi.IntPtrInput
	// The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
	GroupOrder pulumi.IntPtrInput
	// A valid piece of Node.js code to run in the setup phase.
	LocalSetupScript pulumi.StringPtrInput
	// A valid piece of Node.js code to run in the teardown phase.
	LocalTeardownScript pulumi.StringPtrInput
	// An array of one or more data center locations where to run the this check. Defaults to["us-east-1"].
	Locations pulumi.StringArrayInput
	// The response time in milliseconds where a check should be considered failing. Possible values are between 0 and 30000. Defaults to `30000`.
	MaxResponseTime pulumi.IntPtrInput
	// Determines if any notifications will be sent out when a check fails and/or recovers. Possible values `true`, and `false`.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// . An API check might have one request config. Supported values documented below.
	Request CheckRequestPtrInput
	// . The id of the runtime to use for this check.
	RuntimeId pulumi.StringPtrInput
	Script    pulumi.StringPtrInput
	// An ID reference to a snippet to use in the setup phase of an API check.
	SetupSnippetId pulumi.IntPtrInput
	// Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404. Possible values `true`, and `false`.
	ShouldFail pulumi.BoolPtrInput
	// Determines if the SSL certificate should be validated for expiry. Possible values `true`, and `false`.
	SslCheck pulumi.BoolPtrInput
	Tags     pulumi.StringArrayInput
	// An ID reference to a snippet to use in the teardown phase of an API check.
	TeardownSnippetId pulumi.IntPtrInput
	// The type of the check. Possible values are `API`, and `BROWSER`.
	Type pulumi.StringInput
	// When true, the account level alert setting will be used, not the alert setting defined on this check. Possible values `true`, and `false`.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (CheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*checkArgs)(nil)).Elem()
}

type CheckInput interface {
	pulumi.Input

	ToCheckOutput() CheckOutput
	ToCheckOutputWithContext(ctx context.Context) CheckOutput
}

func (*Check) ElementType() reflect.Type {
	return reflect.TypeOf((**Check)(nil)).Elem()
}

func (i *Check) ToCheckOutput() CheckOutput {
	return i.ToCheckOutputWithContext(context.Background())
}

func (i *Check) ToCheckOutputWithContext(ctx context.Context) CheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckOutput)
}

// CheckArrayInput is an input type that accepts CheckArray and CheckArrayOutput values.
// You can construct a concrete instance of `CheckArrayInput` via:
//
//          CheckArray{ CheckArgs{...} }
type CheckArrayInput interface {
	pulumi.Input

	ToCheckArrayOutput() CheckArrayOutput
	ToCheckArrayOutputWithContext(context.Context) CheckArrayOutput
}

type CheckArray []CheckInput

func (CheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Check)(nil)).Elem()
}

func (i CheckArray) ToCheckArrayOutput() CheckArrayOutput {
	return i.ToCheckArrayOutputWithContext(context.Background())
}

func (i CheckArray) ToCheckArrayOutputWithContext(ctx context.Context) CheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckArrayOutput)
}

// CheckMapInput is an input type that accepts CheckMap and CheckMapOutput values.
// You can construct a concrete instance of `CheckMapInput` via:
//
//          CheckMap{ "key": CheckArgs{...} }
type CheckMapInput interface {
	pulumi.Input

	ToCheckMapOutput() CheckMapOutput
	ToCheckMapOutputWithContext(context.Context) CheckMapOutput
}

type CheckMap map[string]CheckInput

func (CheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Check)(nil)).Elem()
}

func (i CheckMap) ToCheckMapOutput() CheckMapOutput {
	return i.ToCheckMapOutputWithContext(context.Background())
}

func (i CheckMap) ToCheckMapOutputWithContext(ctx context.Context) CheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckMapOutput)
}

type CheckOutput struct{ *pulumi.OutputState }

func (CheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Check)(nil)).Elem()
}

func (o CheckOutput) ToCheckOutput() CheckOutput {
	return o
}

func (o CheckOutput) ToCheckOutputWithContext(ctx context.Context) CheckOutput {
	return o
}

type CheckArrayOutput struct{ *pulumi.OutputState }

func (CheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Check)(nil)).Elem()
}

func (o CheckArrayOutput) ToCheckArrayOutput() CheckArrayOutput {
	return o
}

func (o CheckArrayOutput) ToCheckArrayOutputWithContext(ctx context.Context) CheckArrayOutput {
	return o
}

func (o CheckArrayOutput) Index(i pulumi.IntInput) CheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Check {
		return vs[0].([]*Check)[vs[1].(int)]
	}).(CheckOutput)
}

type CheckMapOutput struct{ *pulumi.OutputState }

func (CheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Check)(nil)).Elem()
}

func (o CheckMapOutput) ToCheckMapOutput() CheckMapOutput {
	return o
}

func (o CheckMapOutput) ToCheckMapOutputWithContext(ctx context.Context) CheckMapOutput {
	return o
}

func (o CheckMapOutput) MapIndex(k pulumi.StringInput) CheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Check {
		return vs[0].(map[string]*Check)[vs[1].(string)]
	}).(CheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckInput)(nil)).Elem(), &Check{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckArrayInput)(nil)).Elem(), CheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckMapInput)(nil)).Elem(), CheckMap{})
	pulumi.RegisterOutputType(CheckOutput{})
	pulumi.RegisterOutputType(CheckArrayOutput{})
	pulumi.RegisterOutputType(CheckMapOutput{})
}
