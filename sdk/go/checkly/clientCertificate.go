// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use client certificates to authenticate your API checks to APIs that require mutual TLS (mTLS) authentication, or any other authentication scheme where the requester needs to provide a certificate.
//
// Each client certificate is specific to a domain name, e.g. `acme.com` and will be used automatically by any API checks targeting that domain.
//
// Changing the value of any attribute forces a new resource to be created.
type ClientCertificate struct {
	pulumi.CustomResourceState

	// The client certificate in PEM format.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// The host domain that the certificate should be used for.
	Host pulumi.StringOutput `pulumi:"host"`
	// Passphrase for the private key.
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// The private key for the certificate in PEM format.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
	TrustedCa pulumi.StringPtrOutput `pulumi:"trustedCa"`
}

// NewClientCertificate registers a new resource with the given unique name, arguments, and options.
func NewClientCertificate(ctx *pulumi.Context,
	name string, args *ClientCertificateArgs, opts ...pulumi.ResourceOption) (*ClientCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClientCertificate
	err := ctx.RegisterResource("checkly:index/clientCertificate:ClientCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClientCertificate gets an existing ClientCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClientCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClientCertificateState, opts ...pulumi.ResourceOption) (*ClientCertificate, error) {
	var resource ClientCertificate
	err := ctx.ReadResource("checkly:index/clientCertificate:ClientCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClientCertificate resources.
type clientCertificateState struct {
	// The client certificate in PEM format.
	Certificate *string `pulumi:"certificate"`
	// The host domain that the certificate should be used for.
	Host *string `pulumi:"host"`
	// Passphrase for the private key.
	Passphrase *string `pulumi:"passphrase"`
	// The private key for the certificate in PEM format.
	PrivateKey *string `pulumi:"privateKey"`
	// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
	TrustedCa *string `pulumi:"trustedCa"`
}

type ClientCertificateState struct {
	// The client certificate in PEM format.
	Certificate pulumi.StringPtrInput
	// The host domain that the certificate should be used for.
	Host pulumi.StringPtrInput
	// Passphrase for the private key.
	Passphrase pulumi.StringPtrInput
	// The private key for the certificate in PEM format.
	PrivateKey pulumi.StringPtrInput
	// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
	TrustedCa pulumi.StringPtrInput
}

func (ClientCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCertificateState)(nil)).Elem()
}

type clientCertificateArgs struct {
	// The client certificate in PEM format.
	Certificate string `pulumi:"certificate"`
	// The host domain that the certificate should be used for.
	Host string `pulumi:"host"`
	// Passphrase for the private key.
	Passphrase *string `pulumi:"passphrase"`
	// The private key for the certificate in PEM format.
	PrivateKey string `pulumi:"privateKey"`
	// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
	TrustedCa *string `pulumi:"trustedCa"`
}

// The set of arguments for constructing a ClientCertificate resource.
type ClientCertificateArgs struct {
	// The client certificate in PEM format.
	Certificate pulumi.StringInput
	// The host domain that the certificate should be used for.
	Host pulumi.StringInput
	// Passphrase for the private key.
	Passphrase pulumi.StringPtrInput
	// The private key for the certificate in PEM format.
	PrivateKey pulumi.StringInput
	// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
	TrustedCa pulumi.StringPtrInput
}

func (ClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clientCertificateArgs)(nil)).Elem()
}

type ClientCertificateInput interface {
	pulumi.Input

	ToClientCertificateOutput() ClientCertificateOutput
	ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput
}

func (*ClientCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificate)(nil)).Elem()
}

func (i *ClientCertificate) ToClientCertificateOutput() ClientCertificateOutput {
	return i.ToClientCertificateOutputWithContext(context.Background())
}

func (i *ClientCertificate) ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateOutput)
}

// ClientCertificateArrayInput is an input type that accepts ClientCertificateArray and ClientCertificateArrayOutput values.
// You can construct a concrete instance of `ClientCertificateArrayInput` via:
//
//	ClientCertificateArray{ ClientCertificateArgs{...} }
type ClientCertificateArrayInput interface {
	pulumi.Input

	ToClientCertificateArrayOutput() ClientCertificateArrayOutput
	ToClientCertificateArrayOutputWithContext(context.Context) ClientCertificateArrayOutput
}

type ClientCertificateArray []ClientCertificateInput

func (ClientCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientCertificate)(nil)).Elem()
}

func (i ClientCertificateArray) ToClientCertificateArrayOutput() ClientCertificateArrayOutput {
	return i.ToClientCertificateArrayOutputWithContext(context.Background())
}

func (i ClientCertificateArray) ToClientCertificateArrayOutputWithContext(ctx context.Context) ClientCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateArrayOutput)
}

// ClientCertificateMapInput is an input type that accepts ClientCertificateMap and ClientCertificateMapOutput values.
// You can construct a concrete instance of `ClientCertificateMapInput` via:
//
//	ClientCertificateMap{ "key": ClientCertificateArgs{...} }
type ClientCertificateMapInput interface {
	pulumi.Input

	ToClientCertificateMapOutput() ClientCertificateMapOutput
	ToClientCertificateMapOutputWithContext(context.Context) ClientCertificateMapOutput
}

type ClientCertificateMap map[string]ClientCertificateInput

func (ClientCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientCertificate)(nil)).Elem()
}

func (i ClientCertificateMap) ToClientCertificateMapOutput() ClientCertificateMapOutput {
	return i.ToClientCertificateMapOutputWithContext(context.Background())
}

func (i ClientCertificateMap) ToClientCertificateMapOutputWithContext(ctx context.Context) ClientCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientCertificateMapOutput)
}

type ClientCertificateOutput struct{ *pulumi.OutputState }

func (ClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateOutput) ToClientCertificateOutput() ClientCertificateOutput {
	return o
}

func (o ClientCertificateOutput) ToClientCertificateOutputWithContext(ctx context.Context) ClientCertificateOutput {
	return o
}

// The client certificate in PEM format.
func (o ClientCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// The host domain that the certificate should be used for.
func (o ClientCertificateOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Passphrase for the private key.
func (o ClientCertificateOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringPtrOutput { return v.Passphrase }).(pulumi.StringPtrOutput)
}

// The private key for the certificate in PEM format.
func (o ClientCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
func (o ClientCertificateOutput) TrustedCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCertificate) pulumi.StringPtrOutput { return v.TrustedCa }).(pulumi.StringPtrOutput)
}

type ClientCertificateArrayOutput struct{ *pulumi.OutputState }

func (ClientCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateArrayOutput) ToClientCertificateArrayOutput() ClientCertificateArrayOutput {
	return o
}

func (o ClientCertificateArrayOutput) ToClientCertificateArrayOutputWithContext(ctx context.Context) ClientCertificateArrayOutput {
	return o
}

func (o ClientCertificateArrayOutput) Index(i pulumi.IntInput) ClientCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClientCertificate {
		return vs[0].([]*ClientCertificate)[vs[1].(int)]
	}).(ClientCertificateOutput)
}

type ClientCertificateMapOutput struct{ *pulumi.OutputState }

func (ClientCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClientCertificate)(nil)).Elem()
}

func (o ClientCertificateMapOutput) ToClientCertificateMapOutput() ClientCertificateMapOutput {
	return o
}

func (o ClientCertificateMapOutput) ToClientCertificateMapOutputWithContext(ctx context.Context) ClientCertificateMapOutput {
	return o
}

func (o ClientCertificateMapOutput) MapIndex(k pulumi.StringInput) ClientCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClientCertificate {
		return vs[0].(map[string]*ClientCertificate)[vs[1].(string)]
	}).(ClientCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateInput)(nil)).Elem(), &ClientCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateArrayInput)(nil)).Elem(), ClientCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClientCertificateMapInput)(nil)).Elem(), ClientCertificateMap{})
	pulumi.RegisterOutputType(ClientCertificateOutput{})
	pulumi.RegisterOutputType(ClientCertificateArrayOutput{})
	pulumi.RegisterOutputType(ClientCertificateMapOutput{})
}
