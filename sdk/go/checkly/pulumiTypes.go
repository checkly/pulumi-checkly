// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CheckAlertChannelSubscription struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// CheckAlertChannelSubscriptionInput is an input type that accepts CheckAlertChannelSubscriptionArgs and CheckAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `CheckAlertChannelSubscriptionInput` via:
//
//          CheckAlertChannelSubscriptionArgs{...}
type CheckAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToCheckAlertChannelSubscriptionOutput() CheckAlertChannelSubscriptionOutput
	ToCheckAlertChannelSubscriptionOutputWithContext(context.Context) CheckAlertChannelSubscriptionOutput
}

type CheckAlertChannelSubscriptionArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (CheckAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertChannelSubscription)(nil)).Elem()
}

func (i CheckAlertChannelSubscriptionArgs) ToCheckAlertChannelSubscriptionOutput() CheckAlertChannelSubscriptionOutput {
	return i.ToCheckAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i CheckAlertChannelSubscriptionArgs) ToCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertChannelSubscriptionOutput)
}

// CheckAlertChannelSubscriptionArrayInput is an input type that accepts CheckAlertChannelSubscriptionArray and CheckAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `CheckAlertChannelSubscriptionArrayInput` via:
//
//          CheckAlertChannelSubscriptionArray{ CheckAlertChannelSubscriptionArgs{...} }
type CheckAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToCheckAlertChannelSubscriptionArrayOutput() CheckAlertChannelSubscriptionArrayOutput
	ToCheckAlertChannelSubscriptionArrayOutputWithContext(context.Context) CheckAlertChannelSubscriptionArrayOutput
}

type CheckAlertChannelSubscriptionArray []CheckAlertChannelSubscriptionInput

func (CheckAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertChannelSubscription)(nil)).Elem()
}

func (i CheckAlertChannelSubscriptionArray) ToCheckAlertChannelSubscriptionArrayOutput() CheckAlertChannelSubscriptionArrayOutput {
	return i.ToCheckAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i CheckAlertChannelSubscriptionArray) ToCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertChannelSubscriptionArrayOutput)
}

type CheckAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (CheckAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertChannelSubscription)(nil)).Elem()
}

func (o CheckAlertChannelSubscriptionOutput) ToCheckAlertChannelSubscriptionOutput() CheckAlertChannelSubscriptionOutput {
	return o
}

func (o CheckAlertChannelSubscriptionOutput) ToCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionOutput {
	return o
}

// Determines if the check is running or not. Possible values `true`, and `false`.
func (o CheckAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v CheckAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o CheckAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v CheckAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type CheckAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertChannelSubscription)(nil)).Elem()
}

func (o CheckAlertChannelSubscriptionArrayOutput) ToCheckAlertChannelSubscriptionArrayOutput() CheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o CheckAlertChannelSubscriptionArrayOutput) ToCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o CheckAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) CheckAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertChannelSubscription {
		return vs[0].([]CheckAlertChannelSubscription)[vs[1].(int)]
	}).(CheckAlertChannelSubscriptionOutput)
}

type CheckAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType *string `pulumi:"escalationType"`
	// . Possible arguments:
	Reminders []CheckAlertSettingsReminder `pulumi:"reminders"`
	// . Possible arguments:
	RunBasedEscalations []CheckAlertSettingsRunBasedEscalation `pulumi:"runBasedEscalations"`
	// At what interval the reminders should be send.  Possible arguments:
	SslCertificates []CheckAlertSettingsSslCertificate `pulumi:"sslCertificates"`
	// . Possible arguments:
	TimeBasedEscalations []CheckAlertSettingsTimeBasedEscalation `pulumi:"timeBasedEscalations"`
}

// CheckAlertSettingsInput is an input type that accepts CheckAlertSettingsArgs and CheckAlertSettingsOutput values.
// You can construct a concrete instance of `CheckAlertSettingsInput` via:
//
//          CheckAlertSettingsArgs{...}
type CheckAlertSettingsInput interface {
	pulumi.Input

	ToCheckAlertSettingsOutput() CheckAlertSettingsOutput
	ToCheckAlertSettingsOutputWithContext(context.Context) CheckAlertSettingsOutput
}

type CheckAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType pulumi.StringPtrInput `pulumi:"escalationType"`
	// . Possible arguments:
	Reminders CheckAlertSettingsReminderArrayInput `pulumi:"reminders"`
	// . Possible arguments:
	RunBasedEscalations CheckAlertSettingsRunBasedEscalationArrayInput `pulumi:"runBasedEscalations"`
	// At what interval the reminders should be send.  Possible arguments:
	SslCertificates CheckAlertSettingsSslCertificateArrayInput `pulumi:"sslCertificates"`
	// . Possible arguments:
	TimeBasedEscalations CheckAlertSettingsTimeBasedEscalationArrayInput `pulumi:"timeBasedEscalations"`
}

func (CheckAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettings)(nil)).Elem()
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsOutput() CheckAlertSettingsOutput {
	return i.ToCheckAlertSettingsOutputWithContext(context.Background())
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsOutputWithContext(ctx context.Context) CheckAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsOutput)
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return i.ToCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsOutput).ToCheckAlertSettingsPtrOutputWithContext(ctx)
}

// CheckAlertSettingsPtrInput is an input type that accepts CheckAlertSettingsArgs, CheckAlertSettingsPtr and CheckAlertSettingsPtrOutput values.
// You can construct a concrete instance of `CheckAlertSettingsPtrInput` via:
//
//          CheckAlertSettingsArgs{...}
//
//  or:
//
//          nil
type CheckAlertSettingsPtrInput interface {
	pulumi.Input

	ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput
	ToCheckAlertSettingsPtrOutputWithContext(context.Context) CheckAlertSettingsPtrOutput
}

type checkAlertSettingsPtrType CheckAlertSettingsArgs

func CheckAlertSettingsPtr(v *CheckAlertSettingsArgs) CheckAlertSettingsPtrInput {
	return (*checkAlertSettingsPtrType)(v)
}

func (*checkAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckAlertSettings)(nil)).Elem()
}

func (i *checkAlertSettingsPtrType) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return i.ToCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *checkAlertSettingsPtrType) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsPtrOutput)
}

type CheckAlertSettingsOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettings)(nil)).Elem()
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsOutput() CheckAlertSettingsOutput {
	return o
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsOutputWithContext(ctx context.Context) CheckAlertSettingsOutput {
	return o
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return o.ToCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckAlertSettings) *CheckAlertSettings {
		return &v
	}).(CheckAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o CheckAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

// . Possible arguments:
func (o CheckAlertSettingsOutput) Reminders() CheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsReminder { return v.Reminders }).(CheckAlertSettingsReminderArrayOutput)
}

// . Possible arguments:
func (o CheckAlertSettingsOutput) RunBasedEscalations() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsRunBasedEscalation { return v.RunBasedEscalations }).(CheckAlertSettingsRunBasedEscalationArrayOutput)
}

// At what interval the reminders should be send.  Possible arguments:
func (o CheckAlertSettingsOutput) SslCertificates() CheckAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsSslCertificate { return v.SslCertificates }).(CheckAlertSettingsSslCertificateArrayOutput)
}

// . Possible arguments:
func (o CheckAlertSettingsOutput) TimeBasedEscalations() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsTimeBasedEscalation { return v.TimeBasedEscalations }).(CheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckAlertSettings)(nil)).Elem()
}

func (o CheckAlertSettingsPtrOutput) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return o
}

func (o CheckAlertSettingsPtrOutput) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return o
}

func (o CheckAlertSettingsPtrOutput) Elem() CheckAlertSettingsOutput {
	return o.ApplyT(func(v *CheckAlertSettings) CheckAlertSettings {
		if v != nil {
			return *v
		}
		var ret CheckAlertSettings
		return ret
	}).(CheckAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o CheckAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

// . Possible arguments:
func (o CheckAlertSettingsPtrOutput) Reminders() CheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(CheckAlertSettingsReminderArrayOutput)
}

// . Possible arguments:
func (o CheckAlertSettingsPtrOutput) RunBasedEscalations() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(CheckAlertSettingsRunBasedEscalationArrayOutput)
}

// At what interval the reminders should be send.  Possible arguments:
func (o CheckAlertSettingsPtrOutput) SslCertificates() CheckAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsSslCertificate {
		if v == nil {
			return nil
		}
		return v.SslCertificates
	}).(CheckAlertSettingsSslCertificateArrayOutput)
}

// . Possible arguments:
func (o CheckAlertSettingsPtrOutput) TimeBasedEscalations() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(CheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// . Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
	Interval *int `pulumi:"interval"`
}

// CheckAlertSettingsReminderInput is an input type that accepts CheckAlertSettingsReminderArgs and CheckAlertSettingsReminderOutput values.
// You can construct a concrete instance of `CheckAlertSettingsReminderInput` via:
//
//          CheckAlertSettingsReminderArgs{...}
type CheckAlertSettingsReminderInput interface {
	pulumi.Input

	ToCheckAlertSettingsReminderOutput() CheckAlertSettingsReminderOutput
	ToCheckAlertSettingsReminderOutputWithContext(context.Context) CheckAlertSettingsReminderOutput
}

type CheckAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// . Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (CheckAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsReminder)(nil)).Elem()
}

func (i CheckAlertSettingsReminderArgs) ToCheckAlertSettingsReminderOutput() CheckAlertSettingsReminderOutput {
	return i.ToCheckAlertSettingsReminderOutputWithContext(context.Background())
}

func (i CheckAlertSettingsReminderArgs) ToCheckAlertSettingsReminderOutputWithContext(ctx context.Context) CheckAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsReminderOutput)
}

// CheckAlertSettingsReminderArrayInput is an input type that accepts CheckAlertSettingsReminderArray and CheckAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsReminderArrayInput` via:
//
//          CheckAlertSettingsReminderArray{ CheckAlertSettingsReminderArgs{...} }
type CheckAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsReminderArrayOutput() CheckAlertSettingsReminderArrayOutput
	ToCheckAlertSettingsReminderArrayOutputWithContext(context.Context) CheckAlertSettingsReminderArrayOutput
}

type CheckAlertSettingsReminderArray []CheckAlertSettingsReminderInput

func (CheckAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsReminder)(nil)).Elem()
}

func (i CheckAlertSettingsReminderArray) ToCheckAlertSettingsReminderArrayOutput() CheckAlertSettingsReminderArrayOutput {
	return i.ToCheckAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsReminderArray) ToCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) CheckAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsReminderArrayOutput)
}

type CheckAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsReminder)(nil)).Elem()
}

func (o CheckAlertSettingsReminderOutput) ToCheckAlertSettingsReminderOutput() CheckAlertSettingsReminderOutput {
	return o
}

func (o CheckAlertSettingsReminderOutput) ToCheckAlertSettingsReminderOutputWithContext(ctx context.Context) CheckAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o CheckAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// . Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
func (o CheckAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsReminder)(nil)).Elem()
}

func (o CheckAlertSettingsReminderArrayOutput) ToCheckAlertSettingsReminderArrayOutput() CheckAlertSettingsReminderArrayOutput {
	return o
}

func (o CheckAlertSettingsReminderArrayOutput) ToCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) CheckAlertSettingsReminderArrayOutput {
	return o
}

func (o CheckAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsReminder {
		return vs[0].([]CheckAlertSettingsReminder)[vs[1].(int)]
	}).(CheckAlertSettingsReminderOutput)
}

type CheckAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be send. Possible values are between 1 and 5. Defaults to `1`.
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// CheckAlertSettingsRunBasedEscalationInput is an input type that accepts CheckAlertSettingsRunBasedEscalationArgs and CheckAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `CheckAlertSettingsRunBasedEscalationInput` via:
//
//          CheckAlertSettingsRunBasedEscalationArgs{...}
type CheckAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToCheckAlertSettingsRunBasedEscalationOutput() CheckAlertSettingsRunBasedEscalationOutput
	ToCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Context) CheckAlertSettingsRunBasedEscalationOutput
}

type CheckAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be send. Possible values are between 1 and 5. Defaults to `1`.
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (CheckAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsRunBasedEscalationArgs) ToCheckAlertSettingsRunBasedEscalationOutput() CheckAlertSettingsRunBasedEscalationOutput {
	return i.ToCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i CheckAlertSettingsRunBasedEscalationArgs) ToCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsRunBasedEscalationOutput)
}

// CheckAlertSettingsRunBasedEscalationArrayInput is an input type that accepts CheckAlertSettingsRunBasedEscalationArray and CheckAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsRunBasedEscalationArrayInput` via:
//
//          CheckAlertSettingsRunBasedEscalationArray{ CheckAlertSettingsRunBasedEscalationArgs{...} }
type CheckAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsRunBasedEscalationArrayOutput() CheckAlertSettingsRunBasedEscalationArrayOutput
	ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) CheckAlertSettingsRunBasedEscalationArrayOutput
}

type CheckAlertSettingsRunBasedEscalationArray []CheckAlertSettingsRunBasedEscalationInput

func (CheckAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsRunBasedEscalationArray) ToCheckAlertSettingsRunBasedEscalationArrayOutput() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsRunBasedEscalationArray) ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsRunBasedEscalationArrayOutput)
}

type CheckAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsRunBasedEscalationOutput) ToCheckAlertSettingsRunBasedEscalationOutput() CheckAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o CheckAlertSettingsRunBasedEscalationOutput) ToCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be send. Possible values are between 1 and 5. Defaults to `1`.
func (o CheckAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsRunBasedEscalationArrayOutput) ToCheckAlertSettingsRunBasedEscalationArrayOutput() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsRunBasedEscalationArrayOutput) ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsRunBasedEscalation {
		return vs[0].([]CheckAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(CheckAlertSettingsRunBasedEscalationOutput)
}

type CheckAlertSettingsSslCertificate struct {
	// At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. Defaults to `3`.
	AlertThreshold *int `pulumi:"alertThreshold"`
	// Determines if alert notifications should be send for expiring SSL certificates. Possible values `true`, and `false`. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// CheckAlertSettingsSslCertificateInput is an input type that accepts CheckAlertSettingsSslCertificateArgs and CheckAlertSettingsSslCertificateOutput values.
// You can construct a concrete instance of `CheckAlertSettingsSslCertificateInput` via:
//
//          CheckAlertSettingsSslCertificateArgs{...}
type CheckAlertSettingsSslCertificateInput interface {
	pulumi.Input

	ToCheckAlertSettingsSslCertificateOutput() CheckAlertSettingsSslCertificateOutput
	ToCheckAlertSettingsSslCertificateOutputWithContext(context.Context) CheckAlertSettingsSslCertificateOutput
}

type CheckAlertSettingsSslCertificateArgs struct {
	// At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. Defaults to `3`.
	AlertThreshold pulumi.IntPtrInput `pulumi:"alertThreshold"`
	// Determines if alert notifications should be send for expiring SSL certificates. Possible values `true`, and `false`. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (CheckAlertSettingsSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (i CheckAlertSettingsSslCertificateArgs) ToCheckAlertSettingsSslCertificateOutput() CheckAlertSettingsSslCertificateOutput {
	return i.ToCheckAlertSettingsSslCertificateOutputWithContext(context.Background())
}

func (i CheckAlertSettingsSslCertificateArgs) ToCheckAlertSettingsSslCertificateOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsSslCertificateOutput)
}

// CheckAlertSettingsSslCertificateArrayInput is an input type that accepts CheckAlertSettingsSslCertificateArray and CheckAlertSettingsSslCertificateArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsSslCertificateArrayInput` via:
//
//          CheckAlertSettingsSslCertificateArray{ CheckAlertSettingsSslCertificateArgs{...} }
type CheckAlertSettingsSslCertificateArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsSslCertificateArrayOutput() CheckAlertSettingsSslCertificateArrayOutput
	ToCheckAlertSettingsSslCertificateArrayOutputWithContext(context.Context) CheckAlertSettingsSslCertificateArrayOutput
}

type CheckAlertSettingsSslCertificateArray []CheckAlertSettingsSslCertificateInput

func (CheckAlertSettingsSslCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (i CheckAlertSettingsSslCertificateArray) ToCheckAlertSettingsSslCertificateArrayOutput() CheckAlertSettingsSslCertificateArrayOutput {
	return i.ToCheckAlertSettingsSslCertificateArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsSslCertificateArray) ToCheckAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsSslCertificateArrayOutput)
}

type CheckAlertSettingsSslCertificateOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (o CheckAlertSettingsSslCertificateOutput) ToCheckAlertSettingsSslCertificateOutput() CheckAlertSettingsSslCertificateOutput {
	return o
}

func (o CheckAlertSettingsSslCertificateOutput) ToCheckAlertSettingsSslCertificateOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateOutput {
	return o
}

// At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. Defaults to `3`.
func (o CheckAlertSettingsSslCertificateOutput) AlertThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsSslCertificate) *int { return v.AlertThreshold }).(pulumi.IntPtrOutput)
}

// Determines if alert notifications should be send for expiring SSL certificates. Possible values `true`, and `false`. Defaults to `true`.
func (o CheckAlertSettingsSslCertificateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsSslCertificate) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type CheckAlertSettingsSslCertificateArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsSslCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (o CheckAlertSettingsSslCertificateArrayOutput) ToCheckAlertSettingsSslCertificateArrayOutput() CheckAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o CheckAlertSettingsSslCertificateArrayOutput) ToCheckAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o CheckAlertSettingsSslCertificateArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsSslCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsSslCertificate {
		return vs[0].([]CheckAlertSettingsSslCertificate)[vs[1].(int)]
	}).(CheckAlertSettingsSslCertificateOutput)
}

type CheckAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be send. Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// CheckAlertSettingsTimeBasedEscalationInput is an input type that accepts CheckAlertSettingsTimeBasedEscalationArgs and CheckAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `CheckAlertSettingsTimeBasedEscalationInput` via:
//
//          CheckAlertSettingsTimeBasedEscalationArgs{...}
type CheckAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToCheckAlertSettingsTimeBasedEscalationOutput() CheckAlertSettingsTimeBasedEscalationOutput
	ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) CheckAlertSettingsTimeBasedEscalationOutput
}

type CheckAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be send. Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (CheckAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsTimeBasedEscalationArgs) ToCheckAlertSettingsTimeBasedEscalationOutput() CheckAlertSettingsTimeBasedEscalationOutput {
	return i.ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i CheckAlertSettingsTimeBasedEscalationArgs) ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsTimeBasedEscalationOutput)
}

// CheckAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts CheckAlertSettingsTimeBasedEscalationArray and CheckAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsTimeBasedEscalationArrayInput` via:
//
//          CheckAlertSettingsTimeBasedEscalationArray{ CheckAlertSettingsTimeBasedEscalationArgs{...} }
type CheckAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsTimeBasedEscalationArrayOutput() CheckAlertSettingsTimeBasedEscalationArrayOutput
	ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) CheckAlertSettingsTimeBasedEscalationArrayOutput
}

type CheckAlertSettingsTimeBasedEscalationArray []CheckAlertSettingsTimeBasedEscalationInput

func (CheckAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsTimeBasedEscalationArray) ToCheckAlertSettingsTimeBasedEscalationArrayOutput() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsTimeBasedEscalationArray) ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsTimeBasedEscalationOutput) ToCheckAlertSettingsTimeBasedEscalationOutput() CheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o CheckAlertSettingsTimeBasedEscalationOutput) ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be send. Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
func (o CheckAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsTimeBasedEscalationArrayOutput) ToCheckAlertSettingsTimeBasedEscalationArrayOutput() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsTimeBasedEscalationArrayOutput) ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsTimeBasedEscalation {
		return vs[0].([]CheckAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(CheckAlertSettingsTimeBasedEscalationOutput)
}

type CheckRequest struct {
	// A request can have multiple assetions. Assertion has the following arguments:
	Assertions []CheckRequestAssertion `pulumi:"assertions"`
	// A request might have one basicAuth config. basicAuth has two arguments:
	BasicAuth *CheckRequestBasicAuth `pulumi:"basicAuth"`
	Body      *string                `pulumi:"body"`
	// Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
	BodyType *string `pulumi:"bodyType"`
	// .
	FollowRedirects *bool `pulumi:"followRedirects"`
	// .
	Headers map[string]interface{} `pulumi:"headers"`
	// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. Defaults to `GET`.
	Method *string `pulumi:"method"`
	// .
	QueryParameters map[string]interface{} `pulumi:"queryParameters"`
	// .
	SkipSsl *bool `pulumi:"skipSsl"`
	// .
	Url string `pulumi:"url"`
}

// CheckRequestInput is an input type that accepts CheckRequestArgs and CheckRequestOutput values.
// You can construct a concrete instance of `CheckRequestInput` via:
//
//          CheckRequestArgs{...}
type CheckRequestInput interface {
	pulumi.Input

	ToCheckRequestOutput() CheckRequestOutput
	ToCheckRequestOutputWithContext(context.Context) CheckRequestOutput
}

type CheckRequestArgs struct {
	// A request can have multiple assetions. Assertion has the following arguments:
	Assertions CheckRequestAssertionArrayInput `pulumi:"assertions"`
	// A request might have one basicAuth config. basicAuth has two arguments:
	BasicAuth CheckRequestBasicAuthPtrInput `pulumi:"basicAuth"`
	Body      pulumi.StringPtrInput         `pulumi:"body"`
	// Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
	BodyType pulumi.StringPtrInput `pulumi:"bodyType"`
	// .
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// .
	Headers pulumi.MapInput `pulumi:"headers"`
	// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. Defaults to `GET`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// .
	QueryParameters pulumi.MapInput `pulumi:"queryParameters"`
	// .
	SkipSsl pulumi.BoolPtrInput `pulumi:"skipSsl"`
	// .
	Url pulumi.StringInput `pulumi:"url"`
}

func (CheckRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequest)(nil)).Elem()
}

func (i CheckRequestArgs) ToCheckRequestOutput() CheckRequestOutput {
	return i.ToCheckRequestOutputWithContext(context.Background())
}

func (i CheckRequestArgs) ToCheckRequestOutputWithContext(ctx context.Context) CheckRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestOutput)
}

func (i CheckRequestArgs) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return i.ToCheckRequestPtrOutputWithContext(context.Background())
}

func (i CheckRequestArgs) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestOutput).ToCheckRequestPtrOutputWithContext(ctx)
}

// CheckRequestPtrInput is an input type that accepts CheckRequestArgs, CheckRequestPtr and CheckRequestPtrOutput values.
// You can construct a concrete instance of `CheckRequestPtrInput` via:
//
//          CheckRequestArgs{...}
//
//  or:
//
//          nil
type CheckRequestPtrInput interface {
	pulumi.Input

	ToCheckRequestPtrOutput() CheckRequestPtrOutput
	ToCheckRequestPtrOutputWithContext(context.Context) CheckRequestPtrOutput
}

type checkRequestPtrType CheckRequestArgs

func CheckRequestPtr(v *CheckRequestArgs) CheckRequestPtrInput {
	return (*checkRequestPtrType)(v)
}

func (*checkRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequest)(nil)).Elem()
}

func (i *checkRequestPtrType) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return i.ToCheckRequestPtrOutputWithContext(context.Background())
}

func (i *checkRequestPtrType) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestPtrOutput)
}

type CheckRequestOutput struct{ *pulumi.OutputState }

func (CheckRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequest)(nil)).Elem()
}

func (o CheckRequestOutput) ToCheckRequestOutput() CheckRequestOutput {
	return o
}

func (o CheckRequestOutput) ToCheckRequestOutputWithContext(ctx context.Context) CheckRequestOutput {
	return o
}

func (o CheckRequestOutput) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return o.ToCheckRequestPtrOutputWithContext(context.Background())
}

func (o CheckRequestOutput) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckRequest) *CheckRequest {
		return &v
	}).(CheckRequestPtrOutput)
}

// A request can have multiple assetions. Assertion has the following arguments:
func (o CheckRequestOutput) Assertions() CheckRequestAssertionArrayOutput {
	return o.ApplyT(func(v CheckRequest) []CheckRequestAssertion { return v.Assertions }).(CheckRequestAssertionArrayOutput)
}

// A request might have one basicAuth config. basicAuth has two arguments:
func (o CheckRequestOutput) BasicAuth() CheckRequestBasicAuthPtrOutput {
	return o.ApplyT(func(v CheckRequest) *CheckRequestBasicAuth { return v.BasicAuth }).(CheckRequestBasicAuthPtrOutput)
}

func (o CheckRequestOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
func (o CheckRequestOutput) BodyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.BodyType }).(pulumi.StringPtrOutput)
}

// .
func (o CheckRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// .
func (o CheckRequestOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v CheckRequest) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. Defaults to `GET`.
func (o CheckRequestOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// .
func (o CheckRequestOutput) QueryParameters() pulumi.MapOutput {
	return o.ApplyT(func(v CheckRequest) map[string]interface{} { return v.QueryParameters }).(pulumi.MapOutput)
}

// .
func (o CheckRequestOutput) SkipSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckRequest) *bool { return v.SkipSsl }).(pulumi.BoolPtrOutput)
}

// .
func (o CheckRequestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequest) string { return v.Url }).(pulumi.StringOutput)
}

type CheckRequestPtrOutput struct{ *pulumi.OutputState }

func (CheckRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequest)(nil)).Elem()
}

func (o CheckRequestPtrOutput) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return o
}

func (o CheckRequestPtrOutput) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return o
}

func (o CheckRequestPtrOutput) Elem() CheckRequestOutput {
	return o.ApplyT(func(v *CheckRequest) CheckRequest {
		if v != nil {
			return *v
		}
		var ret CheckRequest
		return ret
	}).(CheckRequestOutput)
}

// A request can have multiple assetions. Assertion has the following arguments:
func (o CheckRequestPtrOutput) Assertions() CheckRequestAssertionArrayOutput {
	return o.ApplyT(func(v *CheckRequest) []CheckRequestAssertion {
		if v == nil {
			return nil
		}
		return v.Assertions
	}).(CheckRequestAssertionArrayOutput)
}

// A request might have one basicAuth config. basicAuth has two arguments:
func (o CheckRequestPtrOutput) BasicAuth() CheckRequestBasicAuthPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *CheckRequestBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(CheckRequestBasicAuthPtrOutput)
}

func (o CheckRequestPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
func (o CheckRequestPtrOutput) BodyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.BodyType
	}).(pulumi.StringPtrOutput)
}

// .
func (o CheckRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// .
func (o CheckRequestPtrOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v *CheckRequest) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.MapOutput)
}

// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. Defaults to `GET`.
func (o CheckRequestPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// .
func (o CheckRequestPtrOutput) QueryParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *CheckRequest) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.MapOutput)
}

// .
func (o CheckRequestPtrOutput) SkipSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *bool {
		if v == nil {
			return nil
		}
		return v.SkipSsl
	}).(pulumi.BoolPtrOutput)
}

// .
func (o CheckRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type CheckRequestAssertion struct {
	// Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison string `pulumi:"comparison"`
	// .
	Property *string `pulumi:"property"`
	// Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
	Source string `pulumi:"source"`
	// .
	Target *string `pulumi:"target"`
}

// CheckRequestAssertionInput is an input type that accepts CheckRequestAssertionArgs and CheckRequestAssertionOutput values.
// You can construct a concrete instance of `CheckRequestAssertionInput` via:
//
//          CheckRequestAssertionArgs{...}
type CheckRequestAssertionInput interface {
	pulumi.Input

	ToCheckRequestAssertionOutput() CheckRequestAssertionOutput
	ToCheckRequestAssertionOutputWithContext(context.Context) CheckRequestAssertionOutput
}

type CheckRequestAssertionArgs struct {
	// Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison pulumi.StringInput `pulumi:"comparison"`
	// .
	Property pulumi.StringPtrInput `pulumi:"property"`
	// Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
	Source pulumi.StringInput `pulumi:"source"`
	// .
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (CheckRequestAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestAssertion)(nil)).Elem()
}

func (i CheckRequestAssertionArgs) ToCheckRequestAssertionOutput() CheckRequestAssertionOutput {
	return i.ToCheckRequestAssertionOutputWithContext(context.Background())
}

func (i CheckRequestAssertionArgs) ToCheckRequestAssertionOutputWithContext(ctx context.Context) CheckRequestAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestAssertionOutput)
}

// CheckRequestAssertionArrayInput is an input type that accepts CheckRequestAssertionArray and CheckRequestAssertionArrayOutput values.
// You can construct a concrete instance of `CheckRequestAssertionArrayInput` via:
//
//          CheckRequestAssertionArray{ CheckRequestAssertionArgs{...} }
type CheckRequestAssertionArrayInput interface {
	pulumi.Input

	ToCheckRequestAssertionArrayOutput() CheckRequestAssertionArrayOutput
	ToCheckRequestAssertionArrayOutputWithContext(context.Context) CheckRequestAssertionArrayOutput
}

type CheckRequestAssertionArray []CheckRequestAssertionInput

func (CheckRequestAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckRequestAssertion)(nil)).Elem()
}

func (i CheckRequestAssertionArray) ToCheckRequestAssertionArrayOutput() CheckRequestAssertionArrayOutput {
	return i.ToCheckRequestAssertionArrayOutputWithContext(context.Background())
}

func (i CheckRequestAssertionArray) ToCheckRequestAssertionArrayOutputWithContext(ctx context.Context) CheckRequestAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestAssertionArrayOutput)
}

type CheckRequestAssertionOutput struct{ *pulumi.OutputState }

func (CheckRequestAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestAssertion)(nil)).Elem()
}

func (o CheckRequestAssertionOutput) ToCheckRequestAssertionOutput() CheckRequestAssertionOutput {
	return o
}

func (o CheckRequestAssertionOutput) ToCheckRequestAssertionOutputWithContext(ctx context.Context) CheckRequestAssertionOutput {
	return o
}

// Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
func (o CheckRequestAssertionOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestAssertion) string { return v.Comparison }).(pulumi.StringOutput)
}

// .
func (o CheckRequestAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequestAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
func (o CheckRequestAssertionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestAssertion) string { return v.Source }).(pulumi.StringOutput)
}

// .
func (o CheckRequestAssertionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequestAssertion) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type CheckRequestAssertionArrayOutput struct{ *pulumi.OutputState }

func (CheckRequestAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckRequestAssertion)(nil)).Elem()
}

func (o CheckRequestAssertionArrayOutput) ToCheckRequestAssertionArrayOutput() CheckRequestAssertionArrayOutput {
	return o
}

func (o CheckRequestAssertionArrayOutput) ToCheckRequestAssertionArrayOutputWithContext(ctx context.Context) CheckRequestAssertionArrayOutput {
	return o
}

func (o CheckRequestAssertionArrayOutput) Index(i pulumi.IntInput) CheckRequestAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckRequestAssertion {
		return vs[0].([]CheckRequestAssertion)[vs[1].(int)]
	}).(CheckRequestAssertionOutput)
}

type CheckRequestBasicAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// CheckRequestBasicAuthInput is an input type that accepts CheckRequestBasicAuthArgs and CheckRequestBasicAuthOutput values.
// You can construct a concrete instance of `CheckRequestBasicAuthInput` via:
//
//          CheckRequestBasicAuthArgs{...}
type CheckRequestBasicAuthInput interface {
	pulumi.Input

	ToCheckRequestBasicAuthOutput() CheckRequestBasicAuthOutput
	ToCheckRequestBasicAuthOutputWithContext(context.Context) CheckRequestBasicAuthOutput
}

type CheckRequestBasicAuthArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (CheckRequestBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestBasicAuth)(nil)).Elem()
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthOutput() CheckRequestBasicAuthOutput {
	return i.ToCheckRequestBasicAuthOutputWithContext(context.Background())
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthOutputWithContext(ctx context.Context) CheckRequestBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestBasicAuthOutput)
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return i.ToCheckRequestBasicAuthPtrOutputWithContext(context.Background())
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestBasicAuthOutput).ToCheckRequestBasicAuthPtrOutputWithContext(ctx)
}

// CheckRequestBasicAuthPtrInput is an input type that accepts CheckRequestBasicAuthArgs, CheckRequestBasicAuthPtr and CheckRequestBasicAuthPtrOutput values.
// You can construct a concrete instance of `CheckRequestBasicAuthPtrInput` via:
//
//          CheckRequestBasicAuthArgs{...}
//
//  or:
//
//          nil
type CheckRequestBasicAuthPtrInput interface {
	pulumi.Input

	ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput
	ToCheckRequestBasicAuthPtrOutputWithContext(context.Context) CheckRequestBasicAuthPtrOutput
}

type checkRequestBasicAuthPtrType CheckRequestBasicAuthArgs

func CheckRequestBasicAuthPtr(v *CheckRequestBasicAuthArgs) CheckRequestBasicAuthPtrInput {
	return (*checkRequestBasicAuthPtrType)(v)
}

func (*checkRequestBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequestBasicAuth)(nil)).Elem()
}

func (i *checkRequestBasicAuthPtrType) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return i.ToCheckRequestBasicAuthPtrOutputWithContext(context.Background())
}

func (i *checkRequestBasicAuthPtrType) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestBasicAuthPtrOutput)
}

type CheckRequestBasicAuthOutput struct{ *pulumi.OutputState }

func (CheckRequestBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestBasicAuth)(nil)).Elem()
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthOutput() CheckRequestBasicAuthOutput {
	return o
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthOutputWithContext(ctx context.Context) CheckRequestBasicAuthOutput {
	return o
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return o.ToCheckRequestBasicAuthPtrOutputWithContext(context.Background())
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckRequestBasicAuth) *CheckRequestBasicAuth {
		return &v
	}).(CheckRequestBasicAuthPtrOutput)
}

func (o CheckRequestBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

func (o CheckRequestBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type CheckRequestBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (CheckRequestBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequestBasicAuth)(nil)).Elem()
}

func (o CheckRequestBasicAuthPtrOutput) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return o
}

func (o CheckRequestBasicAuthPtrOutput) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return o
}

func (o CheckRequestBasicAuthPtrOutput) Elem() CheckRequestBasicAuthOutput {
	return o.ApplyT(func(v *CheckRequestBasicAuth) CheckRequestBasicAuth {
		if v != nil {
			return *v
		}
		var ret CheckRequestBasicAuth
		return ret
	}).(CheckRequestBasicAuthOutput)
}

func (o CheckRequestBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequestBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o CheckRequestBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequestBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertChannelSubscriptionInput)(nil)).Elem(), CheckAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertChannelSubscriptionArrayInput)(nil)).Elem(), CheckAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsInput)(nil)).Elem(), CheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsPtrInput)(nil)).Elem(), CheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsReminderInput)(nil)).Elem(), CheckAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsReminderArrayInput)(nil)).Elem(), CheckAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsRunBasedEscalationInput)(nil)).Elem(), CheckAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), CheckAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsSslCertificateInput)(nil)).Elem(), CheckAlertSettingsSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsSslCertificateArrayInput)(nil)).Elem(), CheckAlertSettingsSslCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), CheckAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), CheckAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestInput)(nil)).Elem(), CheckRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestPtrInput)(nil)).Elem(), CheckRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestAssertionInput)(nil)).Elem(), CheckRequestAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestAssertionArrayInput)(nil)).Elem(), CheckRequestAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestBasicAuthInput)(nil)).Elem(), CheckRequestBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestBasicAuthPtrInput)(nil)).Elem(), CheckRequestBasicAuthArgs{})
	pulumi.RegisterOutputType(CheckAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(CheckAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsSslCertificateOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsSslCertificateArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(CheckRequestOutput{})
	pulumi.RegisterOutputType(CheckRequestPtrOutput{})
	pulumi.RegisterOutputType(CheckRequestAssertionOutput{})
	pulumi.RegisterOutputType(CheckRequestAssertionArrayOutput{})
	pulumi.RegisterOutputType(CheckRequestBasicAuthOutput{})
	pulumi.RegisterOutputType(CheckRequestBasicAuthPtrOutput{})
}
