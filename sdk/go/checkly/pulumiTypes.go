// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AlertChannelCall struct {
	// The name of this alert channel
	Name string `pulumi:"name"`
	// The mobile number to receive the alerts
	Number string `pulumi:"number"`
}

// AlertChannelCallInput is an input type that accepts AlertChannelCallArgs and AlertChannelCallOutput values.
// You can construct a concrete instance of `AlertChannelCallInput` via:
//
//	AlertChannelCallArgs{...}
type AlertChannelCallInput interface {
	pulumi.Input

	ToAlertChannelCallOutput() AlertChannelCallOutput
	ToAlertChannelCallOutputWithContext(context.Context) AlertChannelCallOutput
}

type AlertChannelCallArgs struct {
	// The name of this alert channel
	Name pulumi.StringInput `pulumi:"name"`
	// The mobile number to receive the alerts
	Number pulumi.StringInput `pulumi:"number"`
}

func (AlertChannelCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelCall)(nil)).Elem()
}

func (i AlertChannelCallArgs) ToAlertChannelCallOutput() AlertChannelCallOutput {
	return i.ToAlertChannelCallOutputWithContext(context.Background())
}

func (i AlertChannelCallArgs) ToAlertChannelCallOutputWithContext(ctx context.Context) AlertChannelCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelCallOutput)
}

func (i AlertChannelCallArgs) ToAlertChannelCallPtrOutput() AlertChannelCallPtrOutput {
	return i.ToAlertChannelCallPtrOutputWithContext(context.Background())
}

func (i AlertChannelCallArgs) ToAlertChannelCallPtrOutputWithContext(ctx context.Context) AlertChannelCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelCallOutput).ToAlertChannelCallPtrOutputWithContext(ctx)
}

// AlertChannelCallPtrInput is an input type that accepts AlertChannelCallArgs, AlertChannelCallPtr and AlertChannelCallPtrOutput values.
// You can construct a concrete instance of `AlertChannelCallPtrInput` via:
//
//	        AlertChannelCallArgs{...}
//
//	or:
//
//	        nil
type AlertChannelCallPtrInput interface {
	pulumi.Input

	ToAlertChannelCallPtrOutput() AlertChannelCallPtrOutput
	ToAlertChannelCallPtrOutputWithContext(context.Context) AlertChannelCallPtrOutput
}

type alertChannelCallPtrType AlertChannelCallArgs

func AlertChannelCallPtr(v *AlertChannelCallArgs) AlertChannelCallPtrInput {
	return (*alertChannelCallPtrType)(v)
}

func (*alertChannelCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelCall)(nil)).Elem()
}

func (i *alertChannelCallPtrType) ToAlertChannelCallPtrOutput() AlertChannelCallPtrOutput {
	return i.ToAlertChannelCallPtrOutputWithContext(context.Background())
}

func (i *alertChannelCallPtrType) ToAlertChannelCallPtrOutputWithContext(ctx context.Context) AlertChannelCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelCallPtrOutput)
}

type AlertChannelCallOutput struct{ *pulumi.OutputState }

func (AlertChannelCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelCall)(nil)).Elem()
}

func (o AlertChannelCallOutput) ToAlertChannelCallOutput() AlertChannelCallOutput {
	return o
}

func (o AlertChannelCallOutput) ToAlertChannelCallOutputWithContext(ctx context.Context) AlertChannelCallOutput {
	return o
}

func (o AlertChannelCallOutput) ToAlertChannelCallPtrOutput() AlertChannelCallPtrOutput {
	return o.ToAlertChannelCallPtrOutputWithContext(context.Background())
}

func (o AlertChannelCallOutput) ToAlertChannelCallPtrOutputWithContext(ctx context.Context) AlertChannelCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelCall) *AlertChannelCall {
		return &v
	}).(AlertChannelCallPtrOutput)
}

// The name of this alert channel
func (o AlertChannelCallOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelCall) string { return v.Name }).(pulumi.StringOutput)
}

// The mobile number to receive the alerts
func (o AlertChannelCallOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelCall) string { return v.Number }).(pulumi.StringOutput)
}

type AlertChannelCallPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelCall)(nil)).Elem()
}

func (o AlertChannelCallPtrOutput) ToAlertChannelCallPtrOutput() AlertChannelCallPtrOutput {
	return o
}

func (o AlertChannelCallPtrOutput) ToAlertChannelCallPtrOutputWithContext(ctx context.Context) AlertChannelCallPtrOutput {
	return o
}

func (o AlertChannelCallPtrOutput) Elem() AlertChannelCallOutput {
	return o.ApplyT(func(v *AlertChannelCall) AlertChannelCall {
		if v != nil {
			return *v
		}
		var ret AlertChannelCall
		return ret
	}).(AlertChannelCallOutput)
}

// The name of this alert channel
func (o AlertChannelCallPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelCall) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The mobile number to receive the alerts
func (o AlertChannelCallPtrOutput) Number() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelCall) *string {
		if v == nil {
			return nil
		}
		return &v.Number
	}).(pulumi.StringPtrOutput)
}

type AlertChannelEmail struct {
	// The email address of this email alert channel.
	Address string `pulumi:"address"`
}

// AlertChannelEmailInput is an input type that accepts AlertChannelEmailArgs and AlertChannelEmailOutput values.
// You can construct a concrete instance of `AlertChannelEmailInput` via:
//
//	AlertChannelEmailArgs{...}
type AlertChannelEmailInput interface {
	pulumi.Input

	ToAlertChannelEmailOutput() AlertChannelEmailOutput
	ToAlertChannelEmailOutputWithContext(context.Context) AlertChannelEmailOutput
}

type AlertChannelEmailArgs struct {
	// The email address of this email alert channel.
	Address pulumi.StringInput `pulumi:"address"`
}

func (AlertChannelEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelEmail)(nil)).Elem()
}

func (i AlertChannelEmailArgs) ToAlertChannelEmailOutput() AlertChannelEmailOutput {
	return i.ToAlertChannelEmailOutputWithContext(context.Background())
}

func (i AlertChannelEmailArgs) ToAlertChannelEmailOutputWithContext(ctx context.Context) AlertChannelEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelEmailOutput)
}

func (i AlertChannelEmailArgs) ToAlertChannelEmailPtrOutput() AlertChannelEmailPtrOutput {
	return i.ToAlertChannelEmailPtrOutputWithContext(context.Background())
}

func (i AlertChannelEmailArgs) ToAlertChannelEmailPtrOutputWithContext(ctx context.Context) AlertChannelEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelEmailOutput).ToAlertChannelEmailPtrOutputWithContext(ctx)
}

// AlertChannelEmailPtrInput is an input type that accepts AlertChannelEmailArgs, AlertChannelEmailPtr and AlertChannelEmailPtrOutput values.
// You can construct a concrete instance of `AlertChannelEmailPtrInput` via:
//
//	        AlertChannelEmailArgs{...}
//
//	or:
//
//	        nil
type AlertChannelEmailPtrInput interface {
	pulumi.Input

	ToAlertChannelEmailPtrOutput() AlertChannelEmailPtrOutput
	ToAlertChannelEmailPtrOutputWithContext(context.Context) AlertChannelEmailPtrOutput
}

type alertChannelEmailPtrType AlertChannelEmailArgs

func AlertChannelEmailPtr(v *AlertChannelEmailArgs) AlertChannelEmailPtrInput {
	return (*alertChannelEmailPtrType)(v)
}

func (*alertChannelEmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelEmail)(nil)).Elem()
}

func (i *alertChannelEmailPtrType) ToAlertChannelEmailPtrOutput() AlertChannelEmailPtrOutput {
	return i.ToAlertChannelEmailPtrOutputWithContext(context.Background())
}

func (i *alertChannelEmailPtrType) ToAlertChannelEmailPtrOutputWithContext(ctx context.Context) AlertChannelEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelEmailPtrOutput)
}

type AlertChannelEmailOutput struct{ *pulumi.OutputState }

func (AlertChannelEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelEmail)(nil)).Elem()
}

func (o AlertChannelEmailOutput) ToAlertChannelEmailOutput() AlertChannelEmailOutput {
	return o
}

func (o AlertChannelEmailOutput) ToAlertChannelEmailOutputWithContext(ctx context.Context) AlertChannelEmailOutput {
	return o
}

func (o AlertChannelEmailOutput) ToAlertChannelEmailPtrOutput() AlertChannelEmailPtrOutput {
	return o.ToAlertChannelEmailPtrOutputWithContext(context.Background())
}

func (o AlertChannelEmailOutput) ToAlertChannelEmailPtrOutputWithContext(ctx context.Context) AlertChannelEmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelEmail) *AlertChannelEmail {
		return &v
	}).(AlertChannelEmailPtrOutput)
}

// The email address of this email alert channel.
func (o AlertChannelEmailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelEmail) string { return v.Address }).(pulumi.StringOutput)
}

type AlertChannelEmailPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelEmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelEmail)(nil)).Elem()
}

func (o AlertChannelEmailPtrOutput) ToAlertChannelEmailPtrOutput() AlertChannelEmailPtrOutput {
	return o
}

func (o AlertChannelEmailPtrOutput) ToAlertChannelEmailPtrOutputWithContext(ctx context.Context) AlertChannelEmailPtrOutput {
	return o
}

func (o AlertChannelEmailPtrOutput) Elem() AlertChannelEmailOutput {
	return o.ApplyT(func(v *AlertChannelEmail) AlertChannelEmail {
		if v != nil {
			return *v
		}
		var ret AlertChannelEmail
		return ret
	}).(AlertChannelEmailOutput)
}

// The email address of this email alert channel.
func (o AlertChannelEmailPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelEmail) *string {
		if v == nil {
			return nil
		}
		return &v.Address
	}).(pulumi.StringPtrOutput)
}

type AlertChannelOpsgenie struct {
	ApiKey   string `pulumi:"apiKey"`
	Name     string `pulumi:"name"`
	Priority string `pulumi:"priority"`
	Region   string `pulumi:"region"`
}

// AlertChannelOpsgenieInput is an input type that accepts AlertChannelOpsgenieArgs and AlertChannelOpsgenieOutput values.
// You can construct a concrete instance of `AlertChannelOpsgenieInput` via:
//
//	AlertChannelOpsgenieArgs{...}
type AlertChannelOpsgenieInput interface {
	pulumi.Input

	ToAlertChannelOpsgenieOutput() AlertChannelOpsgenieOutput
	ToAlertChannelOpsgenieOutputWithContext(context.Context) AlertChannelOpsgenieOutput
}

type AlertChannelOpsgenieArgs struct {
	ApiKey   pulumi.StringInput `pulumi:"apiKey"`
	Name     pulumi.StringInput `pulumi:"name"`
	Priority pulumi.StringInput `pulumi:"priority"`
	Region   pulumi.StringInput `pulumi:"region"`
}

func (AlertChannelOpsgenieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelOpsgenie)(nil)).Elem()
}

func (i AlertChannelOpsgenieArgs) ToAlertChannelOpsgenieOutput() AlertChannelOpsgenieOutput {
	return i.ToAlertChannelOpsgenieOutputWithContext(context.Background())
}

func (i AlertChannelOpsgenieArgs) ToAlertChannelOpsgenieOutputWithContext(ctx context.Context) AlertChannelOpsgenieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelOpsgenieOutput)
}

func (i AlertChannelOpsgenieArgs) ToAlertChannelOpsgeniePtrOutput() AlertChannelOpsgeniePtrOutput {
	return i.ToAlertChannelOpsgeniePtrOutputWithContext(context.Background())
}

func (i AlertChannelOpsgenieArgs) ToAlertChannelOpsgeniePtrOutputWithContext(ctx context.Context) AlertChannelOpsgeniePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelOpsgenieOutput).ToAlertChannelOpsgeniePtrOutputWithContext(ctx)
}

// AlertChannelOpsgeniePtrInput is an input type that accepts AlertChannelOpsgenieArgs, AlertChannelOpsgeniePtr and AlertChannelOpsgeniePtrOutput values.
// You can construct a concrete instance of `AlertChannelOpsgeniePtrInput` via:
//
//	        AlertChannelOpsgenieArgs{...}
//
//	or:
//
//	        nil
type AlertChannelOpsgeniePtrInput interface {
	pulumi.Input

	ToAlertChannelOpsgeniePtrOutput() AlertChannelOpsgeniePtrOutput
	ToAlertChannelOpsgeniePtrOutputWithContext(context.Context) AlertChannelOpsgeniePtrOutput
}

type alertChannelOpsgeniePtrType AlertChannelOpsgenieArgs

func AlertChannelOpsgeniePtr(v *AlertChannelOpsgenieArgs) AlertChannelOpsgeniePtrInput {
	return (*alertChannelOpsgeniePtrType)(v)
}

func (*alertChannelOpsgeniePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelOpsgenie)(nil)).Elem()
}

func (i *alertChannelOpsgeniePtrType) ToAlertChannelOpsgeniePtrOutput() AlertChannelOpsgeniePtrOutput {
	return i.ToAlertChannelOpsgeniePtrOutputWithContext(context.Background())
}

func (i *alertChannelOpsgeniePtrType) ToAlertChannelOpsgeniePtrOutputWithContext(ctx context.Context) AlertChannelOpsgeniePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelOpsgeniePtrOutput)
}

type AlertChannelOpsgenieOutput struct{ *pulumi.OutputState }

func (AlertChannelOpsgenieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelOpsgenie)(nil)).Elem()
}

func (o AlertChannelOpsgenieOutput) ToAlertChannelOpsgenieOutput() AlertChannelOpsgenieOutput {
	return o
}

func (o AlertChannelOpsgenieOutput) ToAlertChannelOpsgenieOutputWithContext(ctx context.Context) AlertChannelOpsgenieOutput {
	return o
}

func (o AlertChannelOpsgenieOutput) ToAlertChannelOpsgeniePtrOutput() AlertChannelOpsgeniePtrOutput {
	return o.ToAlertChannelOpsgeniePtrOutputWithContext(context.Background())
}

func (o AlertChannelOpsgenieOutput) ToAlertChannelOpsgeniePtrOutputWithContext(ctx context.Context) AlertChannelOpsgeniePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelOpsgenie) *AlertChannelOpsgenie {
		return &v
	}).(AlertChannelOpsgeniePtrOutput)
}

func (o AlertChannelOpsgenieOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelOpsgenie) string { return v.ApiKey }).(pulumi.StringOutput)
}

func (o AlertChannelOpsgenieOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelOpsgenie) string { return v.Name }).(pulumi.StringOutput)
}

func (o AlertChannelOpsgenieOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelOpsgenie) string { return v.Priority }).(pulumi.StringOutput)
}

func (o AlertChannelOpsgenieOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelOpsgenie) string { return v.Region }).(pulumi.StringOutput)
}

type AlertChannelOpsgeniePtrOutput struct{ *pulumi.OutputState }

func (AlertChannelOpsgeniePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelOpsgenie)(nil)).Elem()
}

func (o AlertChannelOpsgeniePtrOutput) ToAlertChannelOpsgeniePtrOutput() AlertChannelOpsgeniePtrOutput {
	return o
}

func (o AlertChannelOpsgeniePtrOutput) ToAlertChannelOpsgeniePtrOutputWithContext(ctx context.Context) AlertChannelOpsgeniePtrOutput {
	return o
}

func (o AlertChannelOpsgeniePtrOutput) Elem() AlertChannelOpsgenieOutput {
	return o.ApplyT(func(v *AlertChannelOpsgenie) AlertChannelOpsgenie {
		if v != nil {
			return *v
		}
		var ret AlertChannelOpsgenie
		return ret
	}).(AlertChannelOpsgenieOutput)
}

func (o AlertChannelOpsgeniePtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelOpsgenie) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKey
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelOpsgeniePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelOpsgenie) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelOpsgeniePtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelOpsgenie) *string {
		if v == nil {
			return nil
		}
		return &v.Priority
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelOpsgeniePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelOpsgenie) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

type AlertChannelPagerduty struct {
	Account     *string `pulumi:"account"`
	ServiceKey  string  `pulumi:"serviceKey"`
	ServiceName *string `pulumi:"serviceName"`
}

// AlertChannelPagerdutyInput is an input type that accepts AlertChannelPagerdutyArgs and AlertChannelPagerdutyOutput values.
// You can construct a concrete instance of `AlertChannelPagerdutyInput` via:
//
//	AlertChannelPagerdutyArgs{...}
type AlertChannelPagerdutyInput interface {
	pulumi.Input

	ToAlertChannelPagerdutyOutput() AlertChannelPagerdutyOutput
	ToAlertChannelPagerdutyOutputWithContext(context.Context) AlertChannelPagerdutyOutput
}

type AlertChannelPagerdutyArgs struct {
	Account     pulumi.StringPtrInput `pulumi:"account"`
	ServiceKey  pulumi.StringInput    `pulumi:"serviceKey"`
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (AlertChannelPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelPagerduty)(nil)).Elem()
}

func (i AlertChannelPagerdutyArgs) ToAlertChannelPagerdutyOutput() AlertChannelPagerdutyOutput {
	return i.ToAlertChannelPagerdutyOutputWithContext(context.Background())
}

func (i AlertChannelPagerdutyArgs) ToAlertChannelPagerdutyOutputWithContext(ctx context.Context) AlertChannelPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelPagerdutyOutput)
}

func (i AlertChannelPagerdutyArgs) ToAlertChannelPagerdutyPtrOutput() AlertChannelPagerdutyPtrOutput {
	return i.ToAlertChannelPagerdutyPtrOutputWithContext(context.Background())
}

func (i AlertChannelPagerdutyArgs) ToAlertChannelPagerdutyPtrOutputWithContext(ctx context.Context) AlertChannelPagerdutyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelPagerdutyOutput).ToAlertChannelPagerdutyPtrOutputWithContext(ctx)
}

// AlertChannelPagerdutyPtrInput is an input type that accepts AlertChannelPagerdutyArgs, AlertChannelPagerdutyPtr and AlertChannelPagerdutyPtrOutput values.
// You can construct a concrete instance of `AlertChannelPagerdutyPtrInput` via:
//
//	        AlertChannelPagerdutyArgs{...}
//
//	or:
//
//	        nil
type AlertChannelPagerdutyPtrInput interface {
	pulumi.Input

	ToAlertChannelPagerdutyPtrOutput() AlertChannelPagerdutyPtrOutput
	ToAlertChannelPagerdutyPtrOutputWithContext(context.Context) AlertChannelPagerdutyPtrOutput
}

type alertChannelPagerdutyPtrType AlertChannelPagerdutyArgs

func AlertChannelPagerdutyPtr(v *AlertChannelPagerdutyArgs) AlertChannelPagerdutyPtrInput {
	return (*alertChannelPagerdutyPtrType)(v)
}

func (*alertChannelPagerdutyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelPagerduty)(nil)).Elem()
}

func (i *alertChannelPagerdutyPtrType) ToAlertChannelPagerdutyPtrOutput() AlertChannelPagerdutyPtrOutput {
	return i.ToAlertChannelPagerdutyPtrOutputWithContext(context.Background())
}

func (i *alertChannelPagerdutyPtrType) ToAlertChannelPagerdutyPtrOutputWithContext(ctx context.Context) AlertChannelPagerdutyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelPagerdutyPtrOutput)
}

type AlertChannelPagerdutyOutput struct{ *pulumi.OutputState }

func (AlertChannelPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelPagerduty)(nil)).Elem()
}

func (o AlertChannelPagerdutyOutput) ToAlertChannelPagerdutyOutput() AlertChannelPagerdutyOutput {
	return o
}

func (o AlertChannelPagerdutyOutput) ToAlertChannelPagerdutyOutputWithContext(ctx context.Context) AlertChannelPagerdutyOutput {
	return o
}

func (o AlertChannelPagerdutyOutput) ToAlertChannelPagerdutyPtrOutput() AlertChannelPagerdutyPtrOutput {
	return o.ToAlertChannelPagerdutyPtrOutputWithContext(context.Background())
}

func (o AlertChannelPagerdutyOutput) ToAlertChannelPagerdutyPtrOutputWithContext(ctx context.Context) AlertChannelPagerdutyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelPagerduty) *AlertChannelPagerduty {
		return &v
	}).(AlertChannelPagerdutyPtrOutput)
}

func (o AlertChannelPagerdutyOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelPagerduty) *string { return v.Account }).(pulumi.StringPtrOutput)
}

func (o AlertChannelPagerdutyOutput) ServiceKey() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelPagerduty) string { return v.ServiceKey }).(pulumi.StringOutput)
}

func (o AlertChannelPagerdutyOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelPagerduty) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type AlertChannelPagerdutyPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelPagerdutyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelPagerduty)(nil)).Elem()
}

func (o AlertChannelPagerdutyPtrOutput) ToAlertChannelPagerdutyPtrOutput() AlertChannelPagerdutyPtrOutput {
	return o
}

func (o AlertChannelPagerdutyPtrOutput) ToAlertChannelPagerdutyPtrOutputWithContext(ctx context.Context) AlertChannelPagerdutyPtrOutput {
	return o
}

func (o AlertChannelPagerdutyPtrOutput) Elem() AlertChannelPagerdutyOutput {
	return o.ApplyT(func(v *AlertChannelPagerduty) AlertChannelPagerduty {
		if v != nil {
			return *v
		}
		var ret AlertChannelPagerduty
		return ret
	}).(AlertChannelPagerdutyOutput)
}

func (o AlertChannelPagerdutyPtrOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelPagerduty) *string {
		if v == nil {
			return nil
		}
		return v.Account
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelPagerdutyPtrOutput) ServiceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelPagerduty) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceKey
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelPagerdutyPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelPagerduty) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

type AlertChannelSlack struct {
	// The name of the alert's Slack channel
	Channel string `pulumi:"channel"`
	// The Slack webhook URL
	Url string `pulumi:"url"`
}

// AlertChannelSlackInput is an input type that accepts AlertChannelSlackArgs and AlertChannelSlackOutput values.
// You can construct a concrete instance of `AlertChannelSlackInput` via:
//
//	AlertChannelSlackArgs{...}
type AlertChannelSlackInput interface {
	pulumi.Input

	ToAlertChannelSlackOutput() AlertChannelSlackOutput
	ToAlertChannelSlackOutputWithContext(context.Context) AlertChannelSlackOutput
}

type AlertChannelSlackArgs struct {
	// The name of the alert's Slack channel
	Channel pulumi.StringInput `pulumi:"channel"`
	// The Slack webhook URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (AlertChannelSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelSlack)(nil)).Elem()
}

func (i AlertChannelSlackArgs) ToAlertChannelSlackOutput() AlertChannelSlackOutput {
	return i.ToAlertChannelSlackOutputWithContext(context.Background())
}

func (i AlertChannelSlackArgs) ToAlertChannelSlackOutputWithContext(ctx context.Context) AlertChannelSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelSlackOutput)
}

func (i AlertChannelSlackArgs) ToAlertChannelSlackPtrOutput() AlertChannelSlackPtrOutput {
	return i.ToAlertChannelSlackPtrOutputWithContext(context.Background())
}

func (i AlertChannelSlackArgs) ToAlertChannelSlackPtrOutputWithContext(ctx context.Context) AlertChannelSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelSlackOutput).ToAlertChannelSlackPtrOutputWithContext(ctx)
}

// AlertChannelSlackPtrInput is an input type that accepts AlertChannelSlackArgs, AlertChannelSlackPtr and AlertChannelSlackPtrOutput values.
// You can construct a concrete instance of `AlertChannelSlackPtrInput` via:
//
//	        AlertChannelSlackArgs{...}
//
//	or:
//
//	        nil
type AlertChannelSlackPtrInput interface {
	pulumi.Input

	ToAlertChannelSlackPtrOutput() AlertChannelSlackPtrOutput
	ToAlertChannelSlackPtrOutputWithContext(context.Context) AlertChannelSlackPtrOutput
}

type alertChannelSlackPtrType AlertChannelSlackArgs

func AlertChannelSlackPtr(v *AlertChannelSlackArgs) AlertChannelSlackPtrInput {
	return (*alertChannelSlackPtrType)(v)
}

func (*alertChannelSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelSlack)(nil)).Elem()
}

func (i *alertChannelSlackPtrType) ToAlertChannelSlackPtrOutput() AlertChannelSlackPtrOutput {
	return i.ToAlertChannelSlackPtrOutputWithContext(context.Background())
}

func (i *alertChannelSlackPtrType) ToAlertChannelSlackPtrOutputWithContext(ctx context.Context) AlertChannelSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelSlackPtrOutput)
}

type AlertChannelSlackOutput struct{ *pulumi.OutputState }

func (AlertChannelSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelSlack)(nil)).Elem()
}

func (o AlertChannelSlackOutput) ToAlertChannelSlackOutput() AlertChannelSlackOutput {
	return o
}

func (o AlertChannelSlackOutput) ToAlertChannelSlackOutputWithContext(ctx context.Context) AlertChannelSlackOutput {
	return o
}

func (o AlertChannelSlackOutput) ToAlertChannelSlackPtrOutput() AlertChannelSlackPtrOutput {
	return o.ToAlertChannelSlackPtrOutputWithContext(context.Background())
}

func (o AlertChannelSlackOutput) ToAlertChannelSlackPtrOutputWithContext(ctx context.Context) AlertChannelSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelSlack) *AlertChannelSlack {
		return &v
	}).(AlertChannelSlackPtrOutput)
}

// The name of the alert's Slack channel
func (o AlertChannelSlackOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelSlack) string { return v.Channel }).(pulumi.StringOutput)
}

// The Slack webhook URL
func (o AlertChannelSlackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelSlack) string { return v.Url }).(pulumi.StringOutput)
}

type AlertChannelSlackPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelSlack)(nil)).Elem()
}

func (o AlertChannelSlackPtrOutput) ToAlertChannelSlackPtrOutput() AlertChannelSlackPtrOutput {
	return o
}

func (o AlertChannelSlackPtrOutput) ToAlertChannelSlackPtrOutputWithContext(ctx context.Context) AlertChannelSlackPtrOutput {
	return o
}

func (o AlertChannelSlackPtrOutput) Elem() AlertChannelSlackOutput {
	return o.ApplyT(func(v *AlertChannelSlack) AlertChannelSlack {
		if v != nil {
			return *v
		}
		var ret AlertChannelSlack
		return ret
	}).(AlertChannelSlackOutput)
}

// The name of the alert's Slack channel
func (o AlertChannelSlackPtrOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelSlack) *string {
		if v == nil {
			return nil
		}
		return &v.Channel
	}).(pulumi.StringPtrOutput)
}

// The Slack webhook URL
func (o AlertChannelSlackPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelSlack) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type AlertChannelSms struct {
	// The name of this alert channel
	Name string `pulumi:"name"`
	// The mobile number to receive the alerts
	Number string `pulumi:"number"`
}

// AlertChannelSmsInput is an input type that accepts AlertChannelSmsArgs and AlertChannelSmsOutput values.
// You can construct a concrete instance of `AlertChannelSmsInput` via:
//
//	AlertChannelSmsArgs{...}
type AlertChannelSmsInput interface {
	pulumi.Input

	ToAlertChannelSmsOutput() AlertChannelSmsOutput
	ToAlertChannelSmsOutputWithContext(context.Context) AlertChannelSmsOutput
}

type AlertChannelSmsArgs struct {
	// The name of this alert channel
	Name pulumi.StringInput `pulumi:"name"`
	// The mobile number to receive the alerts
	Number pulumi.StringInput `pulumi:"number"`
}

func (AlertChannelSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelSms)(nil)).Elem()
}

func (i AlertChannelSmsArgs) ToAlertChannelSmsOutput() AlertChannelSmsOutput {
	return i.ToAlertChannelSmsOutputWithContext(context.Background())
}

func (i AlertChannelSmsArgs) ToAlertChannelSmsOutputWithContext(ctx context.Context) AlertChannelSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelSmsOutput)
}

func (i AlertChannelSmsArgs) ToAlertChannelSmsPtrOutput() AlertChannelSmsPtrOutput {
	return i.ToAlertChannelSmsPtrOutputWithContext(context.Background())
}

func (i AlertChannelSmsArgs) ToAlertChannelSmsPtrOutputWithContext(ctx context.Context) AlertChannelSmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelSmsOutput).ToAlertChannelSmsPtrOutputWithContext(ctx)
}

// AlertChannelSmsPtrInput is an input type that accepts AlertChannelSmsArgs, AlertChannelSmsPtr and AlertChannelSmsPtrOutput values.
// You can construct a concrete instance of `AlertChannelSmsPtrInput` via:
//
//	        AlertChannelSmsArgs{...}
//
//	or:
//
//	        nil
type AlertChannelSmsPtrInput interface {
	pulumi.Input

	ToAlertChannelSmsPtrOutput() AlertChannelSmsPtrOutput
	ToAlertChannelSmsPtrOutputWithContext(context.Context) AlertChannelSmsPtrOutput
}

type alertChannelSmsPtrType AlertChannelSmsArgs

func AlertChannelSmsPtr(v *AlertChannelSmsArgs) AlertChannelSmsPtrInput {
	return (*alertChannelSmsPtrType)(v)
}

func (*alertChannelSmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelSms)(nil)).Elem()
}

func (i *alertChannelSmsPtrType) ToAlertChannelSmsPtrOutput() AlertChannelSmsPtrOutput {
	return i.ToAlertChannelSmsPtrOutputWithContext(context.Background())
}

func (i *alertChannelSmsPtrType) ToAlertChannelSmsPtrOutputWithContext(ctx context.Context) AlertChannelSmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelSmsPtrOutput)
}

type AlertChannelSmsOutput struct{ *pulumi.OutputState }

func (AlertChannelSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelSms)(nil)).Elem()
}

func (o AlertChannelSmsOutput) ToAlertChannelSmsOutput() AlertChannelSmsOutput {
	return o
}

func (o AlertChannelSmsOutput) ToAlertChannelSmsOutputWithContext(ctx context.Context) AlertChannelSmsOutput {
	return o
}

func (o AlertChannelSmsOutput) ToAlertChannelSmsPtrOutput() AlertChannelSmsPtrOutput {
	return o.ToAlertChannelSmsPtrOutputWithContext(context.Background())
}

func (o AlertChannelSmsOutput) ToAlertChannelSmsPtrOutputWithContext(ctx context.Context) AlertChannelSmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelSms) *AlertChannelSms {
		return &v
	}).(AlertChannelSmsPtrOutput)
}

// The name of this alert channel
func (o AlertChannelSmsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelSms) string { return v.Name }).(pulumi.StringOutput)
}

// The mobile number to receive the alerts
func (o AlertChannelSmsOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelSms) string { return v.Number }).(pulumi.StringOutput)
}

type AlertChannelSmsPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelSmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelSms)(nil)).Elem()
}

func (o AlertChannelSmsPtrOutput) ToAlertChannelSmsPtrOutput() AlertChannelSmsPtrOutput {
	return o
}

func (o AlertChannelSmsPtrOutput) ToAlertChannelSmsPtrOutputWithContext(ctx context.Context) AlertChannelSmsPtrOutput {
	return o
}

func (o AlertChannelSmsPtrOutput) Elem() AlertChannelSmsOutput {
	return o.ApplyT(func(v *AlertChannelSms) AlertChannelSms {
		if v != nil {
			return *v
		}
		var ret AlertChannelSms
		return ret
	}).(AlertChannelSmsOutput)
}

// The name of this alert channel
func (o AlertChannelSmsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelSms) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The mobile number to receive the alerts
func (o AlertChannelSmsPtrOutput) Number() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelSms) *string {
		if v == nil {
			return nil
		}
		return &v.Number
	}).(pulumi.StringPtrOutput)
}

type AlertChannelWebhook struct {
	Headers map[string]string `pulumi:"headers"`
	// (Default `POST`)
	Method          *string           `pulumi:"method"`
	Name            string            `pulumi:"name"`
	QueryParameters map[string]string `pulumi:"queryParameters"`
	Template        *string           `pulumi:"template"`
	Url             string            `pulumi:"url"`
	WebhookSecret   *string           `pulumi:"webhookSecret"`
	// Type of the webhook. Possible values are 'WEBHOOK*DISCORD', 'WEBHOOK*FIREHYDRANT', 'WEBHOOK*GITLAB*ALERT', 'WEBHOOK*SPIKESH', 'WEBHOOK*SPLUNK', 'WEBHOOK*MSTEAMS' and 'WEBHOOK*TELEGRAM'.
	WebhookType *string `pulumi:"webhookType"`
}

// AlertChannelWebhookInput is an input type that accepts AlertChannelWebhookArgs and AlertChannelWebhookOutput values.
// You can construct a concrete instance of `AlertChannelWebhookInput` via:
//
//	AlertChannelWebhookArgs{...}
type AlertChannelWebhookInput interface {
	pulumi.Input

	ToAlertChannelWebhookOutput() AlertChannelWebhookOutput
	ToAlertChannelWebhookOutputWithContext(context.Context) AlertChannelWebhookOutput
}

type AlertChannelWebhookArgs struct {
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// (Default `POST`)
	Method          pulumi.StringPtrInput `pulumi:"method"`
	Name            pulumi.StringInput    `pulumi:"name"`
	QueryParameters pulumi.StringMapInput `pulumi:"queryParameters"`
	Template        pulumi.StringPtrInput `pulumi:"template"`
	Url             pulumi.StringInput    `pulumi:"url"`
	WebhookSecret   pulumi.StringPtrInput `pulumi:"webhookSecret"`
	// Type of the webhook. Possible values are 'WEBHOOK*DISCORD', 'WEBHOOK*FIREHYDRANT', 'WEBHOOK*GITLAB*ALERT', 'WEBHOOK*SPIKESH', 'WEBHOOK*SPLUNK', 'WEBHOOK*MSTEAMS' and 'WEBHOOK*TELEGRAM'.
	WebhookType pulumi.StringPtrInput `pulumi:"webhookType"`
}

func (AlertChannelWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelWebhook)(nil)).Elem()
}

func (i AlertChannelWebhookArgs) ToAlertChannelWebhookOutput() AlertChannelWebhookOutput {
	return i.ToAlertChannelWebhookOutputWithContext(context.Background())
}

func (i AlertChannelWebhookArgs) ToAlertChannelWebhookOutputWithContext(ctx context.Context) AlertChannelWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelWebhookOutput)
}

func (i AlertChannelWebhookArgs) ToAlertChannelWebhookPtrOutput() AlertChannelWebhookPtrOutput {
	return i.ToAlertChannelWebhookPtrOutputWithContext(context.Background())
}

func (i AlertChannelWebhookArgs) ToAlertChannelWebhookPtrOutputWithContext(ctx context.Context) AlertChannelWebhookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelWebhookOutput).ToAlertChannelWebhookPtrOutputWithContext(ctx)
}

// AlertChannelWebhookPtrInput is an input type that accepts AlertChannelWebhookArgs, AlertChannelWebhookPtr and AlertChannelWebhookPtrOutput values.
// You can construct a concrete instance of `AlertChannelWebhookPtrInput` via:
//
//	        AlertChannelWebhookArgs{...}
//
//	or:
//
//	        nil
type AlertChannelWebhookPtrInput interface {
	pulumi.Input

	ToAlertChannelWebhookPtrOutput() AlertChannelWebhookPtrOutput
	ToAlertChannelWebhookPtrOutputWithContext(context.Context) AlertChannelWebhookPtrOutput
}

type alertChannelWebhookPtrType AlertChannelWebhookArgs

func AlertChannelWebhookPtr(v *AlertChannelWebhookArgs) AlertChannelWebhookPtrInput {
	return (*alertChannelWebhookPtrType)(v)
}

func (*alertChannelWebhookPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelWebhook)(nil)).Elem()
}

func (i *alertChannelWebhookPtrType) ToAlertChannelWebhookPtrOutput() AlertChannelWebhookPtrOutput {
	return i.ToAlertChannelWebhookPtrOutputWithContext(context.Background())
}

func (i *alertChannelWebhookPtrType) ToAlertChannelWebhookPtrOutputWithContext(ctx context.Context) AlertChannelWebhookPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertChannelWebhookPtrOutput)
}

type AlertChannelWebhookOutput struct{ *pulumi.OutputState }

func (AlertChannelWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertChannelWebhook)(nil)).Elem()
}

func (o AlertChannelWebhookOutput) ToAlertChannelWebhookOutput() AlertChannelWebhookOutput {
	return o
}

func (o AlertChannelWebhookOutput) ToAlertChannelWebhookOutputWithContext(ctx context.Context) AlertChannelWebhookOutput {
	return o
}

func (o AlertChannelWebhookOutput) ToAlertChannelWebhookPtrOutput() AlertChannelWebhookPtrOutput {
	return o.ToAlertChannelWebhookPtrOutputWithContext(context.Background())
}

func (o AlertChannelWebhookOutput) ToAlertChannelWebhookPtrOutputWithContext(ctx context.Context) AlertChannelWebhookPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertChannelWebhook) *AlertChannelWebhook {
		return &v
	}).(AlertChannelWebhookPtrOutput)
}

func (o AlertChannelWebhookOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelWebhook) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// (Default `POST`)
func (o AlertChannelWebhookOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelWebhook) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o AlertChannelWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelWebhook) string { return v.Name }).(pulumi.StringOutput)
}

func (o AlertChannelWebhookOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertChannelWebhook) map[string]string { return v.QueryParameters }).(pulumi.StringMapOutput)
}

func (o AlertChannelWebhookOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelWebhook) *string { return v.Template }).(pulumi.StringPtrOutput)
}

func (o AlertChannelWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v AlertChannelWebhook) string { return v.Url }).(pulumi.StringOutput)
}

func (o AlertChannelWebhookOutput) WebhookSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelWebhook) *string { return v.WebhookSecret }).(pulumi.StringPtrOutput)
}

// Type of the webhook. Possible values are 'WEBHOOK*DISCORD', 'WEBHOOK*FIREHYDRANT', 'WEBHOOK*GITLAB*ALERT', 'WEBHOOK*SPIKESH', 'WEBHOOK*SPLUNK', 'WEBHOOK*MSTEAMS' and 'WEBHOOK*TELEGRAM'.
func (o AlertChannelWebhookOutput) WebhookType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertChannelWebhook) *string { return v.WebhookType }).(pulumi.StringPtrOutput)
}

type AlertChannelWebhookPtrOutput struct{ *pulumi.OutputState }

func (AlertChannelWebhookPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertChannelWebhook)(nil)).Elem()
}

func (o AlertChannelWebhookPtrOutput) ToAlertChannelWebhookPtrOutput() AlertChannelWebhookPtrOutput {
	return o
}

func (o AlertChannelWebhookPtrOutput) ToAlertChannelWebhookPtrOutputWithContext(ctx context.Context) AlertChannelWebhookPtrOutput {
	return o
}

func (o AlertChannelWebhookPtrOutput) Elem() AlertChannelWebhookOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) AlertChannelWebhook {
		if v != nil {
			return *v
		}
		var ret AlertChannelWebhook
		return ret
	}).(AlertChannelWebhookOutput)
}

func (o AlertChannelWebhookPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// (Default `POST`)
func (o AlertChannelWebhookPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelWebhookPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelWebhookPtrOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) map[string]string {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.StringMapOutput)
}

func (o AlertChannelWebhookPtrOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) *string {
		if v == nil {
			return nil
		}
		return v.Template
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelWebhookPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

func (o AlertChannelWebhookPtrOutput) WebhookSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecret
	}).(pulumi.StringPtrOutput)
}

// Type of the webhook. Possible values are 'WEBHOOK*DISCORD', 'WEBHOOK*FIREHYDRANT', 'WEBHOOK*GITLAB*ALERT', 'WEBHOOK*SPIKESH', 'WEBHOOK*SPLUNK', 'WEBHOOK*MSTEAMS' and 'WEBHOOK*TELEGRAM'.
func (o AlertChannelWebhookPtrOutput) WebhookType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertChannelWebhook) *string {
		if v == nil {
			return nil
		}
		return v.WebhookType
	}).(pulumi.StringPtrOutput)
}

type CheckAlertChannelSubscription struct {
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// CheckAlertChannelSubscriptionInput is an input type that accepts CheckAlertChannelSubscriptionArgs and CheckAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `CheckAlertChannelSubscriptionInput` via:
//
//	CheckAlertChannelSubscriptionArgs{...}
type CheckAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToCheckAlertChannelSubscriptionOutput() CheckAlertChannelSubscriptionOutput
	ToCheckAlertChannelSubscriptionOutputWithContext(context.Context) CheckAlertChannelSubscriptionOutput
}

type CheckAlertChannelSubscriptionArgs struct {
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (CheckAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertChannelSubscription)(nil)).Elem()
}

func (i CheckAlertChannelSubscriptionArgs) ToCheckAlertChannelSubscriptionOutput() CheckAlertChannelSubscriptionOutput {
	return i.ToCheckAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i CheckAlertChannelSubscriptionArgs) ToCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertChannelSubscriptionOutput)
}

// CheckAlertChannelSubscriptionArrayInput is an input type that accepts CheckAlertChannelSubscriptionArray and CheckAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `CheckAlertChannelSubscriptionArrayInput` via:
//
//	CheckAlertChannelSubscriptionArray{ CheckAlertChannelSubscriptionArgs{...} }
type CheckAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToCheckAlertChannelSubscriptionArrayOutput() CheckAlertChannelSubscriptionArrayOutput
	ToCheckAlertChannelSubscriptionArrayOutputWithContext(context.Context) CheckAlertChannelSubscriptionArrayOutput
}

type CheckAlertChannelSubscriptionArray []CheckAlertChannelSubscriptionInput

func (CheckAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertChannelSubscription)(nil)).Elem()
}

func (i CheckAlertChannelSubscriptionArray) ToCheckAlertChannelSubscriptionArrayOutput() CheckAlertChannelSubscriptionArrayOutput {
	return i.ToCheckAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i CheckAlertChannelSubscriptionArray) ToCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertChannelSubscriptionArrayOutput)
}

type CheckAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (CheckAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertChannelSubscription)(nil)).Elem()
}

func (o CheckAlertChannelSubscriptionOutput) ToCheckAlertChannelSubscriptionOutput() CheckAlertChannelSubscriptionOutput {
	return o
}

func (o CheckAlertChannelSubscriptionOutput) ToCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionOutput {
	return o
}

func (o CheckAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v CheckAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o CheckAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v CheckAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type CheckAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertChannelSubscription)(nil)).Elem()
}

func (o CheckAlertChannelSubscriptionArrayOutput) ToCheckAlertChannelSubscriptionArrayOutput() CheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o CheckAlertChannelSubscriptionArrayOutput) ToCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) CheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o CheckAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) CheckAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertChannelSubscription {
		return vs[0].([]CheckAlertChannelSubscription)[vs[1].(int)]
	}).(CheckAlertChannelSubscriptionOutput)
}

type CheckAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               *string                                         `pulumi:"escalationType"`
	ParallelRunFailureThresholds []CheckAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	Reminders                    []CheckAlertSettingsReminder                    `pulumi:"reminders"`
	RunBasedEscalations          []CheckAlertSettingsRunBasedEscalation          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      []CheckAlertSettingsSslCertificate      `pulumi:"sslCertificates"`
	TimeBasedEscalations []CheckAlertSettingsTimeBasedEscalation `pulumi:"timeBasedEscalations"`
}

// CheckAlertSettingsInput is an input type that accepts CheckAlertSettingsArgs and CheckAlertSettingsOutput values.
// You can construct a concrete instance of `CheckAlertSettingsInput` via:
//
//	CheckAlertSettingsArgs{...}
type CheckAlertSettingsInput interface {
	pulumi.Input

	ToCheckAlertSettingsOutput() CheckAlertSettingsOutput
	ToCheckAlertSettingsOutputWithContext(context.Context) CheckAlertSettingsOutput
}

type CheckAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               pulumi.StringPtrInput                                   `pulumi:"escalationType"`
	ParallelRunFailureThresholds CheckAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	Reminders                    CheckAlertSettingsReminderArrayInput                    `pulumi:"reminders"`
	RunBasedEscalations          CheckAlertSettingsRunBasedEscalationArrayInput          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      CheckAlertSettingsSslCertificateArrayInput      `pulumi:"sslCertificates"`
	TimeBasedEscalations CheckAlertSettingsTimeBasedEscalationArrayInput `pulumi:"timeBasedEscalations"`
}

func (CheckAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettings)(nil)).Elem()
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsOutput() CheckAlertSettingsOutput {
	return i.ToCheckAlertSettingsOutputWithContext(context.Background())
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsOutputWithContext(ctx context.Context) CheckAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsOutput)
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return i.ToCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i CheckAlertSettingsArgs) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsOutput).ToCheckAlertSettingsPtrOutputWithContext(ctx)
}

// CheckAlertSettingsPtrInput is an input type that accepts CheckAlertSettingsArgs, CheckAlertSettingsPtr and CheckAlertSettingsPtrOutput values.
// You can construct a concrete instance of `CheckAlertSettingsPtrInput` via:
//
//	        CheckAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type CheckAlertSettingsPtrInput interface {
	pulumi.Input

	ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput
	ToCheckAlertSettingsPtrOutputWithContext(context.Context) CheckAlertSettingsPtrOutput
}

type checkAlertSettingsPtrType CheckAlertSettingsArgs

func CheckAlertSettingsPtr(v *CheckAlertSettingsArgs) CheckAlertSettingsPtrInput {
	return (*checkAlertSettingsPtrType)(v)
}

func (*checkAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckAlertSettings)(nil)).Elem()
}

func (i *checkAlertSettingsPtrType) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return i.ToCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *checkAlertSettingsPtrType) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsPtrOutput)
}

type CheckAlertSettingsOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettings)(nil)).Elem()
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsOutput() CheckAlertSettingsOutput {
	return o
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsOutputWithContext(ctx context.Context) CheckAlertSettingsOutput {
	return o
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return o.ToCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (o CheckAlertSettingsOutput) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckAlertSettings) *CheckAlertSettings {
		return &v
	}).(CheckAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o CheckAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

func (o CheckAlertSettingsOutput) ParallelRunFailureThresholds() CheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(CheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o CheckAlertSettingsOutput) Reminders() CheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsReminder { return v.Reminders }).(CheckAlertSettingsReminderArrayOutput)
}

func (o CheckAlertSettingsOutput) RunBasedEscalations() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsRunBasedEscalation { return v.RunBasedEscalations }).(CheckAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o CheckAlertSettingsOutput) SslCertificates() CheckAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsSslCertificate { return v.SslCertificates }).(CheckAlertSettingsSslCertificateArrayOutput)
}

func (o CheckAlertSettingsOutput) TimeBasedEscalations() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v CheckAlertSettings) []CheckAlertSettingsTimeBasedEscalation { return v.TimeBasedEscalations }).(CheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckAlertSettings)(nil)).Elem()
}

func (o CheckAlertSettingsPtrOutput) ToCheckAlertSettingsPtrOutput() CheckAlertSettingsPtrOutput {
	return o
}

func (o CheckAlertSettingsPtrOutput) ToCheckAlertSettingsPtrOutputWithContext(ctx context.Context) CheckAlertSettingsPtrOutput {
	return o
}

func (o CheckAlertSettingsPtrOutput) Elem() CheckAlertSettingsOutput {
	return o.ApplyT(func(v *CheckAlertSettings) CheckAlertSettings {
		if v != nil {
			return *v
		}
		var ret CheckAlertSettings
		return ret
	}).(CheckAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o CheckAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

func (o CheckAlertSettingsPtrOutput) ParallelRunFailureThresholds() CheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(CheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o CheckAlertSettingsPtrOutput) Reminders() CheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(CheckAlertSettingsReminderArrayOutput)
}

func (o CheckAlertSettingsPtrOutput) RunBasedEscalations() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(CheckAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o CheckAlertSettingsPtrOutput) SslCertificates() CheckAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsSslCertificate {
		if v == nil {
			return nil
		}
		return v.SslCertificates
	}).(CheckAlertSettingsSslCertificateArrayOutput)
}

func (o CheckAlertSettingsPtrOutput) TimeBasedEscalations() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *CheckAlertSettings) []CheckAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(CheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckAlertSettingsParallelRunFailureThreshold struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled *bool `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// CheckAlertSettingsParallelRunFailureThresholdInput is an input type that accepts CheckAlertSettingsParallelRunFailureThresholdArgs and CheckAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `CheckAlertSettingsParallelRunFailureThresholdInput` via:
//
//	CheckAlertSettingsParallelRunFailureThresholdArgs{...}
type CheckAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToCheckAlertSettingsParallelRunFailureThresholdOutput() CheckAlertSettingsParallelRunFailureThresholdOutput
	ToCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) CheckAlertSettingsParallelRunFailureThresholdOutput
}

type CheckAlertSettingsParallelRunFailureThresholdArgs struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (CheckAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i CheckAlertSettingsParallelRunFailureThresholdArgs) ToCheckAlertSettingsParallelRunFailureThresholdOutput() CheckAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i CheckAlertSettingsParallelRunFailureThresholdArgs) ToCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) CheckAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsParallelRunFailureThresholdOutput)
}

// CheckAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts CheckAlertSettingsParallelRunFailureThresholdArray and CheckAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	CheckAlertSettingsParallelRunFailureThresholdArray{ CheckAlertSettingsParallelRunFailureThresholdArgs{...} }
type CheckAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsParallelRunFailureThresholdArrayOutput() CheckAlertSettingsParallelRunFailureThresholdArrayOutput
	ToCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) CheckAlertSettingsParallelRunFailureThresholdArrayOutput
}

type CheckAlertSettingsParallelRunFailureThresholdArray []CheckAlertSettingsParallelRunFailureThresholdInput

func (CheckAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i CheckAlertSettingsParallelRunFailureThresholdArray) ToCheckAlertSettingsParallelRunFailureThresholdArrayOutput() CheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsParallelRunFailureThresholdArray) ToCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) CheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type CheckAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o CheckAlertSettingsParallelRunFailureThresholdOutput) ToCheckAlertSettingsParallelRunFailureThresholdOutput() CheckAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o CheckAlertSettingsParallelRunFailureThresholdOutput) ToCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) CheckAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Applicable only for checks scheduled in parallel in multiple locations.
func (o CheckAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
func (o CheckAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o CheckAlertSettingsParallelRunFailureThresholdArrayOutput) ToCheckAlertSettingsParallelRunFailureThresholdArrayOutput() CheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o CheckAlertSettingsParallelRunFailureThresholdArrayOutput) ToCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) CheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o CheckAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]CheckAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(CheckAlertSettingsParallelRunFailureThresholdOutput)
}

type CheckAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// CheckAlertSettingsReminderInput is an input type that accepts CheckAlertSettingsReminderArgs and CheckAlertSettingsReminderOutput values.
// You can construct a concrete instance of `CheckAlertSettingsReminderInput` via:
//
//	CheckAlertSettingsReminderArgs{...}
type CheckAlertSettingsReminderInput interface {
	pulumi.Input

	ToCheckAlertSettingsReminderOutput() CheckAlertSettingsReminderOutput
	ToCheckAlertSettingsReminderOutputWithContext(context.Context) CheckAlertSettingsReminderOutput
}

type CheckAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (CheckAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsReminder)(nil)).Elem()
}

func (i CheckAlertSettingsReminderArgs) ToCheckAlertSettingsReminderOutput() CheckAlertSettingsReminderOutput {
	return i.ToCheckAlertSettingsReminderOutputWithContext(context.Background())
}

func (i CheckAlertSettingsReminderArgs) ToCheckAlertSettingsReminderOutputWithContext(ctx context.Context) CheckAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsReminderOutput)
}

// CheckAlertSettingsReminderArrayInput is an input type that accepts CheckAlertSettingsReminderArray and CheckAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsReminderArrayInput` via:
//
//	CheckAlertSettingsReminderArray{ CheckAlertSettingsReminderArgs{...} }
type CheckAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsReminderArrayOutput() CheckAlertSettingsReminderArrayOutput
	ToCheckAlertSettingsReminderArrayOutputWithContext(context.Context) CheckAlertSettingsReminderArrayOutput
}

type CheckAlertSettingsReminderArray []CheckAlertSettingsReminderInput

func (CheckAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsReminder)(nil)).Elem()
}

func (i CheckAlertSettingsReminderArray) ToCheckAlertSettingsReminderArrayOutput() CheckAlertSettingsReminderArrayOutput {
	return i.ToCheckAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsReminderArray) ToCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) CheckAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsReminderArrayOutput)
}

type CheckAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsReminder)(nil)).Elem()
}

func (o CheckAlertSettingsReminderOutput) ToCheckAlertSettingsReminderOutput() CheckAlertSettingsReminderOutput {
	return o
}

func (o CheckAlertSettingsReminderOutput) ToCheckAlertSettingsReminderOutputWithContext(ctx context.Context) CheckAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o CheckAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o CheckAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsReminder)(nil)).Elem()
}

func (o CheckAlertSettingsReminderArrayOutput) ToCheckAlertSettingsReminderArrayOutput() CheckAlertSettingsReminderArrayOutput {
	return o
}

func (o CheckAlertSettingsReminderArrayOutput) ToCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) CheckAlertSettingsReminderArrayOutput {
	return o
}

func (o CheckAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsReminder {
		return vs[0].([]CheckAlertSettingsReminder)[vs[1].(int)]
	}).(CheckAlertSettingsReminderOutput)
}

type CheckAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// CheckAlertSettingsRunBasedEscalationInput is an input type that accepts CheckAlertSettingsRunBasedEscalationArgs and CheckAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `CheckAlertSettingsRunBasedEscalationInput` via:
//
//	CheckAlertSettingsRunBasedEscalationArgs{...}
type CheckAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToCheckAlertSettingsRunBasedEscalationOutput() CheckAlertSettingsRunBasedEscalationOutput
	ToCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Context) CheckAlertSettingsRunBasedEscalationOutput
}

type CheckAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (CheckAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsRunBasedEscalationArgs) ToCheckAlertSettingsRunBasedEscalationOutput() CheckAlertSettingsRunBasedEscalationOutput {
	return i.ToCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i CheckAlertSettingsRunBasedEscalationArgs) ToCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsRunBasedEscalationOutput)
}

// CheckAlertSettingsRunBasedEscalationArrayInput is an input type that accepts CheckAlertSettingsRunBasedEscalationArray and CheckAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsRunBasedEscalationArrayInput` via:
//
//	CheckAlertSettingsRunBasedEscalationArray{ CheckAlertSettingsRunBasedEscalationArgs{...} }
type CheckAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsRunBasedEscalationArrayOutput() CheckAlertSettingsRunBasedEscalationArrayOutput
	ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) CheckAlertSettingsRunBasedEscalationArrayOutput
}

type CheckAlertSettingsRunBasedEscalationArray []CheckAlertSettingsRunBasedEscalationInput

func (CheckAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsRunBasedEscalationArray) ToCheckAlertSettingsRunBasedEscalationArrayOutput() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsRunBasedEscalationArray) ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsRunBasedEscalationArrayOutput)
}

type CheckAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsRunBasedEscalationOutput) ToCheckAlertSettingsRunBasedEscalationOutput() CheckAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o CheckAlertSettingsRunBasedEscalationOutput) ToCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
func (o CheckAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsRunBasedEscalationArrayOutput) ToCheckAlertSettingsRunBasedEscalationArrayOutput() CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsRunBasedEscalationArrayOutput) ToCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsRunBasedEscalation {
		return vs[0].([]CheckAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(CheckAlertSettingsRunBasedEscalationOutput)
}

type CheckAlertSettingsSslCertificate struct {
	// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold *int `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
	Enabled *bool `pulumi:"enabled"`
}

// CheckAlertSettingsSslCertificateInput is an input type that accepts CheckAlertSettingsSslCertificateArgs and CheckAlertSettingsSslCertificateOutput values.
// You can construct a concrete instance of `CheckAlertSettingsSslCertificateInput` via:
//
//	CheckAlertSettingsSslCertificateArgs{...}
type CheckAlertSettingsSslCertificateInput interface {
	pulumi.Input

	ToCheckAlertSettingsSslCertificateOutput() CheckAlertSettingsSslCertificateOutput
	ToCheckAlertSettingsSslCertificateOutputWithContext(context.Context) CheckAlertSettingsSslCertificateOutput
}

type CheckAlertSettingsSslCertificateArgs struct {
	// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold pulumi.IntPtrInput `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (CheckAlertSettingsSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (i CheckAlertSettingsSslCertificateArgs) ToCheckAlertSettingsSslCertificateOutput() CheckAlertSettingsSslCertificateOutput {
	return i.ToCheckAlertSettingsSslCertificateOutputWithContext(context.Background())
}

func (i CheckAlertSettingsSslCertificateArgs) ToCheckAlertSettingsSslCertificateOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsSslCertificateOutput)
}

// CheckAlertSettingsSslCertificateArrayInput is an input type that accepts CheckAlertSettingsSslCertificateArray and CheckAlertSettingsSslCertificateArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsSslCertificateArrayInput` via:
//
//	CheckAlertSettingsSslCertificateArray{ CheckAlertSettingsSslCertificateArgs{...} }
type CheckAlertSettingsSslCertificateArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsSslCertificateArrayOutput() CheckAlertSettingsSslCertificateArrayOutput
	ToCheckAlertSettingsSslCertificateArrayOutputWithContext(context.Context) CheckAlertSettingsSslCertificateArrayOutput
}

type CheckAlertSettingsSslCertificateArray []CheckAlertSettingsSslCertificateInput

func (CheckAlertSettingsSslCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (i CheckAlertSettingsSslCertificateArray) ToCheckAlertSettingsSslCertificateArrayOutput() CheckAlertSettingsSslCertificateArrayOutput {
	return i.ToCheckAlertSettingsSslCertificateArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsSslCertificateArray) ToCheckAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsSslCertificateArrayOutput)
}

type CheckAlertSettingsSslCertificateOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (o CheckAlertSettingsSslCertificateOutput) ToCheckAlertSettingsSslCertificateOutput() CheckAlertSettingsSslCertificateOutput {
	return o
}

func (o CheckAlertSettingsSslCertificateOutput) ToCheckAlertSettingsSslCertificateOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateOutput {
	return o
}

// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
func (o CheckAlertSettingsSslCertificateOutput) AlertThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsSslCertificate) *int { return v.AlertThreshold }).(pulumi.IntPtrOutput)
}

// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
func (o CheckAlertSettingsSslCertificateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsSslCertificate) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type CheckAlertSettingsSslCertificateArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsSslCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (o CheckAlertSettingsSslCertificateArrayOutput) ToCheckAlertSettingsSslCertificateArrayOutput() CheckAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o CheckAlertSettingsSslCertificateArrayOutput) ToCheckAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) CheckAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o CheckAlertSettingsSslCertificateArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsSslCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsSslCertificate {
		return vs[0].([]CheckAlertSettingsSslCertificate)[vs[1].(int)]
	}).(CheckAlertSettingsSslCertificateOutput)
}

type CheckAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// CheckAlertSettingsTimeBasedEscalationInput is an input type that accepts CheckAlertSettingsTimeBasedEscalationArgs and CheckAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `CheckAlertSettingsTimeBasedEscalationInput` via:
//
//	CheckAlertSettingsTimeBasedEscalationArgs{...}
type CheckAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToCheckAlertSettingsTimeBasedEscalationOutput() CheckAlertSettingsTimeBasedEscalationOutput
	ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) CheckAlertSettingsTimeBasedEscalationOutput
}

type CheckAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (CheckAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsTimeBasedEscalationArgs) ToCheckAlertSettingsTimeBasedEscalationOutput() CheckAlertSettingsTimeBasedEscalationOutput {
	return i.ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i CheckAlertSettingsTimeBasedEscalationArgs) ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsTimeBasedEscalationOutput)
}

// CheckAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts CheckAlertSettingsTimeBasedEscalationArray and CheckAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `CheckAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	CheckAlertSettingsTimeBasedEscalationArray{ CheckAlertSettingsTimeBasedEscalationArgs{...} }
type CheckAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToCheckAlertSettingsTimeBasedEscalationArrayOutput() CheckAlertSettingsTimeBasedEscalationArrayOutput
	ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) CheckAlertSettingsTimeBasedEscalationArrayOutput
}

type CheckAlertSettingsTimeBasedEscalationArray []CheckAlertSettingsTimeBasedEscalationInput

func (CheckAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i CheckAlertSettingsTimeBasedEscalationArray) ToCheckAlertSettingsTimeBasedEscalationArrayOutput() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i CheckAlertSettingsTimeBasedEscalationArray) ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsTimeBasedEscalationOutput) ToCheckAlertSettingsTimeBasedEscalationOutput() CheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o CheckAlertSettingsTimeBasedEscalationOutput) ToCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o CheckAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type CheckAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o CheckAlertSettingsTimeBasedEscalationArrayOutput) ToCheckAlertSettingsTimeBasedEscalationArrayOutput() CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsTimeBasedEscalationArrayOutput) ToCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) CheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o CheckAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) CheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckAlertSettingsTimeBasedEscalation {
		return vs[0].([]CheckAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(CheckAlertSettingsTimeBasedEscalationOutput)
}

type CheckEnvironmentVariable struct {
	Key    string `pulumi:"key"`
	Locked *bool  `pulumi:"locked"`
	Secret *bool  `pulumi:"secret"`
	Value  string `pulumi:"value"`
}

// CheckEnvironmentVariableInput is an input type that accepts CheckEnvironmentVariableArgs and CheckEnvironmentVariableOutput values.
// You can construct a concrete instance of `CheckEnvironmentVariableInput` via:
//
//	CheckEnvironmentVariableArgs{...}
type CheckEnvironmentVariableInput interface {
	pulumi.Input

	ToCheckEnvironmentVariableOutput() CheckEnvironmentVariableOutput
	ToCheckEnvironmentVariableOutputWithContext(context.Context) CheckEnvironmentVariableOutput
}

type CheckEnvironmentVariableArgs struct {
	Key    pulumi.StringInput  `pulumi:"key"`
	Locked pulumi.BoolPtrInput `pulumi:"locked"`
	Secret pulumi.BoolPtrInput `pulumi:"secret"`
	Value  pulumi.StringInput  `pulumi:"value"`
}

func (CheckEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckEnvironmentVariable)(nil)).Elem()
}

func (i CheckEnvironmentVariableArgs) ToCheckEnvironmentVariableOutput() CheckEnvironmentVariableOutput {
	return i.ToCheckEnvironmentVariableOutputWithContext(context.Background())
}

func (i CheckEnvironmentVariableArgs) ToCheckEnvironmentVariableOutputWithContext(ctx context.Context) CheckEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckEnvironmentVariableOutput)
}

// CheckEnvironmentVariableArrayInput is an input type that accepts CheckEnvironmentVariableArray and CheckEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `CheckEnvironmentVariableArrayInput` via:
//
//	CheckEnvironmentVariableArray{ CheckEnvironmentVariableArgs{...} }
type CheckEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToCheckEnvironmentVariableArrayOutput() CheckEnvironmentVariableArrayOutput
	ToCheckEnvironmentVariableArrayOutputWithContext(context.Context) CheckEnvironmentVariableArrayOutput
}

type CheckEnvironmentVariableArray []CheckEnvironmentVariableInput

func (CheckEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckEnvironmentVariable)(nil)).Elem()
}

func (i CheckEnvironmentVariableArray) ToCheckEnvironmentVariableArrayOutput() CheckEnvironmentVariableArrayOutput {
	return i.ToCheckEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i CheckEnvironmentVariableArray) ToCheckEnvironmentVariableArrayOutputWithContext(ctx context.Context) CheckEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckEnvironmentVariableArrayOutput)
}

type CheckEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (CheckEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckEnvironmentVariable)(nil)).Elem()
}

func (o CheckEnvironmentVariableOutput) ToCheckEnvironmentVariableOutput() CheckEnvironmentVariableOutput {
	return o
}

func (o CheckEnvironmentVariableOutput) ToCheckEnvironmentVariableOutputWithContext(ctx context.Context) CheckEnvironmentVariableOutput {
	return o
}

func (o CheckEnvironmentVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CheckEnvironmentVariable) string { return v.Key }).(pulumi.StringOutput)
}

func (o CheckEnvironmentVariableOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckEnvironmentVariable) *bool { return v.Locked }).(pulumi.BoolPtrOutput)
}

func (o CheckEnvironmentVariableOutput) Secret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckEnvironmentVariable) *bool { return v.Secret }).(pulumi.BoolPtrOutput)
}

func (o CheckEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CheckEnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

type CheckEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (CheckEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckEnvironmentVariable)(nil)).Elem()
}

func (o CheckEnvironmentVariableArrayOutput) ToCheckEnvironmentVariableArrayOutput() CheckEnvironmentVariableArrayOutput {
	return o
}

func (o CheckEnvironmentVariableArrayOutput) ToCheckEnvironmentVariableArrayOutputWithContext(ctx context.Context) CheckEnvironmentVariableArrayOutput {
	return o
}

func (o CheckEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) CheckEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckEnvironmentVariable {
		return vs[0].([]CheckEnvironmentVariable)[vs[1].(int)]
	}).(CheckEnvironmentVariableOutput)
}

type CheckGroupAlertChannelSubscription struct {
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// CheckGroupAlertChannelSubscriptionInput is an input type that accepts CheckGroupAlertChannelSubscriptionArgs and CheckGroupAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `CheckGroupAlertChannelSubscriptionInput` via:
//
//	CheckGroupAlertChannelSubscriptionArgs{...}
type CheckGroupAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToCheckGroupAlertChannelSubscriptionOutput() CheckGroupAlertChannelSubscriptionOutput
	ToCheckGroupAlertChannelSubscriptionOutputWithContext(context.Context) CheckGroupAlertChannelSubscriptionOutput
}

type CheckGroupAlertChannelSubscriptionArgs struct {
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (CheckGroupAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertChannelSubscription)(nil)).Elem()
}

func (i CheckGroupAlertChannelSubscriptionArgs) ToCheckGroupAlertChannelSubscriptionOutput() CheckGroupAlertChannelSubscriptionOutput {
	return i.ToCheckGroupAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i CheckGroupAlertChannelSubscriptionArgs) ToCheckGroupAlertChannelSubscriptionOutputWithContext(ctx context.Context) CheckGroupAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertChannelSubscriptionOutput)
}

// CheckGroupAlertChannelSubscriptionArrayInput is an input type that accepts CheckGroupAlertChannelSubscriptionArray and CheckGroupAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `CheckGroupAlertChannelSubscriptionArrayInput` via:
//
//	CheckGroupAlertChannelSubscriptionArray{ CheckGroupAlertChannelSubscriptionArgs{...} }
type CheckGroupAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToCheckGroupAlertChannelSubscriptionArrayOutput() CheckGroupAlertChannelSubscriptionArrayOutput
	ToCheckGroupAlertChannelSubscriptionArrayOutputWithContext(context.Context) CheckGroupAlertChannelSubscriptionArrayOutput
}

type CheckGroupAlertChannelSubscriptionArray []CheckGroupAlertChannelSubscriptionInput

func (CheckGroupAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertChannelSubscription)(nil)).Elem()
}

func (i CheckGroupAlertChannelSubscriptionArray) ToCheckGroupAlertChannelSubscriptionArrayOutput() CheckGroupAlertChannelSubscriptionArrayOutput {
	return i.ToCheckGroupAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i CheckGroupAlertChannelSubscriptionArray) ToCheckGroupAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) CheckGroupAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertChannelSubscriptionArrayOutput)
}

type CheckGroupAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertChannelSubscription)(nil)).Elem()
}

func (o CheckGroupAlertChannelSubscriptionOutput) ToCheckGroupAlertChannelSubscriptionOutput() CheckGroupAlertChannelSubscriptionOutput {
	return o
}

func (o CheckGroupAlertChannelSubscriptionOutput) ToCheckGroupAlertChannelSubscriptionOutputWithContext(ctx context.Context) CheckGroupAlertChannelSubscriptionOutput {
	return o
}

func (o CheckGroupAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v CheckGroupAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o CheckGroupAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v CheckGroupAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type CheckGroupAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertChannelSubscription)(nil)).Elem()
}

func (o CheckGroupAlertChannelSubscriptionArrayOutput) ToCheckGroupAlertChannelSubscriptionArrayOutput() CheckGroupAlertChannelSubscriptionArrayOutput {
	return o
}

func (o CheckGroupAlertChannelSubscriptionArrayOutput) ToCheckGroupAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) CheckGroupAlertChannelSubscriptionArrayOutput {
	return o
}

func (o CheckGroupAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) CheckGroupAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupAlertChannelSubscription {
		return vs[0].([]CheckGroupAlertChannelSubscription)[vs[1].(int)]
	}).(CheckGroupAlertChannelSubscriptionOutput)
}

type CheckGroupAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               *string                                              `pulumi:"escalationType"`
	ParallelRunFailureThresholds []CheckGroupAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	Reminders                    []CheckGroupAlertSettingsReminder                    `pulumi:"reminders"`
	RunBasedEscalations          []CheckGroupAlertSettingsRunBasedEscalation          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      []CheckGroupAlertSettingsSslCertificate      `pulumi:"sslCertificates"`
	TimeBasedEscalations []CheckGroupAlertSettingsTimeBasedEscalation `pulumi:"timeBasedEscalations"`
}

// CheckGroupAlertSettingsInput is an input type that accepts CheckGroupAlertSettingsArgs and CheckGroupAlertSettingsOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsInput` via:
//
//	CheckGroupAlertSettingsArgs{...}
type CheckGroupAlertSettingsInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsOutput() CheckGroupAlertSettingsOutput
	ToCheckGroupAlertSettingsOutputWithContext(context.Context) CheckGroupAlertSettingsOutput
}

type CheckGroupAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               pulumi.StringPtrInput                                        `pulumi:"escalationType"`
	ParallelRunFailureThresholds CheckGroupAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	Reminders                    CheckGroupAlertSettingsReminderArrayInput                    `pulumi:"reminders"`
	RunBasedEscalations          CheckGroupAlertSettingsRunBasedEscalationArrayInput          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      CheckGroupAlertSettingsSslCertificateArrayInput      `pulumi:"sslCertificates"`
	TimeBasedEscalations CheckGroupAlertSettingsTimeBasedEscalationArrayInput `pulumi:"timeBasedEscalations"`
}

func (CheckGroupAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettings)(nil)).Elem()
}

func (i CheckGroupAlertSettingsArgs) ToCheckGroupAlertSettingsOutput() CheckGroupAlertSettingsOutput {
	return i.ToCheckGroupAlertSettingsOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsArgs) ToCheckGroupAlertSettingsOutputWithContext(ctx context.Context) CheckGroupAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsOutput)
}

func (i CheckGroupAlertSettingsArgs) ToCheckGroupAlertSettingsPtrOutput() CheckGroupAlertSettingsPtrOutput {
	return i.ToCheckGroupAlertSettingsPtrOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsArgs) ToCheckGroupAlertSettingsPtrOutputWithContext(ctx context.Context) CheckGroupAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsOutput).ToCheckGroupAlertSettingsPtrOutputWithContext(ctx)
}

// CheckGroupAlertSettingsPtrInput is an input type that accepts CheckGroupAlertSettingsArgs, CheckGroupAlertSettingsPtr and CheckGroupAlertSettingsPtrOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsPtrInput` via:
//
//	        CheckGroupAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type CheckGroupAlertSettingsPtrInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsPtrOutput() CheckGroupAlertSettingsPtrOutput
	ToCheckGroupAlertSettingsPtrOutputWithContext(context.Context) CheckGroupAlertSettingsPtrOutput
}

type checkGroupAlertSettingsPtrType CheckGroupAlertSettingsArgs

func CheckGroupAlertSettingsPtr(v *CheckGroupAlertSettingsArgs) CheckGroupAlertSettingsPtrInput {
	return (*checkGroupAlertSettingsPtrType)(v)
}

func (*checkGroupAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupAlertSettings)(nil)).Elem()
}

func (i *checkGroupAlertSettingsPtrType) ToCheckGroupAlertSettingsPtrOutput() CheckGroupAlertSettingsPtrOutput {
	return i.ToCheckGroupAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *checkGroupAlertSettingsPtrType) ToCheckGroupAlertSettingsPtrOutputWithContext(ctx context.Context) CheckGroupAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsPtrOutput)
}

type CheckGroupAlertSettingsOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettings)(nil)).Elem()
}

func (o CheckGroupAlertSettingsOutput) ToCheckGroupAlertSettingsOutput() CheckGroupAlertSettingsOutput {
	return o
}

func (o CheckGroupAlertSettingsOutput) ToCheckGroupAlertSettingsOutputWithContext(ctx context.Context) CheckGroupAlertSettingsOutput {
	return o
}

func (o CheckGroupAlertSettingsOutput) ToCheckGroupAlertSettingsPtrOutput() CheckGroupAlertSettingsPtrOutput {
	return o.ToCheckGroupAlertSettingsPtrOutputWithContext(context.Background())
}

func (o CheckGroupAlertSettingsOutput) ToCheckGroupAlertSettingsPtrOutputWithContext(ctx context.Context) CheckGroupAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckGroupAlertSettings) *CheckGroupAlertSettings {
		return &v
	}).(CheckGroupAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o CheckGroupAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

func (o CheckGroupAlertSettingsOutput) ParallelRunFailureThresholds() CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v CheckGroupAlertSettings) []CheckGroupAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o CheckGroupAlertSettingsOutput) Reminders() CheckGroupAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v CheckGroupAlertSettings) []CheckGroupAlertSettingsReminder { return v.Reminders }).(CheckGroupAlertSettingsReminderArrayOutput)
}

func (o CheckGroupAlertSettingsOutput) RunBasedEscalations() CheckGroupAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v CheckGroupAlertSettings) []CheckGroupAlertSettingsRunBasedEscalation {
		return v.RunBasedEscalations
	}).(CheckGroupAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o CheckGroupAlertSettingsOutput) SslCertificates() CheckGroupAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v CheckGroupAlertSettings) []CheckGroupAlertSettingsSslCertificate { return v.SslCertificates }).(CheckGroupAlertSettingsSslCertificateArrayOutput)
}

func (o CheckGroupAlertSettingsOutput) TimeBasedEscalations() CheckGroupAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v CheckGroupAlertSettings) []CheckGroupAlertSettingsTimeBasedEscalation {
		return v.TimeBasedEscalations
	}).(CheckGroupAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckGroupAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupAlertSettings)(nil)).Elem()
}

func (o CheckGroupAlertSettingsPtrOutput) ToCheckGroupAlertSettingsPtrOutput() CheckGroupAlertSettingsPtrOutput {
	return o
}

func (o CheckGroupAlertSettingsPtrOutput) ToCheckGroupAlertSettingsPtrOutputWithContext(ctx context.Context) CheckGroupAlertSettingsPtrOutput {
	return o
}

func (o CheckGroupAlertSettingsPtrOutput) Elem() CheckGroupAlertSettingsOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) CheckGroupAlertSettings {
		if v != nil {
			return *v
		}
		var ret CheckGroupAlertSettings
		return ret
	}).(CheckGroupAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o CheckGroupAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

func (o CheckGroupAlertSettingsPtrOutput) ParallelRunFailureThresholds() CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) []CheckGroupAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o CheckGroupAlertSettingsPtrOutput) Reminders() CheckGroupAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) []CheckGroupAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(CheckGroupAlertSettingsReminderArrayOutput)
}

func (o CheckGroupAlertSettingsPtrOutput) RunBasedEscalations() CheckGroupAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) []CheckGroupAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(CheckGroupAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o CheckGroupAlertSettingsPtrOutput) SslCertificates() CheckGroupAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) []CheckGroupAlertSettingsSslCertificate {
		if v == nil {
			return nil
		}
		return v.SslCertificates
	}).(CheckGroupAlertSettingsSslCertificateArrayOutput)
}

func (o CheckGroupAlertSettingsPtrOutput) TimeBasedEscalations() CheckGroupAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *CheckGroupAlertSettings) []CheckGroupAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(CheckGroupAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckGroupAlertSettingsParallelRunFailureThreshold struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled *bool `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// CheckGroupAlertSettingsParallelRunFailureThresholdInput is an input type that accepts CheckGroupAlertSettingsParallelRunFailureThresholdArgs and CheckGroupAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsParallelRunFailureThresholdInput` via:
//
//	CheckGroupAlertSettingsParallelRunFailureThresholdArgs{...}
type CheckGroupAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsParallelRunFailureThresholdOutput() CheckGroupAlertSettingsParallelRunFailureThresholdOutput
	ToCheckGroupAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) CheckGroupAlertSettingsParallelRunFailureThresholdOutput
}

type CheckGroupAlertSettingsParallelRunFailureThresholdArgs struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (CheckGroupAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i CheckGroupAlertSettingsParallelRunFailureThresholdArgs) ToCheckGroupAlertSettingsParallelRunFailureThresholdOutput() CheckGroupAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToCheckGroupAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsParallelRunFailureThresholdArgs) ToCheckGroupAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) CheckGroupAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsParallelRunFailureThresholdOutput)
}

// CheckGroupAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts CheckGroupAlertSettingsParallelRunFailureThresholdArray and CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	CheckGroupAlertSettingsParallelRunFailureThresholdArray{ CheckGroupAlertSettingsParallelRunFailureThresholdArgs{...} }
type CheckGroupAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput() CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput
	ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput
}

type CheckGroupAlertSettingsParallelRunFailureThresholdArray []CheckGroupAlertSettingsParallelRunFailureThresholdInput

func (CheckGroupAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i CheckGroupAlertSettingsParallelRunFailureThresholdArray) ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput() CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsParallelRunFailureThresholdArray) ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type CheckGroupAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o CheckGroupAlertSettingsParallelRunFailureThresholdOutput) ToCheckGroupAlertSettingsParallelRunFailureThresholdOutput() CheckGroupAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o CheckGroupAlertSettingsParallelRunFailureThresholdOutput) ToCheckGroupAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) CheckGroupAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Applicable only for checks scheduled in parallel in multiple locations.
func (o CheckGroupAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
func (o CheckGroupAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput) ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput() CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput) ToCheckGroupAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) CheckGroupAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]CheckGroupAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(CheckGroupAlertSettingsParallelRunFailureThresholdOutput)
}

type CheckGroupAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// CheckGroupAlertSettingsReminderInput is an input type that accepts CheckGroupAlertSettingsReminderArgs and CheckGroupAlertSettingsReminderOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsReminderInput` via:
//
//	CheckGroupAlertSettingsReminderArgs{...}
type CheckGroupAlertSettingsReminderInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsReminderOutput() CheckGroupAlertSettingsReminderOutput
	ToCheckGroupAlertSettingsReminderOutputWithContext(context.Context) CheckGroupAlertSettingsReminderOutput
}

type CheckGroupAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (CheckGroupAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsReminder)(nil)).Elem()
}

func (i CheckGroupAlertSettingsReminderArgs) ToCheckGroupAlertSettingsReminderOutput() CheckGroupAlertSettingsReminderOutput {
	return i.ToCheckGroupAlertSettingsReminderOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsReminderArgs) ToCheckGroupAlertSettingsReminderOutputWithContext(ctx context.Context) CheckGroupAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsReminderOutput)
}

// CheckGroupAlertSettingsReminderArrayInput is an input type that accepts CheckGroupAlertSettingsReminderArray and CheckGroupAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsReminderArrayInput` via:
//
//	CheckGroupAlertSettingsReminderArray{ CheckGroupAlertSettingsReminderArgs{...} }
type CheckGroupAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsReminderArrayOutput() CheckGroupAlertSettingsReminderArrayOutput
	ToCheckGroupAlertSettingsReminderArrayOutputWithContext(context.Context) CheckGroupAlertSettingsReminderArrayOutput
}

type CheckGroupAlertSettingsReminderArray []CheckGroupAlertSettingsReminderInput

func (CheckGroupAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsReminder)(nil)).Elem()
}

func (i CheckGroupAlertSettingsReminderArray) ToCheckGroupAlertSettingsReminderArrayOutput() CheckGroupAlertSettingsReminderArrayOutput {
	return i.ToCheckGroupAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsReminderArray) ToCheckGroupAlertSettingsReminderArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsReminderArrayOutput)
}

type CheckGroupAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsReminder)(nil)).Elem()
}

func (o CheckGroupAlertSettingsReminderOutput) ToCheckGroupAlertSettingsReminderOutput() CheckGroupAlertSettingsReminderOutput {
	return o
}

func (o CheckGroupAlertSettingsReminderOutput) ToCheckGroupAlertSettingsReminderOutputWithContext(ctx context.Context) CheckGroupAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o CheckGroupAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o CheckGroupAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type CheckGroupAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsReminder)(nil)).Elem()
}

func (o CheckGroupAlertSettingsReminderArrayOutput) ToCheckGroupAlertSettingsReminderArrayOutput() CheckGroupAlertSettingsReminderArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsReminderArrayOutput) ToCheckGroupAlertSettingsReminderArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsReminderArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) CheckGroupAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupAlertSettingsReminder {
		return vs[0].([]CheckGroupAlertSettingsReminder)[vs[1].(int)]
	}).(CheckGroupAlertSettingsReminderOutput)
}

type CheckGroupAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// CheckGroupAlertSettingsRunBasedEscalationInput is an input type that accepts CheckGroupAlertSettingsRunBasedEscalationArgs and CheckGroupAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsRunBasedEscalationInput` via:
//
//	CheckGroupAlertSettingsRunBasedEscalationArgs{...}
type CheckGroupAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsRunBasedEscalationOutput() CheckGroupAlertSettingsRunBasedEscalationOutput
	ToCheckGroupAlertSettingsRunBasedEscalationOutputWithContext(context.Context) CheckGroupAlertSettingsRunBasedEscalationOutput
}

type CheckGroupAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (CheckGroupAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i CheckGroupAlertSettingsRunBasedEscalationArgs) ToCheckGroupAlertSettingsRunBasedEscalationOutput() CheckGroupAlertSettingsRunBasedEscalationOutput {
	return i.ToCheckGroupAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsRunBasedEscalationArgs) ToCheckGroupAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) CheckGroupAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsRunBasedEscalationOutput)
}

// CheckGroupAlertSettingsRunBasedEscalationArrayInput is an input type that accepts CheckGroupAlertSettingsRunBasedEscalationArray and CheckGroupAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsRunBasedEscalationArrayInput` via:
//
//	CheckGroupAlertSettingsRunBasedEscalationArray{ CheckGroupAlertSettingsRunBasedEscalationArgs{...} }
type CheckGroupAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsRunBasedEscalationArrayOutput() CheckGroupAlertSettingsRunBasedEscalationArrayOutput
	ToCheckGroupAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) CheckGroupAlertSettingsRunBasedEscalationArrayOutput
}

type CheckGroupAlertSettingsRunBasedEscalationArray []CheckGroupAlertSettingsRunBasedEscalationInput

func (CheckGroupAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i CheckGroupAlertSettingsRunBasedEscalationArray) ToCheckGroupAlertSettingsRunBasedEscalationArrayOutput() CheckGroupAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToCheckGroupAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsRunBasedEscalationArray) ToCheckGroupAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsRunBasedEscalationArrayOutput)
}

type CheckGroupAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o CheckGroupAlertSettingsRunBasedEscalationOutput) ToCheckGroupAlertSettingsRunBasedEscalationOutput() CheckGroupAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o CheckGroupAlertSettingsRunBasedEscalationOutput) ToCheckGroupAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) CheckGroupAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
func (o CheckGroupAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type CheckGroupAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o CheckGroupAlertSettingsRunBasedEscalationArrayOutput) ToCheckGroupAlertSettingsRunBasedEscalationArrayOutput() CheckGroupAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsRunBasedEscalationArrayOutput) ToCheckGroupAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) CheckGroupAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupAlertSettingsRunBasedEscalation {
		return vs[0].([]CheckGroupAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(CheckGroupAlertSettingsRunBasedEscalationOutput)
}

type CheckGroupAlertSettingsSslCertificate struct {
	// At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold *int `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates.
	Enabled *bool `pulumi:"enabled"`
}

// CheckGroupAlertSettingsSslCertificateInput is an input type that accepts CheckGroupAlertSettingsSslCertificateArgs and CheckGroupAlertSettingsSslCertificateOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsSslCertificateInput` via:
//
//	CheckGroupAlertSettingsSslCertificateArgs{...}
type CheckGroupAlertSettingsSslCertificateInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsSslCertificateOutput() CheckGroupAlertSettingsSslCertificateOutput
	ToCheckGroupAlertSettingsSslCertificateOutputWithContext(context.Context) CheckGroupAlertSettingsSslCertificateOutput
}

type CheckGroupAlertSettingsSslCertificateArgs struct {
	// At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold pulumi.IntPtrInput `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (CheckGroupAlertSettingsSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsSslCertificate)(nil)).Elem()
}

func (i CheckGroupAlertSettingsSslCertificateArgs) ToCheckGroupAlertSettingsSslCertificateOutput() CheckGroupAlertSettingsSslCertificateOutput {
	return i.ToCheckGroupAlertSettingsSslCertificateOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsSslCertificateArgs) ToCheckGroupAlertSettingsSslCertificateOutputWithContext(ctx context.Context) CheckGroupAlertSettingsSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsSslCertificateOutput)
}

// CheckGroupAlertSettingsSslCertificateArrayInput is an input type that accepts CheckGroupAlertSettingsSslCertificateArray and CheckGroupAlertSettingsSslCertificateArrayOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsSslCertificateArrayInput` via:
//
//	CheckGroupAlertSettingsSslCertificateArray{ CheckGroupAlertSettingsSslCertificateArgs{...} }
type CheckGroupAlertSettingsSslCertificateArrayInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsSslCertificateArrayOutput() CheckGroupAlertSettingsSslCertificateArrayOutput
	ToCheckGroupAlertSettingsSslCertificateArrayOutputWithContext(context.Context) CheckGroupAlertSettingsSslCertificateArrayOutput
}

type CheckGroupAlertSettingsSslCertificateArray []CheckGroupAlertSettingsSslCertificateInput

func (CheckGroupAlertSettingsSslCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsSslCertificate)(nil)).Elem()
}

func (i CheckGroupAlertSettingsSslCertificateArray) ToCheckGroupAlertSettingsSslCertificateArrayOutput() CheckGroupAlertSettingsSslCertificateArrayOutput {
	return i.ToCheckGroupAlertSettingsSslCertificateArrayOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsSslCertificateArray) ToCheckGroupAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsSslCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsSslCertificateArrayOutput)
}

type CheckGroupAlertSettingsSslCertificateOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsSslCertificate)(nil)).Elem()
}

func (o CheckGroupAlertSettingsSslCertificateOutput) ToCheckGroupAlertSettingsSslCertificateOutput() CheckGroupAlertSettingsSslCertificateOutput {
	return o
}

func (o CheckGroupAlertSettingsSslCertificateOutput) ToCheckGroupAlertSettingsSslCertificateOutputWithContext(ctx context.Context) CheckGroupAlertSettingsSslCertificateOutput {
	return o
}

// At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. (Default `3`).
func (o CheckGroupAlertSettingsSslCertificateOutput) AlertThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsSslCertificate) *int { return v.AlertThreshold }).(pulumi.IntPtrOutput)
}

// Determines if alert notifications should be sent for expiring SSL certificates.
func (o CheckGroupAlertSettingsSslCertificateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsSslCertificate) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type CheckGroupAlertSettingsSslCertificateArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsSslCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsSslCertificate)(nil)).Elem()
}

func (o CheckGroupAlertSettingsSslCertificateArrayOutput) ToCheckGroupAlertSettingsSslCertificateArrayOutput() CheckGroupAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsSslCertificateArrayOutput) ToCheckGroupAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsSslCertificateArrayOutput) Index(i pulumi.IntInput) CheckGroupAlertSettingsSslCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupAlertSettingsSslCertificate {
		return vs[0].([]CheckGroupAlertSettingsSslCertificate)[vs[1].(int)]
	}).(CheckGroupAlertSettingsSslCertificateOutput)
}

type CheckGroupAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// CheckGroupAlertSettingsTimeBasedEscalationInput is an input type that accepts CheckGroupAlertSettingsTimeBasedEscalationArgs and CheckGroupAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsTimeBasedEscalationInput` via:
//
//	CheckGroupAlertSettingsTimeBasedEscalationArgs{...}
type CheckGroupAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsTimeBasedEscalationOutput() CheckGroupAlertSettingsTimeBasedEscalationOutput
	ToCheckGroupAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) CheckGroupAlertSettingsTimeBasedEscalationOutput
}

type CheckGroupAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (CheckGroupAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i CheckGroupAlertSettingsTimeBasedEscalationArgs) ToCheckGroupAlertSettingsTimeBasedEscalationOutput() CheckGroupAlertSettingsTimeBasedEscalationOutput {
	return i.ToCheckGroupAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsTimeBasedEscalationArgs) ToCheckGroupAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) CheckGroupAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsTimeBasedEscalationOutput)
}

// CheckGroupAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts CheckGroupAlertSettingsTimeBasedEscalationArray and CheckGroupAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `CheckGroupAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	CheckGroupAlertSettingsTimeBasedEscalationArray{ CheckGroupAlertSettingsTimeBasedEscalationArgs{...} }
type CheckGroupAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutput() CheckGroupAlertSettingsTimeBasedEscalationArrayOutput
	ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) CheckGroupAlertSettingsTimeBasedEscalationArrayOutput
}

type CheckGroupAlertSettingsTimeBasedEscalationArray []CheckGroupAlertSettingsTimeBasedEscalationInput

func (CheckGroupAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i CheckGroupAlertSettingsTimeBasedEscalationArray) ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutput() CheckGroupAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i CheckGroupAlertSettingsTimeBasedEscalationArray) ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupAlertSettingsTimeBasedEscalationArrayOutput)
}

type CheckGroupAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o CheckGroupAlertSettingsTimeBasedEscalationOutput) ToCheckGroupAlertSettingsTimeBasedEscalationOutput() CheckGroupAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o CheckGroupAlertSettingsTimeBasedEscalationOutput) ToCheckGroupAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) CheckGroupAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o CheckGroupAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type CheckGroupAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o CheckGroupAlertSettingsTimeBasedEscalationArrayOutput) ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutput() CheckGroupAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsTimeBasedEscalationArrayOutput) ToCheckGroupAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) CheckGroupAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o CheckGroupAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) CheckGroupAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupAlertSettingsTimeBasedEscalation {
		return vs[0].([]CheckGroupAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(CheckGroupAlertSettingsTimeBasedEscalationOutput)
}

type CheckGroupApiCheckDefaults struct {
	Assertions      []CheckGroupApiCheckDefaultsAssertion `pulumi:"assertions"`
	BasicAuth       *CheckGroupApiCheckDefaultsBasicAuth  `pulumi:"basicAuth"`
	Headers         map[string]string                     `pulumi:"headers"`
	QueryParameters map[string]string                     `pulumi:"queryParameters"`
	// The base url for this group which you can reference with the `GROUP_BASE_URL` variable in all group checks.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for CheckGroupApiCheckDefaults
func (val *CheckGroupApiCheckDefaults) Defaults() *CheckGroupApiCheckDefaults {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Url == nil {
		url_ := ""
		tmp.Url = &url_
	}
	return &tmp
}

// CheckGroupApiCheckDefaultsInput is an input type that accepts CheckGroupApiCheckDefaultsArgs and CheckGroupApiCheckDefaultsOutput values.
// You can construct a concrete instance of `CheckGroupApiCheckDefaultsInput` via:
//
//	CheckGroupApiCheckDefaultsArgs{...}
type CheckGroupApiCheckDefaultsInput interface {
	pulumi.Input

	ToCheckGroupApiCheckDefaultsOutput() CheckGroupApiCheckDefaultsOutput
	ToCheckGroupApiCheckDefaultsOutputWithContext(context.Context) CheckGroupApiCheckDefaultsOutput
}

type CheckGroupApiCheckDefaultsArgs struct {
	Assertions      CheckGroupApiCheckDefaultsAssertionArrayInput `pulumi:"assertions"`
	BasicAuth       CheckGroupApiCheckDefaultsBasicAuthPtrInput   `pulumi:"basicAuth"`
	Headers         pulumi.StringMapInput                         `pulumi:"headers"`
	QueryParameters pulumi.StringMapInput                         `pulumi:"queryParameters"`
	// The base url for this group which you can reference with the `GROUP_BASE_URL` variable in all group checks.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for CheckGroupApiCheckDefaultsArgs
func (val *CheckGroupApiCheckDefaultsArgs) Defaults() *CheckGroupApiCheckDefaultsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Url == nil {
		tmp.Url = pulumi.StringPtr("")
	}
	return &tmp
}
func (CheckGroupApiCheckDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupApiCheckDefaults)(nil)).Elem()
}

func (i CheckGroupApiCheckDefaultsArgs) ToCheckGroupApiCheckDefaultsOutput() CheckGroupApiCheckDefaultsOutput {
	return i.ToCheckGroupApiCheckDefaultsOutputWithContext(context.Background())
}

func (i CheckGroupApiCheckDefaultsArgs) ToCheckGroupApiCheckDefaultsOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsOutput)
}

func (i CheckGroupApiCheckDefaultsArgs) ToCheckGroupApiCheckDefaultsPtrOutput() CheckGroupApiCheckDefaultsPtrOutput {
	return i.ToCheckGroupApiCheckDefaultsPtrOutputWithContext(context.Background())
}

func (i CheckGroupApiCheckDefaultsArgs) ToCheckGroupApiCheckDefaultsPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsOutput).ToCheckGroupApiCheckDefaultsPtrOutputWithContext(ctx)
}

// CheckGroupApiCheckDefaultsPtrInput is an input type that accepts CheckGroupApiCheckDefaultsArgs, CheckGroupApiCheckDefaultsPtr and CheckGroupApiCheckDefaultsPtrOutput values.
// You can construct a concrete instance of `CheckGroupApiCheckDefaultsPtrInput` via:
//
//	        CheckGroupApiCheckDefaultsArgs{...}
//
//	or:
//
//	        nil
type CheckGroupApiCheckDefaultsPtrInput interface {
	pulumi.Input

	ToCheckGroupApiCheckDefaultsPtrOutput() CheckGroupApiCheckDefaultsPtrOutput
	ToCheckGroupApiCheckDefaultsPtrOutputWithContext(context.Context) CheckGroupApiCheckDefaultsPtrOutput
}

type checkGroupApiCheckDefaultsPtrType CheckGroupApiCheckDefaultsArgs

func CheckGroupApiCheckDefaultsPtr(v *CheckGroupApiCheckDefaultsArgs) CheckGroupApiCheckDefaultsPtrInput {
	return (*checkGroupApiCheckDefaultsPtrType)(v)
}

func (*checkGroupApiCheckDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupApiCheckDefaults)(nil)).Elem()
}

func (i *checkGroupApiCheckDefaultsPtrType) ToCheckGroupApiCheckDefaultsPtrOutput() CheckGroupApiCheckDefaultsPtrOutput {
	return i.ToCheckGroupApiCheckDefaultsPtrOutputWithContext(context.Background())
}

func (i *checkGroupApiCheckDefaultsPtrType) ToCheckGroupApiCheckDefaultsPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsPtrOutput)
}

type CheckGroupApiCheckDefaultsOutput struct{ *pulumi.OutputState }

func (CheckGroupApiCheckDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupApiCheckDefaults)(nil)).Elem()
}

func (o CheckGroupApiCheckDefaultsOutput) ToCheckGroupApiCheckDefaultsOutput() CheckGroupApiCheckDefaultsOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsOutput) ToCheckGroupApiCheckDefaultsOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsOutput) ToCheckGroupApiCheckDefaultsPtrOutput() CheckGroupApiCheckDefaultsPtrOutput {
	return o.ToCheckGroupApiCheckDefaultsPtrOutputWithContext(context.Background())
}

func (o CheckGroupApiCheckDefaultsOutput) ToCheckGroupApiCheckDefaultsPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckGroupApiCheckDefaults) *CheckGroupApiCheckDefaults {
		return &v
	}).(CheckGroupApiCheckDefaultsPtrOutput)
}

func (o CheckGroupApiCheckDefaultsOutput) Assertions() CheckGroupApiCheckDefaultsAssertionArrayOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaults) []CheckGroupApiCheckDefaultsAssertion { return v.Assertions }).(CheckGroupApiCheckDefaultsAssertionArrayOutput)
}

func (o CheckGroupApiCheckDefaultsOutput) BasicAuth() CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaults) *CheckGroupApiCheckDefaultsBasicAuth { return v.BasicAuth }).(CheckGroupApiCheckDefaultsBasicAuthPtrOutput)
}

func (o CheckGroupApiCheckDefaultsOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaults) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

func (o CheckGroupApiCheckDefaultsOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaults) map[string]string { return v.QueryParameters }).(pulumi.StringMapOutput)
}

// The base url for this group which you can reference with the `GROUP_BASE_URL` variable in all group checks.
func (o CheckGroupApiCheckDefaultsOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaults) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type CheckGroupApiCheckDefaultsPtrOutput struct{ *pulumi.OutputState }

func (CheckGroupApiCheckDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupApiCheckDefaults)(nil)).Elem()
}

func (o CheckGroupApiCheckDefaultsPtrOutput) ToCheckGroupApiCheckDefaultsPtrOutput() CheckGroupApiCheckDefaultsPtrOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsPtrOutput) ToCheckGroupApiCheckDefaultsPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsPtrOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsPtrOutput) Elem() CheckGroupApiCheckDefaultsOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaults) CheckGroupApiCheckDefaults {
		if v != nil {
			return *v
		}
		var ret CheckGroupApiCheckDefaults
		return ret
	}).(CheckGroupApiCheckDefaultsOutput)
}

func (o CheckGroupApiCheckDefaultsPtrOutput) Assertions() CheckGroupApiCheckDefaultsAssertionArrayOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaults) []CheckGroupApiCheckDefaultsAssertion {
		if v == nil {
			return nil
		}
		return v.Assertions
	}).(CheckGroupApiCheckDefaultsAssertionArrayOutput)
}

func (o CheckGroupApiCheckDefaultsPtrOutput) BasicAuth() CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaults) *CheckGroupApiCheckDefaultsBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(CheckGroupApiCheckDefaultsBasicAuthPtrOutput)
}

func (o CheckGroupApiCheckDefaultsPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

func (o CheckGroupApiCheckDefaultsPtrOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaults) map[string]string {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.StringMapOutput)
}

// The base url for this group which you can reference with the `GROUP_BASE_URL` variable in all group checks.
func (o CheckGroupApiCheckDefaultsPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaults) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type CheckGroupApiCheckDefaultsAssertion struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison string  `pulumi:"comparison"`
	Property   *string `pulumi:"property"`
	// The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
	Source string `pulumi:"source"`
	Target string `pulumi:"target"`
}

// CheckGroupApiCheckDefaultsAssertionInput is an input type that accepts CheckGroupApiCheckDefaultsAssertionArgs and CheckGroupApiCheckDefaultsAssertionOutput values.
// You can construct a concrete instance of `CheckGroupApiCheckDefaultsAssertionInput` via:
//
//	CheckGroupApiCheckDefaultsAssertionArgs{...}
type CheckGroupApiCheckDefaultsAssertionInput interface {
	pulumi.Input

	ToCheckGroupApiCheckDefaultsAssertionOutput() CheckGroupApiCheckDefaultsAssertionOutput
	ToCheckGroupApiCheckDefaultsAssertionOutputWithContext(context.Context) CheckGroupApiCheckDefaultsAssertionOutput
}

type CheckGroupApiCheckDefaultsAssertionArgs struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison pulumi.StringInput    `pulumi:"comparison"`
	Property   pulumi.StringPtrInput `pulumi:"property"`
	// The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
	Source pulumi.StringInput `pulumi:"source"`
	Target pulumi.StringInput `pulumi:"target"`
}

func (CheckGroupApiCheckDefaultsAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupApiCheckDefaultsAssertion)(nil)).Elem()
}

func (i CheckGroupApiCheckDefaultsAssertionArgs) ToCheckGroupApiCheckDefaultsAssertionOutput() CheckGroupApiCheckDefaultsAssertionOutput {
	return i.ToCheckGroupApiCheckDefaultsAssertionOutputWithContext(context.Background())
}

func (i CheckGroupApiCheckDefaultsAssertionArgs) ToCheckGroupApiCheckDefaultsAssertionOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsAssertionOutput)
}

// CheckGroupApiCheckDefaultsAssertionArrayInput is an input type that accepts CheckGroupApiCheckDefaultsAssertionArray and CheckGroupApiCheckDefaultsAssertionArrayOutput values.
// You can construct a concrete instance of `CheckGroupApiCheckDefaultsAssertionArrayInput` via:
//
//	CheckGroupApiCheckDefaultsAssertionArray{ CheckGroupApiCheckDefaultsAssertionArgs{...} }
type CheckGroupApiCheckDefaultsAssertionArrayInput interface {
	pulumi.Input

	ToCheckGroupApiCheckDefaultsAssertionArrayOutput() CheckGroupApiCheckDefaultsAssertionArrayOutput
	ToCheckGroupApiCheckDefaultsAssertionArrayOutputWithContext(context.Context) CheckGroupApiCheckDefaultsAssertionArrayOutput
}

type CheckGroupApiCheckDefaultsAssertionArray []CheckGroupApiCheckDefaultsAssertionInput

func (CheckGroupApiCheckDefaultsAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupApiCheckDefaultsAssertion)(nil)).Elem()
}

func (i CheckGroupApiCheckDefaultsAssertionArray) ToCheckGroupApiCheckDefaultsAssertionArrayOutput() CheckGroupApiCheckDefaultsAssertionArrayOutput {
	return i.ToCheckGroupApiCheckDefaultsAssertionArrayOutputWithContext(context.Background())
}

func (i CheckGroupApiCheckDefaultsAssertionArray) ToCheckGroupApiCheckDefaultsAssertionArrayOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsAssertionArrayOutput)
}

type CheckGroupApiCheckDefaultsAssertionOutput struct{ *pulumi.OutputState }

func (CheckGroupApiCheckDefaultsAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupApiCheckDefaultsAssertion)(nil)).Elem()
}

func (o CheckGroupApiCheckDefaultsAssertionOutput) ToCheckGroupApiCheckDefaultsAssertionOutput() CheckGroupApiCheckDefaultsAssertionOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsAssertionOutput) ToCheckGroupApiCheckDefaultsAssertionOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsAssertionOutput {
	return o
}

// The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
func (o CheckGroupApiCheckDefaultsAssertionOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaultsAssertion) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o CheckGroupApiCheckDefaultsAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaultsAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
func (o CheckGroupApiCheckDefaultsAssertionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaultsAssertion) string { return v.Source }).(pulumi.StringOutput)
}

func (o CheckGroupApiCheckDefaultsAssertionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaultsAssertion) string { return v.Target }).(pulumi.StringOutput)
}

type CheckGroupApiCheckDefaultsAssertionArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupApiCheckDefaultsAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupApiCheckDefaultsAssertion)(nil)).Elem()
}

func (o CheckGroupApiCheckDefaultsAssertionArrayOutput) ToCheckGroupApiCheckDefaultsAssertionArrayOutput() CheckGroupApiCheckDefaultsAssertionArrayOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsAssertionArrayOutput) ToCheckGroupApiCheckDefaultsAssertionArrayOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsAssertionArrayOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsAssertionArrayOutput) Index(i pulumi.IntInput) CheckGroupApiCheckDefaultsAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupApiCheckDefaultsAssertion {
		return vs[0].([]CheckGroupApiCheckDefaultsAssertion)[vs[1].(int)]
	}).(CheckGroupApiCheckDefaultsAssertionOutput)
}

type CheckGroupApiCheckDefaultsBasicAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// CheckGroupApiCheckDefaultsBasicAuthInput is an input type that accepts CheckGroupApiCheckDefaultsBasicAuthArgs and CheckGroupApiCheckDefaultsBasicAuthOutput values.
// You can construct a concrete instance of `CheckGroupApiCheckDefaultsBasicAuthInput` via:
//
//	CheckGroupApiCheckDefaultsBasicAuthArgs{...}
type CheckGroupApiCheckDefaultsBasicAuthInput interface {
	pulumi.Input

	ToCheckGroupApiCheckDefaultsBasicAuthOutput() CheckGroupApiCheckDefaultsBasicAuthOutput
	ToCheckGroupApiCheckDefaultsBasicAuthOutputWithContext(context.Context) CheckGroupApiCheckDefaultsBasicAuthOutput
}

type CheckGroupApiCheckDefaultsBasicAuthArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (CheckGroupApiCheckDefaultsBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupApiCheckDefaultsBasicAuth)(nil)).Elem()
}

func (i CheckGroupApiCheckDefaultsBasicAuthArgs) ToCheckGroupApiCheckDefaultsBasicAuthOutput() CheckGroupApiCheckDefaultsBasicAuthOutput {
	return i.ToCheckGroupApiCheckDefaultsBasicAuthOutputWithContext(context.Background())
}

func (i CheckGroupApiCheckDefaultsBasicAuthArgs) ToCheckGroupApiCheckDefaultsBasicAuthOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsBasicAuthOutput)
}

func (i CheckGroupApiCheckDefaultsBasicAuthArgs) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutput() CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return i.ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(context.Background())
}

func (i CheckGroupApiCheckDefaultsBasicAuthArgs) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsBasicAuthOutput).ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(ctx)
}

// CheckGroupApiCheckDefaultsBasicAuthPtrInput is an input type that accepts CheckGroupApiCheckDefaultsBasicAuthArgs, CheckGroupApiCheckDefaultsBasicAuthPtr and CheckGroupApiCheckDefaultsBasicAuthPtrOutput values.
// You can construct a concrete instance of `CheckGroupApiCheckDefaultsBasicAuthPtrInput` via:
//
//	        CheckGroupApiCheckDefaultsBasicAuthArgs{...}
//
//	or:
//
//	        nil
type CheckGroupApiCheckDefaultsBasicAuthPtrInput interface {
	pulumi.Input

	ToCheckGroupApiCheckDefaultsBasicAuthPtrOutput() CheckGroupApiCheckDefaultsBasicAuthPtrOutput
	ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(context.Context) CheckGroupApiCheckDefaultsBasicAuthPtrOutput
}

type checkGroupApiCheckDefaultsBasicAuthPtrType CheckGroupApiCheckDefaultsBasicAuthArgs

func CheckGroupApiCheckDefaultsBasicAuthPtr(v *CheckGroupApiCheckDefaultsBasicAuthArgs) CheckGroupApiCheckDefaultsBasicAuthPtrInput {
	return (*checkGroupApiCheckDefaultsBasicAuthPtrType)(v)
}

func (*checkGroupApiCheckDefaultsBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupApiCheckDefaultsBasicAuth)(nil)).Elem()
}

func (i *checkGroupApiCheckDefaultsBasicAuthPtrType) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutput() CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return i.ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(context.Background())
}

func (i *checkGroupApiCheckDefaultsBasicAuthPtrType) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupApiCheckDefaultsBasicAuthPtrOutput)
}

type CheckGroupApiCheckDefaultsBasicAuthOutput struct{ *pulumi.OutputState }

func (CheckGroupApiCheckDefaultsBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupApiCheckDefaultsBasicAuth)(nil)).Elem()
}

func (o CheckGroupApiCheckDefaultsBasicAuthOutput) ToCheckGroupApiCheckDefaultsBasicAuthOutput() CheckGroupApiCheckDefaultsBasicAuthOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsBasicAuthOutput) ToCheckGroupApiCheckDefaultsBasicAuthOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsBasicAuthOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsBasicAuthOutput) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutput() CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return o.ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(context.Background())
}

func (o CheckGroupApiCheckDefaultsBasicAuthOutput) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckGroupApiCheckDefaultsBasicAuth) *CheckGroupApiCheckDefaultsBasicAuth {
		return &v
	}).(CheckGroupApiCheckDefaultsBasicAuthPtrOutput)
}

func (o CheckGroupApiCheckDefaultsBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaultsBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

func (o CheckGroupApiCheckDefaultsBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupApiCheckDefaultsBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type CheckGroupApiCheckDefaultsBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (CheckGroupApiCheckDefaultsBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupApiCheckDefaultsBasicAuth)(nil)).Elem()
}

func (o CheckGroupApiCheckDefaultsBasicAuthPtrOutput) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutput() CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsBasicAuthPtrOutput) ToCheckGroupApiCheckDefaultsBasicAuthPtrOutputWithContext(ctx context.Context) CheckGroupApiCheckDefaultsBasicAuthPtrOutput {
	return o
}

func (o CheckGroupApiCheckDefaultsBasicAuthPtrOutput) Elem() CheckGroupApiCheckDefaultsBasicAuthOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaultsBasicAuth) CheckGroupApiCheckDefaultsBasicAuth {
		if v != nil {
			return *v
		}
		var ret CheckGroupApiCheckDefaultsBasicAuth
		return ret
	}).(CheckGroupApiCheckDefaultsBasicAuthOutput)
}

func (o CheckGroupApiCheckDefaultsBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaultsBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o CheckGroupApiCheckDefaultsBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckGroupApiCheckDefaultsBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type CheckGroupEnvironmentVariable struct {
	Key    string `pulumi:"key"`
	Locked *bool  `pulumi:"locked"`
	Secret *bool  `pulumi:"secret"`
	Value  string `pulumi:"value"`
}

// CheckGroupEnvironmentVariableInput is an input type that accepts CheckGroupEnvironmentVariableArgs and CheckGroupEnvironmentVariableOutput values.
// You can construct a concrete instance of `CheckGroupEnvironmentVariableInput` via:
//
//	CheckGroupEnvironmentVariableArgs{...}
type CheckGroupEnvironmentVariableInput interface {
	pulumi.Input

	ToCheckGroupEnvironmentVariableOutput() CheckGroupEnvironmentVariableOutput
	ToCheckGroupEnvironmentVariableOutputWithContext(context.Context) CheckGroupEnvironmentVariableOutput
}

type CheckGroupEnvironmentVariableArgs struct {
	Key    pulumi.StringInput  `pulumi:"key"`
	Locked pulumi.BoolPtrInput `pulumi:"locked"`
	Secret pulumi.BoolPtrInput `pulumi:"secret"`
	Value  pulumi.StringInput  `pulumi:"value"`
}

func (CheckGroupEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupEnvironmentVariable)(nil)).Elem()
}

func (i CheckGroupEnvironmentVariableArgs) ToCheckGroupEnvironmentVariableOutput() CheckGroupEnvironmentVariableOutput {
	return i.ToCheckGroupEnvironmentVariableOutputWithContext(context.Background())
}

func (i CheckGroupEnvironmentVariableArgs) ToCheckGroupEnvironmentVariableOutputWithContext(ctx context.Context) CheckGroupEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupEnvironmentVariableOutput)
}

// CheckGroupEnvironmentVariableArrayInput is an input type that accepts CheckGroupEnvironmentVariableArray and CheckGroupEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `CheckGroupEnvironmentVariableArrayInput` via:
//
//	CheckGroupEnvironmentVariableArray{ CheckGroupEnvironmentVariableArgs{...} }
type CheckGroupEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToCheckGroupEnvironmentVariableArrayOutput() CheckGroupEnvironmentVariableArrayOutput
	ToCheckGroupEnvironmentVariableArrayOutputWithContext(context.Context) CheckGroupEnvironmentVariableArrayOutput
}

type CheckGroupEnvironmentVariableArray []CheckGroupEnvironmentVariableInput

func (CheckGroupEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupEnvironmentVariable)(nil)).Elem()
}

func (i CheckGroupEnvironmentVariableArray) ToCheckGroupEnvironmentVariableArrayOutput() CheckGroupEnvironmentVariableArrayOutput {
	return i.ToCheckGroupEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i CheckGroupEnvironmentVariableArray) ToCheckGroupEnvironmentVariableArrayOutputWithContext(ctx context.Context) CheckGroupEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupEnvironmentVariableArrayOutput)
}

type CheckGroupEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (CheckGroupEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupEnvironmentVariable)(nil)).Elem()
}

func (o CheckGroupEnvironmentVariableOutput) ToCheckGroupEnvironmentVariableOutput() CheckGroupEnvironmentVariableOutput {
	return o
}

func (o CheckGroupEnvironmentVariableOutput) ToCheckGroupEnvironmentVariableOutputWithContext(ctx context.Context) CheckGroupEnvironmentVariableOutput {
	return o
}

func (o CheckGroupEnvironmentVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupEnvironmentVariable) string { return v.Key }).(pulumi.StringOutput)
}

func (o CheckGroupEnvironmentVariableOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckGroupEnvironmentVariable) *bool { return v.Locked }).(pulumi.BoolPtrOutput)
}

func (o CheckGroupEnvironmentVariableOutput) Secret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckGroupEnvironmentVariable) *bool { return v.Secret }).(pulumi.BoolPtrOutput)
}

func (o CheckGroupEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupEnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

type CheckGroupEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (CheckGroupEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckGroupEnvironmentVariable)(nil)).Elem()
}

func (o CheckGroupEnvironmentVariableArrayOutput) ToCheckGroupEnvironmentVariableArrayOutput() CheckGroupEnvironmentVariableArrayOutput {
	return o
}

func (o CheckGroupEnvironmentVariableArrayOutput) ToCheckGroupEnvironmentVariableArrayOutputWithContext(ctx context.Context) CheckGroupEnvironmentVariableArrayOutput {
	return o
}

func (o CheckGroupEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) CheckGroupEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckGroupEnvironmentVariable {
		return vs[0].([]CheckGroupEnvironmentVariable)[vs[1].(int)]
	}).(CheckGroupEnvironmentVariableOutput)
}

type CheckGroupRetryStrategy struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds *int `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries *int `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion *bool `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type string `pulumi:"type"`
}

// CheckGroupRetryStrategyInput is an input type that accepts CheckGroupRetryStrategyArgs and CheckGroupRetryStrategyOutput values.
// You can construct a concrete instance of `CheckGroupRetryStrategyInput` via:
//
//	CheckGroupRetryStrategyArgs{...}
type CheckGroupRetryStrategyInput interface {
	pulumi.Input

	ToCheckGroupRetryStrategyOutput() CheckGroupRetryStrategyOutput
	ToCheckGroupRetryStrategyOutputWithContext(context.Context) CheckGroupRetryStrategyOutput
}

type CheckGroupRetryStrategyArgs struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds pulumi.IntPtrInput `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion pulumi.BoolPtrInput `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CheckGroupRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupRetryStrategy)(nil)).Elem()
}

func (i CheckGroupRetryStrategyArgs) ToCheckGroupRetryStrategyOutput() CheckGroupRetryStrategyOutput {
	return i.ToCheckGroupRetryStrategyOutputWithContext(context.Background())
}

func (i CheckGroupRetryStrategyArgs) ToCheckGroupRetryStrategyOutputWithContext(ctx context.Context) CheckGroupRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupRetryStrategyOutput)
}

func (i CheckGroupRetryStrategyArgs) ToCheckGroupRetryStrategyPtrOutput() CheckGroupRetryStrategyPtrOutput {
	return i.ToCheckGroupRetryStrategyPtrOutputWithContext(context.Background())
}

func (i CheckGroupRetryStrategyArgs) ToCheckGroupRetryStrategyPtrOutputWithContext(ctx context.Context) CheckGroupRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupRetryStrategyOutput).ToCheckGroupRetryStrategyPtrOutputWithContext(ctx)
}

// CheckGroupRetryStrategyPtrInput is an input type that accepts CheckGroupRetryStrategyArgs, CheckGroupRetryStrategyPtr and CheckGroupRetryStrategyPtrOutput values.
// You can construct a concrete instance of `CheckGroupRetryStrategyPtrInput` via:
//
//	        CheckGroupRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type CheckGroupRetryStrategyPtrInput interface {
	pulumi.Input

	ToCheckGroupRetryStrategyPtrOutput() CheckGroupRetryStrategyPtrOutput
	ToCheckGroupRetryStrategyPtrOutputWithContext(context.Context) CheckGroupRetryStrategyPtrOutput
}

type checkGroupRetryStrategyPtrType CheckGroupRetryStrategyArgs

func CheckGroupRetryStrategyPtr(v *CheckGroupRetryStrategyArgs) CheckGroupRetryStrategyPtrInput {
	return (*checkGroupRetryStrategyPtrType)(v)
}

func (*checkGroupRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupRetryStrategy)(nil)).Elem()
}

func (i *checkGroupRetryStrategyPtrType) ToCheckGroupRetryStrategyPtrOutput() CheckGroupRetryStrategyPtrOutput {
	return i.ToCheckGroupRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *checkGroupRetryStrategyPtrType) ToCheckGroupRetryStrategyPtrOutputWithContext(ctx context.Context) CheckGroupRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckGroupRetryStrategyPtrOutput)
}

type CheckGroupRetryStrategyOutput struct{ *pulumi.OutputState }

func (CheckGroupRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckGroupRetryStrategy)(nil)).Elem()
}

func (o CheckGroupRetryStrategyOutput) ToCheckGroupRetryStrategyOutput() CheckGroupRetryStrategyOutput {
	return o
}

func (o CheckGroupRetryStrategyOutput) ToCheckGroupRetryStrategyOutputWithContext(ctx context.Context) CheckGroupRetryStrategyOutput {
	return o
}

func (o CheckGroupRetryStrategyOutput) ToCheckGroupRetryStrategyPtrOutput() CheckGroupRetryStrategyPtrOutput {
	return o.ToCheckGroupRetryStrategyPtrOutputWithContext(context.Background())
}

func (o CheckGroupRetryStrategyOutput) ToCheckGroupRetryStrategyPtrOutputWithContext(ctx context.Context) CheckGroupRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckGroupRetryStrategy) *CheckGroupRetryStrategy {
		return &v
	}).(CheckGroupRetryStrategyPtrOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o CheckGroupRetryStrategyOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupRetryStrategy) *int { return v.BaseBackoffSeconds }).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o CheckGroupRetryStrategyOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupRetryStrategy) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o CheckGroupRetryStrategyOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckGroupRetryStrategy) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o CheckGroupRetryStrategyOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckGroupRetryStrategy) *bool { return v.SameRegion }).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o CheckGroupRetryStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CheckGroupRetryStrategy) string { return v.Type }).(pulumi.StringOutput)
}

type CheckGroupRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (CheckGroupRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckGroupRetryStrategy)(nil)).Elem()
}

func (o CheckGroupRetryStrategyPtrOutput) ToCheckGroupRetryStrategyPtrOutput() CheckGroupRetryStrategyPtrOutput {
	return o
}

func (o CheckGroupRetryStrategyPtrOutput) ToCheckGroupRetryStrategyPtrOutputWithContext(ctx context.Context) CheckGroupRetryStrategyPtrOutput {
	return o
}

func (o CheckGroupRetryStrategyPtrOutput) Elem() CheckGroupRetryStrategyOutput {
	return o.ApplyT(func(v *CheckGroupRetryStrategy) CheckGroupRetryStrategy {
		if v != nil {
			return *v
		}
		var ret CheckGroupRetryStrategy
		return ret
	}).(CheckGroupRetryStrategyOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o CheckGroupRetryStrategyPtrOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckGroupRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.BaseBackoffSeconds
	}).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o CheckGroupRetryStrategyPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckGroupRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o CheckGroupRetryStrategyPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckGroupRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o CheckGroupRetryStrategyPtrOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckGroupRetryStrategy) *bool {
		if v == nil {
			return nil
		}
		return v.SameRegion
	}).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o CheckGroupRetryStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckGroupRetryStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type CheckRequest struct {
	// A request can have multiple assertions.
	Assertions []CheckRequestAssertion `pulumi:"assertions"`
	// Set up HTTP basic authentication (username & password).
	BasicAuth *CheckRequestBasicAuth `pulumi:"basicAuth"`
	// The body of the request.
	Body *string `pulumi:"body"`
	// The `Content-Type` header of the request. Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
	BodyType        *string           `pulumi:"bodyType"`
	FollowRedirects *bool             `pulumi:"followRedirects"`
	Headers         map[string]string `pulumi:"headers"`
	// IP Family to be used when executing the api check. The value can be either IPv4 or IPv6.
	IpFamily *string `pulumi:"ipFamily"`
	// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. (Default `GET`).
	Method          *string           `pulumi:"method"`
	QueryParameters map[string]string `pulumi:"queryParameters"`
	SkipSsl         *bool             `pulumi:"skipSsl"`
	Url             string            `pulumi:"url"`
}

// CheckRequestInput is an input type that accepts CheckRequestArgs and CheckRequestOutput values.
// You can construct a concrete instance of `CheckRequestInput` via:
//
//	CheckRequestArgs{...}
type CheckRequestInput interface {
	pulumi.Input

	ToCheckRequestOutput() CheckRequestOutput
	ToCheckRequestOutputWithContext(context.Context) CheckRequestOutput
}

type CheckRequestArgs struct {
	// A request can have multiple assertions.
	Assertions CheckRequestAssertionArrayInput `pulumi:"assertions"`
	// Set up HTTP basic authentication (username & password).
	BasicAuth CheckRequestBasicAuthPtrInput `pulumi:"basicAuth"`
	// The body of the request.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The `Content-Type` header of the request. Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
	BodyType        pulumi.StringPtrInput `pulumi:"bodyType"`
	FollowRedirects pulumi.BoolPtrInput   `pulumi:"followRedirects"`
	Headers         pulumi.StringMapInput `pulumi:"headers"`
	// IP Family to be used when executing the api check. The value can be either IPv4 or IPv6.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. (Default `GET`).
	Method          pulumi.StringPtrInput `pulumi:"method"`
	QueryParameters pulumi.StringMapInput `pulumi:"queryParameters"`
	SkipSsl         pulumi.BoolPtrInput   `pulumi:"skipSsl"`
	Url             pulumi.StringInput    `pulumi:"url"`
}

func (CheckRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequest)(nil)).Elem()
}

func (i CheckRequestArgs) ToCheckRequestOutput() CheckRequestOutput {
	return i.ToCheckRequestOutputWithContext(context.Background())
}

func (i CheckRequestArgs) ToCheckRequestOutputWithContext(ctx context.Context) CheckRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestOutput)
}

func (i CheckRequestArgs) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return i.ToCheckRequestPtrOutputWithContext(context.Background())
}

func (i CheckRequestArgs) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestOutput).ToCheckRequestPtrOutputWithContext(ctx)
}

// CheckRequestPtrInput is an input type that accepts CheckRequestArgs, CheckRequestPtr and CheckRequestPtrOutput values.
// You can construct a concrete instance of `CheckRequestPtrInput` via:
//
//	        CheckRequestArgs{...}
//
//	or:
//
//	        nil
type CheckRequestPtrInput interface {
	pulumi.Input

	ToCheckRequestPtrOutput() CheckRequestPtrOutput
	ToCheckRequestPtrOutputWithContext(context.Context) CheckRequestPtrOutput
}

type checkRequestPtrType CheckRequestArgs

func CheckRequestPtr(v *CheckRequestArgs) CheckRequestPtrInput {
	return (*checkRequestPtrType)(v)
}

func (*checkRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequest)(nil)).Elem()
}

func (i *checkRequestPtrType) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return i.ToCheckRequestPtrOutputWithContext(context.Background())
}

func (i *checkRequestPtrType) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestPtrOutput)
}

type CheckRequestOutput struct{ *pulumi.OutputState }

func (CheckRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequest)(nil)).Elem()
}

func (o CheckRequestOutput) ToCheckRequestOutput() CheckRequestOutput {
	return o
}

func (o CheckRequestOutput) ToCheckRequestOutputWithContext(ctx context.Context) CheckRequestOutput {
	return o
}

func (o CheckRequestOutput) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return o.ToCheckRequestPtrOutputWithContext(context.Background())
}

func (o CheckRequestOutput) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckRequest) *CheckRequest {
		return &v
	}).(CheckRequestPtrOutput)
}

// A request can have multiple assertions.
func (o CheckRequestOutput) Assertions() CheckRequestAssertionArrayOutput {
	return o.ApplyT(func(v CheckRequest) []CheckRequestAssertion { return v.Assertions }).(CheckRequestAssertionArrayOutput)
}

// Set up HTTP basic authentication (username & password).
func (o CheckRequestOutput) BasicAuth() CheckRequestBasicAuthPtrOutput {
	return o.ApplyT(func(v CheckRequest) *CheckRequestBasicAuth { return v.BasicAuth }).(CheckRequestBasicAuthPtrOutput)
}

// The body of the request.
func (o CheckRequestOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The `Content-Type` header of the request. Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
func (o CheckRequestOutput) BodyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.BodyType }).(pulumi.StringPtrOutput)
}

func (o CheckRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

func (o CheckRequestOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v CheckRequest) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// IP Family to be used when executing the api check. The value can be either IPv4 or IPv6.
func (o CheckRequestOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. (Default `GET`).
func (o CheckRequestOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequest) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o CheckRequestOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CheckRequest) map[string]string { return v.QueryParameters }).(pulumi.StringMapOutput)
}

func (o CheckRequestOutput) SkipSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckRequest) *bool { return v.SkipSsl }).(pulumi.BoolPtrOutput)
}

func (o CheckRequestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequest) string { return v.Url }).(pulumi.StringOutput)
}

type CheckRequestPtrOutput struct{ *pulumi.OutputState }

func (CheckRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequest)(nil)).Elem()
}

func (o CheckRequestPtrOutput) ToCheckRequestPtrOutput() CheckRequestPtrOutput {
	return o
}

func (o CheckRequestPtrOutput) ToCheckRequestPtrOutputWithContext(ctx context.Context) CheckRequestPtrOutput {
	return o
}

func (o CheckRequestPtrOutput) Elem() CheckRequestOutput {
	return o.ApplyT(func(v *CheckRequest) CheckRequest {
		if v != nil {
			return *v
		}
		var ret CheckRequest
		return ret
	}).(CheckRequestOutput)
}

// A request can have multiple assertions.
func (o CheckRequestPtrOutput) Assertions() CheckRequestAssertionArrayOutput {
	return o.ApplyT(func(v *CheckRequest) []CheckRequestAssertion {
		if v == nil {
			return nil
		}
		return v.Assertions
	}).(CheckRequestAssertionArrayOutput)
}

// Set up HTTP basic authentication (username & password).
func (o CheckRequestPtrOutput) BasicAuth() CheckRequestBasicAuthPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *CheckRequestBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(CheckRequestBasicAuthPtrOutput)
}

// The body of the request.
func (o CheckRequestPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// The `Content-Type` header of the request. Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
func (o CheckRequestPtrOutput) BodyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.BodyType
	}).(pulumi.StringPtrOutput)
}

func (o CheckRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

func (o CheckRequestPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CheckRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// IP Family to be used when executing the api check. The value can be either IPv4 or IPv6.
func (o CheckRequestPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. (Default `GET`).
func (o CheckRequestPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o CheckRequestPtrOutput) QueryParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CheckRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.StringMapOutput)
}

func (o CheckRequestPtrOutput) SkipSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *bool {
		if v == nil {
			return nil
		}
		return v.SkipSsl
	}).(pulumi.BoolPtrOutput)
}

func (o CheckRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type CheckRequestAssertion struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison string  `pulumi:"comparison"`
	Property   *string `pulumi:"property"`
	// The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
	Source string  `pulumi:"source"`
	Target *string `pulumi:"target"`
}

// CheckRequestAssertionInput is an input type that accepts CheckRequestAssertionArgs and CheckRequestAssertionOutput values.
// You can construct a concrete instance of `CheckRequestAssertionInput` via:
//
//	CheckRequestAssertionArgs{...}
type CheckRequestAssertionInput interface {
	pulumi.Input

	ToCheckRequestAssertionOutput() CheckRequestAssertionOutput
	ToCheckRequestAssertionOutputWithContext(context.Context) CheckRequestAssertionOutput
}

type CheckRequestAssertionArgs struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison pulumi.StringInput    `pulumi:"comparison"`
	Property   pulumi.StringPtrInput `pulumi:"property"`
	// The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
	Source pulumi.StringInput    `pulumi:"source"`
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (CheckRequestAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestAssertion)(nil)).Elem()
}

func (i CheckRequestAssertionArgs) ToCheckRequestAssertionOutput() CheckRequestAssertionOutput {
	return i.ToCheckRequestAssertionOutputWithContext(context.Background())
}

func (i CheckRequestAssertionArgs) ToCheckRequestAssertionOutputWithContext(ctx context.Context) CheckRequestAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestAssertionOutput)
}

// CheckRequestAssertionArrayInput is an input type that accepts CheckRequestAssertionArray and CheckRequestAssertionArrayOutput values.
// You can construct a concrete instance of `CheckRequestAssertionArrayInput` via:
//
//	CheckRequestAssertionArray{ CheckRequestAssertionArgs{...} }
type CheckRequestAssertionArrayInput interface {
	pulumi.Input

	ToCheckRequestAssertionArrayOutput() CheckRequestAssertionArrayOutput
	ToCheckRequestAssertionArrayOutputWithContext(context.Context) CheckRequestAssertionArrayOutput
}

type CheckRequestAssertionArray []CheckRequestAssertionInput

func (CheckRequestAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckRequestAssertion)(nil)).Elem()
}

func (i CheckRequestAssertionArray) ToCheckRequestAssertionArrayOutput() CheckRequestAssertionArrayOutput {
	return i.ToCheckRequestAssertionArrayOutputWithContext(context.Background())
}

func (i CheckRequestAssertionArray) ToCheckRequestAssertionArrayOutputWithContext(ctx context.Context) CheckRequestAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestAssertionArrayOutput)
}

type CheckRequestAssertionOutput struct{ *pulumi.OutputState }

func (CheckRequestAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestAssertion)(nil)).Elem()
}

func (o CheckRequestAssertionOutput) ToCheckRequestAssertionOutput() CheckRequestAssertionOutput {
	return o
}

func (o CheckRequestAssertionOutput) ToCheckRequestAssertionOutputWithContext(ctx context.Context) CheckRequestAssertionOutput {
	return o
}

// The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
func (o CheckRequestAssertionOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestAssertion) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o CheckRequestAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequestAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
func (o CheckRequestAssertionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestAssertion) string { return v.Source }).(pulumi.StringOutput)
}

func (o CheckRequestAssertionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckRequestAssertion) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type CheckRequestAssertionArrayOutput struct{ *pulumi.OutputState }

func (CheckRequestAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckRequestAssertion)(nil)).Elem()
}

func (o CheckRequestAssertionArrayOutput) ToCheckRequestAssertionArrayOutput() CheckRequestAssertionArrayOutput {
	return o
}

func (o CheckRequestAssertionArrayOutput) ToCheckRequestAssertionArrayOutputWithContext(ctx context.Context) CheckRequestAssertionArrayOutput {
	return o
}

func (o CheckRequestAssertionArrayOutput) Index(i pulumi.IntInput) CheckRequestAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckRequestAssertion {
		return vs[0].([]CheckRequestAssertion)[vs[1].(int)]
	}).(CheckRequestAssertionOutput)
}

type CheckRequestBasicAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// CheckRequestBasicAuthInput is an input type that accepts CheckRequestBasicAuthArgs and CheckRequestBasicAuthOutput values.
// You can construct a concrete instance of `CheckRequestBasicAuthInput` via:
//
//	CheckRequestBasicAuthArgs{...}
type CheckRequestBasicAuthInput interface {
	pulumi.Input

	ToCheckRequestBasicAuthOutput() CheckRequestBasicAuthOutput
	ToCheckRequestBasicAuthOutputWithContext(context.Context) CheckRequestBasicAuthOutput
}

type CheckRequestBasicAuthArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (CheckRequestBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestBasicAuth)(nil)).Elem()
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthOutput() CheckRequestBasicAuthOutput {
	return i.ToCheckRequestBasicAuthOutputWithContext(context.Background())
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthOutputWithContext(ctx context.Context) CheckRequestBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestBasicAuthOutput)
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return i.ToCheckRequestBasicAuthPtrOutputWithContext(context.Background())
}

func (i CheckRequestBasicAuthArgs) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestBasicAuthOutput).ToCheckRequestBasicAuthPtrOutputWithContext(ctx)
}

// CheckRequestBasicAuthPtrInput is an input type that accepts CheckRequestBasicAuthArgs, CheckRequestBasicAuthPtr and CheckRequestBasicAuthPtrOutput values.
// You can construct a concrete instance of `CheckRequestBasicAuthPtrInput` via:
//
//	        CheckRequestBasicAuthArgs{...}
//
//	or:
//
//	        nil
type CheckRequestBasicAuthPtrInput interface {
	pulumi.Input

	ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput
	ToCheckRequestBasicAuthPtrOutputWithContext(context.Context) CheckRequestBasicAuthPtrOutput
}

type checkRequestBasicAuthPtrType CheckRequestBasicAuthArgs

func CheckRequestBasicAuthPtr(v *CheckRequestBasicAuthArgs) CheckRequestBasicAuthPtrInput {
	return (*checkRequestBasicAuthPtrType)(v)
}

func (*checkRequestBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequestBasicAuth)(nil)).Elem()
}

func (i *checkRequestBasicAuthPtrType) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return i.ToCheckRequestBasicAuthPtrOutputWithContext(context.Background())
}

func (i *checkRequestBasicAuthPtrType) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRequestBasicAuthPtrOutput)
}

type CheckRequestBasicAuthOutput struct{ *pulumi.OutputState }

func (CheckRequestBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRequestBasicAuth)(nil)).Elem()
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthOutput() CheckRequestBasicAuthOutput {
	return o
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthOutputWithContext(ctx context.Context) CheckRequestBasicAuthOutput {
	return o
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return o.ToCheckRequestBasicAuthPtrOutputWithContext(context.Background())
}

func (o CheckRequestBasicAuthOutput) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckRequestBasicAuth) *CheckRequestBasicAuth {
		return &v
	}).(CheckRequestBasicAuthPtrOutput)
}

func (o CheckRequestBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

func (o CheckRequestBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRequestBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type CheckRequestBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (CheckRequestBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRequestBasicAuth)(nil)).Elem()
}

func (o CheckRequestBasicAuthPtrOutput) ToCheckRequestBasicAuthPtrOutput() CheckRequestBasicAuthPtrOutput {
	return o
}

func (o CheckRequestBasicAuthPtrOutput) ToCheckRequestBasicAuthPtrOutputWithContext(ctx context.Context) CheckRequestBasicAuthPtrOutput {
	return o
}

func (o CheckRequestBasicAuthPtrOutput) Elem() CheckRequestBasicAuthOutput {
	return o.ApplyT(func(v *CheckRequestBasicAuth) CheckRequestBasicAuth {
		if v != nil {
			return *v
		}
		var ret CheckRequestBasicAuth
		return ret
	}).(CheckRequestBasicAuthOutput)
}

func (o CheckRequestBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequestBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o CheckRequestBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRequestBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type CheckRetryStrategy struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds *int `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries *int `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion *bool `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type string `pulumi:"type"`
}

// CheckRetryStrategyInput is an input type that accepts CheckRetryStrategyArgs and CheckRetryStrategyOutput values.
// You can construct a concrete instance of `CheckRetryStrategyInput` via:
//
//	CheckRetryStrategyArgs{...}
type CheckRetryStrategyInput interface {
	pulumi.Input

	ToCheckRetryStrategyOutput() CheckRetryStrategyOutput
	ToCheckRetryStrategyOutputWithContext(context.Context) CheckRetryStrategyOutput
}

type CheckRetryStrategyArgs struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds pulumi.IntPtrInput `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion pulumi.BoolPtrInput `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CheckRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRetryStrategy)(nil)).Elem()
}

func (i CheckRetryStrategyArgs) ToCheckRetryStrategyOutput() CheckRetryStrategyOutput {
	return i.ToCheckRetryStrategyOutputWithContext(context.Background())
}

func (i CheckRetryStrategyArgs) ToCheckRetryStrategyOutputWithContext(ctx context.Context) CheckRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRetryStrategyOutput)
}

func (i CheckRetryStrategyArgs) ToCheckRetryStrategyPtrOutput() CheckRetryStrategyPtrOutput {
	return i.ToCheckRetryStrategyPtrOutputWithContext(context.Background())
}

func (i CheckRetryStrategyArgs) ToCheckRetryStrategyPtrOutputWithContext(ctx context.Context) CheckRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRetryStrategyOutput).ToCheckRetryStrategyPtrOutputWithContext(ctx)
}

// CheckRetryStrategyPtrInput is an input type that accepts CheckRetryStrategyArgs, CheckRetryStrategyPtr and CheckRetryStrategyPtrOutput values.
// You can construct a concrete instance of `CheckRetryStrategyPtrInput` via:
//
//	        CheckRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type CheckRetryStrategyPtrInput interface {
	pulumi.Input

	ToCheckRetryStrategyPtrOutput() CheckRetryStrategyPtrOutput
	ToCheckRetryStrategyPtrOutputWithContext(context.Context) CheckRetryStrategyPtrOutput
}

type checkRetryStrategyPtrType CheckRetryStrategyArgs

func CheckRetryStrategyPtr(v *CheckRetryStrategyArgs) CheckRetryStrategyPtrInput {
	return (*checkRetryStrategyPtrType)(v)
}

func (*checkRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRetryStrategy)(nil)).Elem()
}

func (i *checkRetryStrategyPtrType) ToCheckRetryStrategyPtrOutput() CheckRetryStrategyPtrOutput {
	return i.ToCheckRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *checkRetryStrategyPtrType) ToCheckRetryStrategyPtrOutputWithContext(ctx context.Context) CheckRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckRetryStrategyPtrOutput)
}

type CheckRetryStrategyOutput struct{ *pulumi.OutputState }

func (CheckRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckRetryStrategy)(nil)).Elem()
}

func (o CheckRetryStrategyOutput) ToCheckRetryStrategyOutput() CheckRetryStrategyOutput {
	return o
}

func (o CheckRetryStrategyOutput) ToCheckRetryStrategyOutputWithContext(ctx context.Context) CheckRetryStrategyOutput {
	return o
}

func (o CheckRetryStrategyOutput) ToCheckRetryStrategyPtrOutput() CheckRetryStrategyPtrOutput {
	return o.ToCheckRetryStrategyPtrOutputWithContext(context.Background())
}

func (o CheckRetryStrategyOutput) ToCheckRetryStrategyPtrOutputWithContext(ctx context.Context) CheckRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckRetryStrategy) *CheckRetryStrategy {
		return &v
	}).(CheckRetryStrategyPtrOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o CheckRetryStrategyOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckRetryStrategy) *int { return v.BaseBackoffSeconds }).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o CheckRetryStrategyOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckRetryStrategy) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o CheckRetryStrategyOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckRetryStrategy) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o CheckRetryStrategyOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckRetryStrategy) *bool { return v.SameRegion }).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o CheckRetryStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CheckRetryStrategy) string { return v.Type }).(pulumi.StringOutput)
}

type CheckRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (CheckRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckRetryStrategy)(nil)).Elem()
}

func (o CheckRetryStrategyPtrOutput) ToCheckRetryStrategyPtrOutput() CheckRetryStrategyPtrOutput {
	return o
}

func (o CheckRetryStrategyPtrOutput) ToCheckRetryStrategyPtrOutputWithContext(ctx context.Context) CheckRetryStrategyPtrOutput {
	return o
}

func (o CheckRetryStrategyPtrOutput) Elem() CheckRetryStrategyOutput {
	return o.ApplyT(func(v *CheckRetryStrategy) CheckRetryStrategy {
		if v != nil {
			return *v
		}
		var ret CheckRetryStrategy
		return ret
	}).(CheckRetryStrategyOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o CheckRetryStrategyPtrOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.BaseBackoffSeconds
	}).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o CheckRetryStrategyPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o CheckRetryStrategyPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o CheckRetryStrategyPtrOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckRetryStrategy) *bool {
		if v == nil {
			return nil
		}
		return v.SameRegion
	}).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o CheckRetryStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckRetryStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type HeartbeatCheckAlertChannelSubscription struct {
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// HeartbeatCheckAlertChannelSubscriptionInput is an input type that accepts HeartbeatCheckAlertChannelSubscriptionArgs and HeartbeatCheckAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertChannelSubscriptionInput` via:
//
//	HeartbeatCheckAlertChannelSubscriptionArgs{...}
type HeartbeatCheckAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertChannelSubscriptionOutput() HeartbeatCheckAlertChannelSubscriptionOutput
	ToHeartbeatCheckAlertChannelSubscriptionOutputWithContext(context.Context) HeartbeatCheckAlertChannelSubscriptionOutput
}

type HeartbeatCheckAlertChannelSubscriptionArgs struct {
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (HeartbeatCheckAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertChannelSubscription)(nil)).Elem()
}

func (i HeartbeatCheckAlertChannelSubscriptionArgs) ToHeartbeatCheckAlertChannelSubscriptionOutput() HeartbeatCheckAlertChannelSubscriptionOutput {
	return i.ToHeartbeatCheckAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertChannelSubscriptionArgs) ToHeartbeatCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) HeartbeatCheckAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertChannelSubscriptionOutput)
}

// HeartbeatCheckAlertChannelSubscriptionArrayInput is an input type that accepts HeartbeatCheckAlertChannelSubscriptionArray and HeartbeatCheckAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertChannelSubscriptionArrayInput` via:
//
//	HeartbeatCheckAlertChannelSubscriptionArray{ HeartbeatCheckAlertChannelSubscriptionArgs{...} }
type HeartbeatCheckAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertChannelSubscriptionArrayOutput() HeartbeatCheckAlertChannelSubscriptionArrayOutput
	ToHeartbeatCheckAlertChannelSubscriptionArrayOutputWithContext(context.Context) HeartbeatCheckAlertChannelSubscriptionArrayOutput
}

type HeartbeatCheckAlertChannelSubscriptionArray []HeartbeatCheckAlertChannelSubscriptionInput

func (HeartbeatCheckAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertChannelSubscription)(nil)).Elem()
}

func (i HeartbeatCheckAlertChannelSubscriptionArray) ToHeartbeatCheckAlertChannelSubscriptionArrayOutput() HeartbeatCheckAlertChannelSubscriptionArrayOutput {
	return i.ToHeartbeatCheckAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertChannelSubscriptionArray) ToHeartbeatCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertChannelSubscriptionArrayOutput)
}

type HeartbeatCheckAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertChannelSubscription)(nil)).Elem()
}

func (o HeartbeatCheckAlertChannelSubscriptionOutput) ToHeartbeatCheckAlertChannelSubscriptionOutput() HeartbeatCheckAlertChannelSubscriptionOutput {
	return o
}

func (o HeartbeatCheckAlertChannelSubscriptionOutput) ToHeartbeatCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) HeartbeatCheckAlertChannelSubscriptionOutput {
	return o
}

func (o HeartbeatCheckAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o HeartbeatCheckAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type HeartbeatCheckAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertChannelSubscription)(nil)).Elem()
}

func (o HeartbeatCheckAlertChannelSubscriptionArrayOutput) ToHeartbeatCheckAlertChannelSubscriptionArrayOutput() HeartbeatCheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o HeartbeatCheckAlertChannelSubscriptionArrayOutput) ToHeartbeatCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o HeartbeatCheckAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatCheckAlertChannelSubscription {
		return vs[0].([]HeartbeatCheckAlertChannelSubscription)[vs[1].(int)]
	}).(HeartbeatCheckAlertChannelSubscriptionOutput)
}

type HeartbeatCheckAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               *string                                                  `pulumi:"escalationType"`
	ParallelRunFailureThresholds []HeartbeatCheckAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	Reminders                    []HeartbeatCheckAlertSettingsReminder                    `pulumi:"reminders"`
	RunBasedEscalations          []HeartbeatCheckAlertSettingsRunBasedEscalation          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      []HeartbeatCheckAlertSettingsSslCertificate      `pulumi:"sslCertificates"`
	TimeBasedEscalations []HeartbeatCheckAlertSettingsTimeBasedEscalation `pulumi:"timeBasedEscalations"`
}

// HeartbeatCheckAlertSettingsInput is an input type that accepts HeartbeatCheckAlertSettingsArgs and HeartbeatCheckAlertSettingsOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsInput` via:
//
//	HeartbeatCheckAlertSettingsArgs{...}
type HeartbeatCheckAlertSettingsInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsOutput() HeartbeatCheckAlertSettingsOutput
	ToHeartbeatCheckAlertSettingsOutputWithContext(context.Context) HeartbeatCheckAlertSettingsOutput
}

type HeartbeatCheckAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               pulumi.StringPtrInput                                            `pulumi:"escalationType"`
	ParallelRunFailureThresholds HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	Reminders                    HeartbeatCheckAlertSettingsReminderArrayInput                    `pulumi:"reminders"`
	RunBasedEscalations          HeartbeatCheckAlertSettingsRunBasedEscalationArrayInput          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      HeartbeatCheckAlertSettingsSslCertificateArrayInput      `pulumi:"sslCertificates"`
	TimeBasedEscalations HeartbeatCheckAlertSettingsTimeBasedEscalationArrayInput `pulumi:"timeBasedEscalations"`
}

func (HeartbeatCheckAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettings)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsArgs) ToHeartbeatCheckAlertSettingsOutput() HeartbeatCheckAlertSettingsOutput {
	return i.ToHeartbeatCheckAlertSettingsOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsArgs) ToHeartbeatCheckAlertSettingsOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsOutput)
}

func (i HeartbeatCheckAlertSettingsArgs) ToHeartbeatCheckAlertSettingsPtrOutput() HeartbeatCheckAlertSettingsPtrOutput {
	return i.ToHeartbeatCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsArgs) ToHeartbeatCheckAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsOutput).ToHeartbeatCheckAlertSettingsPtrOutputWithContext(ctx)
}

// HeartbeatCheckAlertSettingsPtrInput is an input type that accepts HeartbeatCheckAlertSettingsArgs, HeartbeatCheckAlertSettingsPtr and HeartbeatCheckAlertSettingsPtrOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsPtrInput` via:
//
//	        HeartbeatCheckAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type HeartbeatCheckAlertSettingsPtrInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsPtrOutput() HeartbeatCheckAlertSettingsPtrOutput
	ToHeartbeatCheckAlertSettingsPtrOutputWithContext(context.Context) HeartbeatCheckAlertSettingsPtrOutput
}

type heartbeatCheckAlertSettingsPtrType HeartbeatCheckAlertSettingsArgs

func HeartbeatCheckAlertSettingsPtr(v *HeartbeatCheckAlertSettingsArgs) HeartbeatCheckAlertSettingsPtrInput {
	return (*heartbeatCheckAlertSettingsPtrType)(v)
}

func (*heartbeatCheckAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatCheckAlertSettings)(nil)).Elem()
}

func (i *heartbeatCheckAlertSettingsPtrType) ToHeartbeatCheckAlertSettingsPtrOutput() HeartbeatCheckAlertSettingsPtrOutput {
	return i.ToHeartbeatCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *heartbeatCheckAlertSettingsPtrType) ToHeartbeatCheckAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsPtrOutput)
}

type HeartbeatCheckAlertSettingsOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettings)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsOutput) ToHeartbeatCheckAlertSettingsOutput() HeartbeatCheckAlertSettingsOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsOutput) ToHeartbeatCheckAlertSettingsOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsOutput) ToHeartbeatCheckAlertSettingsPtrOutput() HeartbeatCheckAlertSettingsPtrOutput {
	return o.ToHeartbeatCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (o HeartbeatCheckAlertSettingsOutput) ToHeartbeatCheckAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeartbeatCheckAlertSettings) *HeartbeatCheckAlertSettings {
		return &v
	}).(HeartbeatCheckAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o HeartbeatCheckAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

func (o HeartbeatCheckAlertSettingsOutput) ParallelRunFailureThresholds() HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o HeartbeatCheckAlertSettingsOutput) Reminders() HeartbeatCheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsReminder { return v.Reminders }).(HeartbeatCheckAlertSettingsReminderArrayOutput)
}

func (o HeartbeatCheckAlertSettingsOutput) RunBasedEscalations() HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsRunBasedEscalation {
		return v.RunBasedEscalations
	}).(HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o HeartbeatCheckAlertSettingsOutput) SslCertificates() HeartbeatCheckAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsSslCertificate {
		return v.SslCertificates
	}).(HeartbeatCheckAlertSettingsSslCertificateArrayOutput)
}

func (o HeartbeatCheckAlertSettingsOutput) TimeBasedEscalations() HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsTimeBasedEscalation {
		return v.TimeBasedEscalations
	}).(HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type HeartbeatCheckAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatCheckAlertSettings)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsPtrOutput) ToHeartbeatCheckAlertSettingsPtrOutput() HeartbeatCheckAlertSettingsPtrOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsPtrOutput) ToHeartbeatCheckAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsPtrOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsPtrOutput) Elem() HeartbeatCheckAlertSettingsOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) HeartbeatCheckAlertSettings {
		if v != nil {
			return *v
		}
		var ret HeartbeatCheckAlertSettings
		return ret
	}).(HeartbeatCheckAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o HeartbeatCheckAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

func (o HeartbeatCheckAlertSettingsPtrOutput) ParallelRunFailureThresholds() HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o HeartbeatCheckAlertSettingsPtrOutput) Reminders() HeartbeatCheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(HeartbeatCheckAlertSettingsReminderArrayOutput)
}

func (o HeartbeatCheckAlertSettingsPtrOutput) RunBasedEscalations() HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o HeartbeatCheckAlertSettingsPtrOutput) SslCertificates() HeartbeatCheckAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsSslCertificate {
		if v == nil {
			return nil
		}
		return v.SslCertificates
	}).(HeartbeatCheckAlertSettingsSslCertificateArrayOutput)
}

func (o HeartbeatCheckAlertSettingsPtrOutput) TimeBasedEscalations() HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheckAlertSettings) []HeartbeatCheckAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type HeartbeatCheckAlertSettingsParallelRunFailureThreshold struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled *bool `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// HeartbeatCheckAlertSettingsParallelRunFailureThresholdInput is an input type that accepts HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs and HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsParallelRunFailureThresholdInput` via:
//
//	HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs{...}
type HeartbeatCheckAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput() HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput
	ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput
}

type HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput() HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput)
}

// HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray and HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray{ HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs{...} }
type HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput() HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput
	ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput
}

type HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray []HeartbeatCheckAlertSettingsParallelRunFailureThresholdInput

func (HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput() HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput() HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Applicable only for checks scheduled in parallel in multiple locations.
func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput() HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput) ToHeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatCheckAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]HeartbeatCheckAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput)
}

type HeartbeatCheckAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// HeartbeatCheckAlertSettingsReminderInput is an input type that accepts HeartbeatCheckAlertSettingsReminderArgs and HeartbeatCheckAlertSettingsReminderOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsReminderInput` via:
//
//	HeartbeatCheckAlertSettingsReminderArgs{...}
type HeartbeatCheckAlertSettingsReminderInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsReminderOutput() HeartbeatCheckAlertSettingsReminderOutput
	ToHeartbeatCheckAlertSettingsReminderOutputWithContext(context.Context) HeartbeatCheckAlertSettingsReminderOutput
}

type HeartbeatCheckAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (HeartbeatCheckAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsReminder)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsReminderArgs) ToHeartbeatCheckAlertSettingsReminderOutput() HeartbeatCheckAlertSettingsReminderOutput {
	return i.ToHeartbeatCheckAlertSettingsReminderOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsReminderArgs) ToHeartbeatCheckAlertSettingsReminderOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsReminderOutput)
}

// HeartbeatCheckAlertSettingsReminderArrayInput is an input type that accepts HeartbeatCheckAlertSettingsReminderArray and HeartbeatCheckAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsReminderArrayInput` via:
//
//	HeartbeatCheckAlertSettingsReminderArray{ HeartbeatCheckAlertSettingsReminderArgs{...} }
type HeartbeatCheckAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsReminderArrayOutput() HeartbeatCheckAlertSettingsReminderArrayOutput
	ToHeartbeatCheckAlertSettingsReminderArrayOutputWithContext(context.Context) HeartbeatCheckAlertSettingsReminderArrayOutput
}

type HeartbeatCheckAlertSettingsReminderArray []HeartbeatCheckAlertSettingsReminderInput

func (HeartbeatCheckAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsReminder)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsReminderArray) ToHeartbeatCheckAlertSettingsReminderArrayOutput() HeartbeatCheckAlertSettingsReminderArrayOutput {
	return i.ToHeartbeatCheckAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsReminderArray) ToHeartbeatCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsReminderArrayOutput)
}

type HeartbeatCheckAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsReminder)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsReminderOutput) ToHeartbeatCheckAlertSettingsReminderOutput() HeartbeatCheckAlertSettingsReminderOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsReminderOutput) ToHeartbeatCheckAlertSettingsReminderOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o HeartbeatCheckAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o HeartbeatCheckAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type HeartbeatCheckAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsReminder)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsReminderArrayOutput) ToHeartbeatCheckAlertSettingsReminderArrayOutput() HeartbeatCheckAlertSettingsReminderArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsReminderArrayOutput) ToHeartbeatCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsReminderArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatCheckAlertSettingsReminder {
		return vs[0].([]HeartbeatCheckAlertSettingsReminder)[vs[1].(int)]
	}).(HeartbeatCheckAlertSettingsReminderOutput)
}

type HeartbeatCheckAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// HeartbeatCheckAlertSettingsRunBasedEscalationInput is an input type that accepts HeartbeatCheckAlertSettingsRunBasedEscalationArgs and HeartbeatCheckAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsRunBasedEscalationInput` via:
//
//	HeartbeatCheckAlertSettingsRunBasedEscalationArgs{...}
type HeartbeatCheckAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsRunBasedEscalationOutput() HeartbeatCheckAlertSettingsRunBasedEscalationOutput
	ToHeartbeatCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Context) HeartbeatCheckAlertSettingsRunBasedEscalationOutput
}

type HeartbeatCheckAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (HeartbeatCheckAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsRunBasedEscalationArgs) ToHeartbeatCheckAlertSettingsRunBasedEscalationOutput() HeartbeatCheckAlertSettingsRunBasedEscalationOutput {
	return i.ToHeartbeatCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsRunBasedEscalationArgs) ToHeartbeatCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsRunBasedEscalationOutput)
}

// HeartbeatCheckAlertSettingsRunBasedEscalationArrayInput is an input type that accepts HeartbeatCheckAlertSettingsRunBasedEscalationArray and HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsRunBasedEscalationArrayInput` via:
//
//	HeartbeatCheckAlertSettingsRunBasedEscalationArray{ HeartbeatCheckAlertSettingsRunBasedEscalationArgs{...} }
type HeartbeatCheckAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput() HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput
	ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput
}

type HeartbeatCheckAlertSettingsRunBasedEscalationArray []HeartbeatCheckAlertSettingsRunBasedEscalationInput

func (HeartbeatCheckAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsRunBasedEscalationArray) ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput() HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsRunBasedEscalationArray) ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput)
}

type HeartbeatCheckAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsRunBasedEscalationOutput) ToHeartbeatCheckAlertSettingsRunBasedEscalationOutput() HeartbeatCheckAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsRunBasedEscalationOutput) ToHeartbeatCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
func (o HeartbeatCheckAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput) ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput() HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput) ToHeartbeatCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatCheckAlertSettingsRunBasedEscalation {
		return vs[0].([]HeartbeatCheckAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(HeartbeatCheckAlertSettingsRunBasedEscalationOutput)
}

type HeartbeatCheckAlertSettingsSslCertificate struct {
	// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold *int `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
	Enabled *bool `pulumi:"enabled"`
}

// HeartbeatCheckAlertSettingsSslCertificateInput is an input type that accepts HeartbeatCheckAlertSettingsSslCertificateArgs and HeartbeatCheckAlertSettingsSslCertificateOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsSslCertificateInput` via:
//
//	HeartbeatCheckAlertSettingsSslCertificateArgs{...}
type HeartbeatCheckAlertSettingsSslCertificateInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsSslCertificateOutput() HeartbeatCheckAlertSettingsSslCertificateOutput
	ToHeartbeatCheckAlertSettingsSslCertificateOutputWithContext(context.Context) HeartbeatCheckAlertSettingsSslCertificateOutput
}

type HeartbeatCheckAlertSettingsSslCertificateArgs struct {
	// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold pulumi.IntPtrInput `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (HeartbeatCheckAlertSettingsSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsSslCertificateArgs) ToHeartbeatCheckAlertSettingsSslCertificateOutput() HeartbeatCheckAlertSettingsSslCertificateOutput {
	return i.ToHeartbeatCheckAlertSettingsSslCertificateOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsSslCertificateArgs) ToHeartbeatCheckAlertSettingsSslCertificateOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsSslCertificateOutput)
}

// HeartbeatCheckAlertSettingsSslCertificateArrayInput is an input type that accepts HeartbeatCheckAlertSettingsSslCertificateArray and HeartbeatCheckAlertSettingsSslCertificateArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsSslCertificateArrayInput` via:
//
//	HeartbeatCheckAlertSettingsSslCertificateArray{ HeartbeatCheckAlertSettingsSslCertificateArgs{...} }
type HeartbeatCheckAlertSettingsSslCertificateArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsSslCertificateArrayOutput() HeartbeatCheckAlertSettingsSslCertificateArrayOutput
	ToHeartbeatCheckAlertSettingsSslCertificateArrayOutputWithContext(context.Context) HeartbeatCheckAlertSettingsSslCertificateArrayOutput
}

type HeartbeatCheckAlertSettingsSslCertificateArray []HeartbeatCheckAlertSettingsSslCertificateInput

func (HeartbeatCheckAlertSettingsSslCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsSslCertificateArray) ToHeartbeatCheckAlertSettingsSslCertificateArrayOutput() HeartbeatCheckAlertSettingsSslCertificateArrayOutput {
	return i.ToHeartbeatCheckAlertSettingsSslCertificateArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsSslCertificateArray) ToHeartbeatCheckAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsSslCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsSslCertificateArrayOutput)
}

type HeartbeatCheckAlertSettingsSslCertificateOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsSslCertificateOutput) ToHeartbeatCheckAlertSettingsSslCertificateOutput() HeartbeatCheckAlertSettingsSslCertificateOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsSslCertificateOutput) ToHeartbeatCheckAlertSettingsSslCertificateOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsSslCertificateOutput {
	return o
}

// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
func (o HeartbeatCheckAlertSettingsSslCertificateOutput) AlertThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsSslCertificate) *int { return v.AlertThreshold }).(pulumi.IntPtrOutput)
}

// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
func (o HeartbeatCheckAlertSettingsSslCertificateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsSslCertificate) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type HeartbeatCheckAlertSettingsSslCertificateArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsSslCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsSslCertificate)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsSslCertificateArrayOutput) ToHeartbeatCheckAlertSettingsSslCertificateArrayOutput() HeartbeatCheckAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsSslCertificateArrayOutput) ToHeartbeatCheckAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsSslCertificateArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckAlertSettingsSslCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatCheckAlertSettingsSslCertificate {
		return vs[0].([]HeartbeatCheckAlertSettingsSslCertificate)[vs[1].(int)]
	}).(HeartbeatCheckAlertSettingsSslCertificateOutput)
}

type HeartbeatCheckAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// HeartbeatCheckAlertSettingsTimeBasedEscalationInput is an input type that accepts HeartbeatCheckAlertSettingsTimeBasedEscalationArgs and HeartbeatCheckAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsTimeBasedEscalationInput` via:
//
//	HeartbeatCheckAlertSettingsTimeBasedEscalationArgs{...}
type HeartbeatCheckAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutput() HeartbeatCheckAlertSettingsTimeBasedEscalationOutput
	ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) HeartbeatCheckAlertSettingsTimeBasedEscalationOutput
}

type HeartbeatCheckAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (HeartbeatCheckAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsTimeBasedEscalationArgs) ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutput() HeartbeatCheckAlertSettingsTimeBasedEscalationOutput {
	return i.ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsTimeBasedEscalationArgs) ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsTimeBasedEscalationOutput)
}

// HeartbeatCheckAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts HeartbeatCheckAlertSettingsTimeBasedEscalationArray and HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	HeartbeatCheckAlertSettingsTimeBasedEscalationArray{ HeartbeatCheckAlertSettingsTimeBasedEscalationArgs{...} }
type HeartbeatCheckAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput() HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput
	ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput
}

type HeartbeatCheckAlertSettingsTimeBasedEscalationArray []HeartbeatCheckAlertSettingsTimeBasedEscalationInput

func (HeartbeatCheckAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i HeartbeatCheckAlertSettingsTimeBasedEscalationArray) ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput() HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckAlertSettingsTimeBasedEscalationArray) ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type HeartbeatCheckAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsTimeBasedEscalationOutput) ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutput() HeartbeatCheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsTimeBasedEscalationOutput) ToHeartbeatCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o HeartbeatCheckAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput) ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput() HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput) ToHeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatCheckAlertSettingsTimeBasedEscalation {
		return vs[0].([]HeartbeatCheckAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(HeartbeatCheckAlertSettingsTimeBasedEscalationOutput)
}

type HeartbeatCheckHeartbeat struct {
	// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
	Grace int `pulumi:"grace"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	GraceUnit string `pulumi:"graceUnit"`
	// How often you expect a ping to the ping URL.
	Period int `pulumi:"period"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	PeriodUnit string `pulumi:"periodUnit"`
	// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
	PingToken *string `pulumi:"pingToken"`
}

// HeartbeatCheckHeartbeatInput is an input type that accepts HeartbeatCheckHeartbeatArgs and HeartbeatCheckHeartbeatOutput values.
// You can construct a concrete instance of `HeartbeatCheckHeartbeatInput` via:
//
//	HeartbeatCheckHeartbeatArgs{...}
type HeartbeatCheckHeartbeatInput interface {
	pulumi.Input

	ToHeartbeatCheckHeartbeatOutput() HeartbeatCheckHeartbeatOutput
	ToHeartbeatCheckHeartbeatOutputWithContext(context.Context) HeartbeatCheckHeartbeatOutput
}

type HeartbeatCheckHeartbeatArgs struct {
	// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
	Grace pulumi.IntInput `pulumi:"grace"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	GraceUnit pulumi.StringInput `pulumi:"graceUnit"`
	// How often you expect a ping to the ping URL.
	Period pulumi.IntInput `pulumi:"period"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
	PingToken pulumi.StringPtrInput `pulumi:"pingToken"`
}

func (HeartbeatCheckHeartbeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckHeartbeat)(nil)).Elem()
}

func (i HeartbeatCheckHeartbeatArgs) ToHeartbeatCheckHeartbeatOutput() HeartbeatCheckHeartbeatOutput {
	return i.ToHeartbeatCheckHeartbeatOutputWithContext(context.Background())
}

func (i HeartbeatCheckHeartbeatArgs) ToHeartbeatCheckHeartbeatOutputWithContext(ctx context.Context) HeartbeatCheckHeartbeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckHeartbeatOutput)
}

func (i HeartbeatCheckHeartbeatArgs) ToHeartbeatCheckHeartbeatPtrOutput() HeartbeatCheckHeartbeatPtrOutput {
	return i.ToHeartbeatCheckHeartbeatPtrOutputWithContext(context.Background())
}

func (i HeartbeatCheckHeartbeatArgs) ToHeartbeatCheckHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatCheckHeartbeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckHeartbeatOutput).ToHeartbeatCheckHeartbeatPtrOutputWithContext(ctx)
}

// HeartbeatCheckHeartbeatPtrInput is an input type that accepts HeartbeatCheckHeartbeatArgs, HeartbeatCheckHeartbeatPtr and HeartbeatCheckHeartbeatPtrOutput values.
// You can construct a concrete instance of `HeartbeatCheckHeartbeatPtrInput` via:
//
//	        HeartbeatCheckHeartbeatArgs{...}
//
//	or:
//
//	        nil
type HeartbeatCheckHeartbeatPtrInput interface {
	pulumi.Input

	ToHeartbeatCheckHeartbeatPtrOutput() HeartbeatCheckHeartbeatPtrOutput
	ToHeartbeatCheckHeartbeatPtrOutputWithContext(context.Context) HeartbeatCheckHeartbeatPtrOutput
}

type heartbeatCheckHeartbeatPtrType HeartbeatCheckHeartbeatArgs

func HeartbeatCheckHeartbeatPtr(v *HeartbeatCheckHeartbeatArgs) HeartbeatCheckHeartbeatPtrInput {
	return (*heartbeatCheckHeartbeatPtrType)(v)
}

func (*heartbeatCheckHeartbeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatCheckHeartbeat)(nil)).Elem()
}

func (i *heartbeatCheckHeartbeatPtrType) ToHeartbeatCheckHeartbeatPtrOutput() HeartbeatCheckHeartbeatPtrOutput {
	return i.ToHeartbeatCheckHeartbeatPtrOutputWithContext(context.Background())
}

func (i *heartbeatCheckHeartbeatPtrType) ToHeartbeatCheckHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatCheckHeartbeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckHeartbeatPtrOutput)
}

type HeartbeatCheckHeartbeatOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckHeartbeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatCheckHeartbeat)(nil)).Elem()
}

func (o HeartbeatCheckHeartbeatOutput) ToHeartbeatCheckHeartbeatOutput() HeartbeatCheckHeartbeatOutput {
	return o
}

func (o HeartbeatCheckHeartbeatOutput) ToHeartbeatCheckHeartbeatOutputWithContext(ctx context.Context) HeartbeatCheckHeartbeatOutput {
	return o
}

func (o HeartbeatCheckHeartbeatOutput) ToHeartbeatCheckHeartbeatPtrOutput() HeartbeatCheckHeartbeatPtrOutput {
	return o.ToHeartbeatCheckHeartbeatPtrOutputWithContext(context.Background())
}

func (o HeartbeatCheckHeartbeatOutput) ToHeartbeatCheckHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatCheckHeartbeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeartbeatCheckHeartbeat) *HeartbeatCheckHeartbeat {
		return &v
	}).(HeartbeatCheckHeartbeatPtrOutput)
}

// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
func (o HeartbeatCheckHeartbeatOutput) Grace() pulumi.IntOutput {
	return o.ApplyT(func(v HeartbeatCheckHeartbeat) int { return v.Grace }).(pulumi.IntOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatCheckHeartbeatOutput) GraceUnit() pulumi.StringOutput {
	return o.ApplyT(func(v HeartbeatCheckHeartbeat) string { return v.GraceUnit }).(pulumi.StringOutput)
}

// How often you expect a ping to the ping URL.
func (o HeartbeatCheckHeartbeatOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v HeartbeatCheckHeartbeat) int { return v.Period }).(pulumi.IntOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatCheckHeartbeatOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v HeartbeatCheckHeartbeat) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
func (o HeartbeatCheckHeartbeatOutput) PingToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeartbeatCheckHeartbeat) *string { return v.PingToken }).(pulumi.StringPtrOutput)
}

type HeartbeatCheckHeartbeatPtrOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckHeartbeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatCheckHeartbeat)(nil)).Elem()
}

func (o HeartbeatCheckHeartbeatPtrOutput) ToHeartbeatCheckHeartbeatPtrOutput() HeartbeatCheckHeartbeatPtrOutput {
	return o
}

func (o HeartbeatCheckHeartbeatPtrOutput) ToHeartbeatCheckHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatCheckHeartbeatPtrOutput {
	return o
}

func (o HeartbeatCheckHeartbeatPtrOutput) Elem() HeartbeatCheckHeartbeatOutput {
	return o.ApplyT(func(v *HeartbeatCheckHeartbeat) HeartbeatCheckHeartbeat {
		if v != nil {
			return *v
		}
		var ret HeartbeatCheckHeartbeat
		return ret
	}).(HeartbeatCheckHeartbeatOutput)
}

// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
func (o HeartbeatCheckHeartbeatPtrOutput) Grace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheckHeartbeat) *int {
		if v == nil {
			return nil
		}
		return &v.Grace
	}).(pulumi.IntPtrOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatCheckHeartbeatPtrOutput) GraceUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheckHeartbeat) *string {
		if v == nil {
			return nil
		}
		return &v.GraceUnit
	}).(pulumi.StringPtrOutput)
}

// How often you expect a ping to the ping URL.
func (o HeartbeatCheckHeartbeatPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheckHeartbeat) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatCheckHeartbeatPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheckHeartbeat) *string {
		if v == nil {
			return nil
		}
		return &v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
func (o HeartbeatCheckHeartbeatPtrOutput) PingToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheckHeartbeat) *string {
		if v == nil {
			return nil
		}
		return v.PingToken
	}).(pulumi.StringPtrOutput)
}

type HeartbeatMonitorAlertChannelSubscription struct {
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// HeartbeatMonitorAlertChannelSubscriptionInput is an input type that accepts HeartbeatMonitorAlertChannelSubscriptionArgs and HeartbeatMonitorAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertChannelSubscriptionInput` via:
//
//	HeartbeatMonitorAlertChannelSubscriptionArgs{...}
type HeartbeatMonitorAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertChannelSubscriptionOutput() HeartbeatMonitorAlertChannelSubscriptionOutput
	ToHeartbeatMonitorAlertChannelSubscriptionOutputWithContext(context.Context) HeartbeatMonitorAlertChannelSubscriptionOutput
}

type HeartbeatMonitorAlertChannelSubscriptionArgs struct {
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (HeartbeatMonitorAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertChannelSubscription)(nil)).Elem()
}

func (i HeartbeatMonitorAlertChannelSubscriptionArgs) ToHeartbeatMonitorAlertChannelSubscriptionOutput() HeartbeatMonitorAlertChannelSubscriptionOutput {
	return i.ToHeartbeatMonitorAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertChannelSubscriptionArgs) ToHeartbeatMonitorAlertChannelSubscriptionOutputWithContext(ctx context.Context) HeartbeatMonitorAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertChannelSubscriptionOutput)
}

// HeartbeatMonitorAlertChannelSubscriptionArrayInput is an input type that accepts HeartbeatMonitorAlertChannelSubscriptionArray and HeartbeatMonitorAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertChannelSubscriptionArrayInput` via:
//
//	HeartbeatMonitorAlertChannelSubscriptionArray{ HeartbeatMonitorAlertChannelSubscriptionArgs{...} }
type HeartbeatMonitorAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertChannelSubscriptionArrayOutput() HeartbeatMonitorAlertChannelSubscriptionArrayOutput
	ToHeartbeatMonitorAlertChannelSubscriptionArrayOutputWithContext(context.Context) HeartbeatMonitorAlertChannelSubscriptionArrayOutput
}

type HeartbeatMonitorAlertChannelSubscriptionArray []HeartbeatMonitorAlertChannelSubscriptionInput

func (HeartbeatMonitorAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertChannelSubscription)(nil)).Elem()
}

func (i HeartbeatMonitorAlertChannelSubscriptionArray) ToHeartbeatMonitorAlertChannelSubscriptionArrayOutput() HeartbeatMonitorAlertChannelSubscriptionArrayOutput {
	return i.ToHeartbeatMonitorAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertChannelSubscriptionArray) ToHeartbeatMonitorAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertChannelSubscriptionArrayOutput)
}

type HeartbeatMonitorAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertChannelSubscription)(nil)).Elem()
}

func (o HeartbeatMonitorAlertChannelSubscriptionOutput) ToHeartbeatMonitorAlertChannelSubscriptionOutput() HeartbeatMonitorAlertChannelSubscriptionOutput {
	return o
}

func (o HeartbeatMonitorAlertChannelSubscriptionOutput) ToHeartbeatMonitorAlertChannelSubscriptionOutputWithContext(ctx context.Context) HeartbeatMonitorAlertChannelSubscriptionOutput {
	return o
}

func (o HeartbeatMonitorAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o HeartbeatMonitorAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type HeartbeatMonitorAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertChannelSubscription)(nil)).Elem()
}

func (o HeartbeatMonitorAlertChannelSubscriptionArrayOutput) ToHeartbeatMonitorAlertChannelSubscriptionArrayOutput() HeartbeatMonitorAlertChannelSubscriptionArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertChannelSubscriptionArrayOutput) ToHeartbeatMonitorAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertChannelSubscriptionArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatMonitorAlertChannelSubscription {
		return vs[0].([]HeartbeatMonitorAlertChannelSubscription)[vs[1].(int)]
	}).(HeartbeatMonitorAlertChannelSubscriptionOutput)
}

type HeartbeatMonitorAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               *string                                                    `pulumi:"escalationType"`
	ParallelRunFailureThresholds []HeartbeatMonitorAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	Reminders                    []HeartbeatMonitorAlertSettingsReminder                    `pulumi:"reminders"`
	RunBasedEscalations          []HeartbeatMonitorAlertSettingsRunBasedEscalation          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      []HeartbeatMonitorAlertSettingsSslCertificate      `pulumi:"sslCertificates"`
	TimeBasedEscalations []HeartbeatMonitorAlertSettingsTimeBasedEscalation `pulumi:"timeBasedEscalations"`
}

// HeartbeatMonitorAlertSettingsInput is an input type that accepts HeartbeatMonitorAlertSettingsArgs and HeartbeatMonitorAlertSettingsOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsInput` via:
//
//	HeartbeatMonitorAlertSettingsArgs{...}
type HeartbeatMonitorAlertSettingsInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsOutput() HeartbeatMonitorAlertSettingsOutput
	ToHeartbeatMonitorAlertSettingsOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsOutput
}

type HeartbeatMonitorAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               pulumi.StringPtrInput                                              `pulumi:"escalationType"`
	ParallelRunFailureThresholds HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	Reminders                    HeartbeatMonitorAlertSettingsReminderArrayInput                    `pulumi:"reminders"`
	RunBasedEscalations          HeartbeatMonitorAlertSettingsRunBasedEscalationArrayInput          `pulumi:"runBasedEscalations"`
	// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
	SslCertificates      HeartbeatMonitorAlertSettingsSslCertificateArrayInput      `pulumi:"sslCertificates"`
	TimeBasedEscalations HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayInput `pulumi:"timeBasedEscalations"`
}

func (HeartbeatMonitorAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettings)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsArgs) ToHeartbeatMonitorAlertSettingsOutput() HeartbeatMonitorAlertSettingsOutput {
	return i.ToHeartbeatMonitorAlertSettingsOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsArgs) ToHeartbeatMonitorAlertSettingsOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsOutput)
}

func (i HeartbeatMonitorAlertSettingsArgs) ToHeartbeatMonitorAlertSettingsPtrOutput() HeartbeatMonitorAlertSettingsPtrOutput {
	return i.ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsArgs) ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsOutput).ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(ctx)
}

// HeartbeatMonitorAlertSettingsPtrInput is an input type that accepts HeartbeatMonitorAlertSettingsArgs, HeartbeatMonitorAlertSettingsPtr and HeartbeatMonitorAlertSettingsPtrOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsPtrInput` via:
//
//	        HeartbeatMonitorAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type HeartbeatMonitorAlertSettingsPtrInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsPtrOutput() HeartbeatMonitorAlertSettingsPtrOutput
	ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsPtrOutput
}

type heartbeatMonitorAlertSettingsPtrType HeartbeatMonitorAlertSettingsArgs

func HeartbeatMonitorAlertSettingsPtr(v *HeartbeatMonitorAlertSettingsArgs) HeartbeatMonitorAlertSettingsPtrInput {
	return (*heartbeatMonitorAlertSettingsPtrType)(v)
}

func (*heartbeatMonitorAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatMonitorAlertSettings)(nil)).Elem()
}

func (i *heartbeatMonitorAlertSettingsPtrType) ToHeartbeatMonitorAlertSettingsPtrOutput() HeartbeatMonitorAlertSettingsPtrOutput {
	return i.ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *heartbeatMonitorAlertSettingsPtrType) ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsPtrOutput)
}

type HeartbeatMonitorAlertSettingsOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettings)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsOutput) ToHeartbeatMonitorAlertSettingsOutput() HeartbeatMonitorAlertSettingsOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsOutput) ToHeartbeatMonitorAlertSettingsOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsOutput) ToHeartbeatMonitorAlertSettingsPtrOutput() HeartbeatMonitorAlertSettingsPtrOutput {
	return o.ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (o HeartbeatMonitorAlertSettingsOutput) ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeartbeatMonitorAlertSettings) *HeartbeatMonitorAlertSettings {
		return &v
	}).(HeartbeatMonitorAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o HeartbeatMonitorAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

func (o HeartbeatMonitorAlertSettingsOutput) ParallelRunFailureThresholds() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o HeartbeatMonitorAlertSettingsOutput) Reminders() HeartbeatMonitorAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsReminder { return v.Reminders }).(HeartbeatMonitorAlertSettingsReminderArrayOutput)
}

func (o HeartbeatMonitorAlertSettingsOutput) RunBasedEscalations() HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsRunBasedEscalation {
		return v.RunBasedEscalations
	}).(HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o HeartbeatMonitorAlertSettingsOutput) SslCertificates() HeartbeatMonitorAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsSslCertificate {
		return v.SslCertificates
	}).(HeartbeatMonitorAlertSettingsSslCertificateArrayOutput)
}

func (o HeartbeatMonitorAlertSettingsOutput) TimeBasedEscalations() HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsTimeBasedEscalation {
		return v.TimeBasedEscalations
	}).(HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type HeartbeatMonitorAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatMonitorAlertSettings)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) ToHeartbeatMonitorAlertSettingsPtrOutput() HeartbeatMonitorAlertSettingsPtrOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) ToHeartbeatMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsPtrOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) Elem() HeartbeatMonitorAlertSettingsOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) HeartbeatMonitorAlertSettings {
		if v != nil {
			return *v
		}
		var ret HeartbeatMonitorAlertSettings
		return ret
	}).(HeartbeatMonitorAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o HeartbeatMonitorAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) ParallelRunFailureThresholds() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) Reminders() HeartbeatMonitorAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(HeartbeatMonitorAlertSettingsReminderArrayOutput)
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) RunBasedEscalations() HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

// Deprecated: This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
func (o HeartbeatMonitorAlertSettingsPtrOutput) SslCertificates() HeartbeatMonitorAlertSettingsSslCertificateArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsSslCertificate {
		if v == nil {
			return nil
		}
		return v.SslCertificates
	}).(HeartbeatMonitorAlertSettingsSslCertificateArrayOutput)
}

func (o HeartbeatMonitorAlertSettingsPtrOutput) TimeBasedEscalations() HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitorAlertSettings) []HeartbeatMonitorAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type HeartbeatMonitorAlertSettingsParallelRunFailureThreshold struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled *bool `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// HeartbeatMonitorAlertSettingsParallelRunFailureThresholdInput is an input type that accepts HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs and HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsParallelRunFailureThresholdInput` via:
//
//	HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs{...}
type HeartbeatMonitorAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput
	ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput
}

type HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput)
}

// HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray and HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray{ HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs{...} }
type HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput
	ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput
}

type HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray []HeartbeatMonitorAlertSettingsParallelRunFailureThresholdInput

func (HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Applicable only for checks scheduled in parallel in multiple locations.
func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ToHeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatMonitorAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]HeartbeatMonitorAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput)
}

type HeartbeatMonitorAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// HeartbeatMonitorAlertSettingsReminderInput is an input type that accepts HeartbeatMonitorAlertSettingsReminderArgs and HeartbeatMonitorAlertSettingsReminderOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsReminderInput` via:
//
//	HeartbeatMonitorAlertSettingsReminderArgs{...}
type HeartbeatMonitorAlertSettingsReminderInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsReminderOutput() HeartbeatMonitorAlertSettingsReminderOutput
	ToHeartbeatMonitorAlertSettingsReminderOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsReminderOutput
}

type HeartbeatMonitorAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (HeartbeatMonitorAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsReminder)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsReminderArgs) ToHeartbeatMonitorAlertSettingsReminderOutput() HeartbeatMonitorAlertSettingsReminderOutput {
	return i.ToHeartbeatMonitorAlertSettingsReminderOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsReminderArgs) ToHeartbeatMonitorAlertSettingsReminderOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsReminderOutput)
}

// HeartbeatMonitorAlertSettingsReminderArrayInput is an input type that accepts HeartbeatMonitorAlertSettingsReminderArray and HeartbeatMonitorAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsReminderArrayInput` via:
//
//	HeartbeatMonitorAlertSettingsReminderArray{ HeartbeatMonitorAlertSettingsReminderArgs{...} }
type HeartbeatMonitorAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsReminderArrayOutput() HeartbeatMonitorAlertSettingsReminderArrayOutput
	ToHeartbeatMonitorAlertSettingsReminderArrayOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsReminderArrayOutput
}

type HeartbeatMonitorAlertSettingsReminderArray []HeartbeatMonitorAlertSettingsReminderInput

func (HeartbeatMonitorAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsReminder)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsReminderArray) ToHeartbeatMonitorAlertSettingsReminderArrayOutput() HeartbeatMonitorAlertSettingsReminderArrayOutput {
	return i.ToHeartbeatMonitorAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsReminderArray) ToHeartbeatMonitorAlertSettingsReminderArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsReminderArrayOutput)
}

type HeartbeatMonitorAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsReminder)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsReminderOutput) ToHeartbeatMonitorAlertSettingsReminderOutput() HeartbeatMonitorAlertSettingsReminderOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsReminderOutput) ToHeartbeatMonitorAlertSettingsReminderOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o HeartbeatMonitorAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o HeartbeatMonitorAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type HeartbeatMonitorAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsReminder)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsReminderArrayOutput) ToHeartbeatMonitorAlertSettingsReminderArrayOutput() HeartbeatMonitorAlertSettingsReminderArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsReminderArrayOutput) ToHeartbeatMonitorAlertSettingsReminderArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsReminderArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatMonitorAlertSettingsReminder {
		return vs[0].([]HeartbeatMonitorAlertSettingsReminder)[vs[1].(int)]
	}).(HeartbeatMonitorAlertSettingsReminderOutput)
}

type HeartbeatMonitorAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// HeartbeatMonitorAlertSettingsRunBasedEscalationInput is an input type that accepts HeartbeatMonitorAlertSettingsRunBasedEscalationArgs and HeartbeatMonitorAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsRunBasedEscalationInput` via:
//
//	HeartbeatMonitorAlertSettingsRunBasedEscalationArgs{...}
type HeartbeatMonitorAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutput() HeartbeatMonitorAlertSettingsRunBasedEscalationOutput
	ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsRunBasedEscalationOutput
}

type HeartbeatMonitorAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (HeartbeatMonitorAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsRunBasedEscalationArgs) ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutput() HeartbeatMonitorAlertSettingsRunBasedEscalationOutput {
	return i.ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsRunBasedEscalationArgs) ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsRunBasedEscalationOutput)
}

// HeartbeatMonitorAlertSettingsRunBasedEscalationArrayInput is an input type that accepts HeartbeatMonitorAlertSettingsRunBasedEscalationArray and HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsRunBasedEscalationArrayInput` via:
//
//	HeartbeatMonitorAlertSettingsRunBasedEscalationArray{ HeartbeatMonitorAlertSettingsRunBasedEscalationArgs{...} }
type HeartbeatMonitorAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput() HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput
	ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput
}

type HeartbeatMonitorAlertSettingsRunBasedEscalationArray []HeartbeatMonitorAlertSettingsRunBasedEscalationInput

func (HeartbeatMonitorAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsRunBasedEscalationArray) ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput() HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsRunBasedEscalationArray) ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

type HeartbeatMonitorAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsRunBasedEscalationOutput) ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutput() HeartbeatMonitorAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsRunBasedEscalationOutput) ToHeartbeatMonitorAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
func (o HeartbeatMonitorAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput) ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput() HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput) ToHeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatMonitorAlertSettingsRunBasedEscalation {
		return vs[0].([]HeartbeatMonitorAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(HeartbeatMonitorAlertSettingsRunBasedEscalationOutput)
}

type HeartbeatMonitorAlertSettingsSslCertificate struct {
	// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold *int `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
	Enabled *bool `pulumi:"enabled"`
}

// HeartbeatMonitorAlertSettingsSslCertificateInput is an input type that accepts HeartbeatMonitorAlertSettingsSslCertificateArgs and HeartbeatMonitorAlertSettingsSslCertificateOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsSslCertificateInput` via:
//
//	HeartbeatMonitorAlertSettingsSslCertificateArgs{...}
type HeartbeatMonitorAlertSettingsSslCertificateInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsSslCertificateOutput() HeartbeatMonitorAlertSettingsSslCertificateOutput
	ToHeartbeatMonitorAlertSettingsSslCertificateOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsSslCertificateOutput
}

type HeartbeatMonitorAlertSettingsSslCertificateArgs struct {
	// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
	AlertThreshold pulumi.IntPtrInput `pulumi:"alertThreshold"`
	// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (HeartbeatMonitorAlertSettingsSslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsSslCertificate)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsSslCertificateArgs) ToHeartbeatMonitorAlertSettingsSslCertificateOutput() HeartbeatMonitorAlertSettingsSslCertificateOutput {
	return i.ToHeartbeatMonitorAlertSettingsSslCertificateOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsSslCertificateArgs) ToHeartbeatMonitorAlertSettingsSslCertificateOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsSslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsSslCertificateOutput)
}

// HeartbeatMonitorAlertSettingsSslCertificateArrayInput is an input type that accepts HeartbeatMonitorAlertSettingsSslCertificateArray and HeartbeatMonitorAlertSettingsSslCertificateArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsSslCertificateArrayInput` via:
//
//	HeartbeatMonitorAlertSettingsSslCertificateArray{ HeartbeatMonitorAlertSettingsSslCertificateArgs{...} }
type HeartbeatMonitorAlertSettingsSslCertificateArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutput() HeartbeatMonitorAlertSettingsSslCertificateArrayOutput
	ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsSslCertificateArrayOutput
}

type HeartbeatMonitorAlertSettingsSslCertificateArray []HeartbeatMonitorAlertSettingsSslCertificateInput

func (HeartbeatMonitorAlertSettingsSslCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsSslCertificate)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsSslCertificateArray) ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutput() HeartbeatMonitorAlertSettingsSslCertificateArrayOutput {
	return i.ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsSslCertificateArray) ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsSslCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsSslCertificateArrayOutput)
}

type HeartbeatMonitorAlertSettingsSslCertificateOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsSslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsSslCertificate)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsSslCertificateOutput) ToHeartbeatMonitorAlertSettingsSslCertificateOutput() HeartbeatMonitorAlertSettingsSslCertificateOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsSslCertificateOutput) ToHeartbeatMonitorAlertSettingsSslCertificateOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsSslCertificateOutput {
	return o
}

// How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
func (o HeartbeatMonitorAlertSettingsSslCertificateOutput) AlertThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsSslCertificate) *int { return v.AlertThreshold }).(pulumi.IntPtrOutput)
}

// Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
func (o HeartbeatMonitorAlertSettingsSslCertificateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsSslCertificate) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type HeartbeatMonitorAlertSettingsSslCertificateArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsSslCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsSslCertificate)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsSslCertificateArrayOutput) ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutput() HeartbeatMonitorAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsSslCertificateArrayOutput) ToHeartbeatMonitorAlertSettingsSslCertificateArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsSslCertificateArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsSslCertificateArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorAlertSettingsSslCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatMonitorAlertSettingsSslCertificate {
		return vs[0].([]HeartbeatMonitorAlertSettingsSslCertificate)[vs[1].(int)]
	}).(HeartbeatMonitorAlertSettingsSslCertificateOutput)
}

type HeartbeatMonitorAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// HeartbeatMonitorAlertSettingsTimeBasedEscalationInput is an input type that accepts HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs and HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsTimeBasedEscalationInput` via:
//
//	HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs{...}
type HeartbeatMonitorAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutput() HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput
	ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput
}

type HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutput() HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput {
	return i.ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput)
}

// HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts HeartbeatMonitorAlertSettingsTimeBasedEscalationArray and HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	HeartbeatMonitorAlertSettingsTimeBasedEscalationArray{ HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs{...} }
type HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput() HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput
	ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput
}

type HeartbeatMonitorAlertSettingsTimeBasedEscalationArray []HeartbeatMonitorAlertSettingsTimeBasedEscalationInput

func (HeartbeatMonitorAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i HeartbeatMonitorAlertSettingsTimeBasedEscalationArray) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput() HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorAlertSettingsTimeBasedEscalationArray) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutput() HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeartbeatMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput() HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput) ToHeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeartbeatMonitorAlertSettingsTimeBasedEscalation {
		return vs[0].([]HeartbeatMonitorAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput)
}

type HeartbeatMonitorHeartbeat struct {
	// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
	Grace int `pulumi:"grace"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	GraceUnit string `pulumi:"graceUnit"`
	// How often you expect a ping to the ping URL.
	Period int `pulumi:"period"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	PeriodUnit string `pulumi:"periodUnit"`
	// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
	PingToken *string `pulumi:"pingToken"`
}

// HeartbeatMonitorHeartbeatInput is an input type that accepts HeartbeatMonitorHeartbeatArgs and HeartbeatMonitorHeartbeatOutput values.
// You can construct a concrete instance of `HeartbeatMonitorHeartbeatInput` via:
//
//	HeartbeatMonitorHeartbeatArgs{...}
type HeartbeatMonitorHeartbeatInput interface {
	pulumi.Input

	ToHeartbeatMonitorHeartbeatOutput() HeartbeatMonitorHeartbeatOutput
	ToHeartbeatMonitorHeartbeatOutputWithContext(context.Context) HeartbeatMonitorHeartbeatOutput
}

type HeartbeatMonitorHeartbeatArgs struct {
	// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
	Grace pulumi.IntInput `pulumi:"grace"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	GraceUnit pulumi.StringInput `pulumi:"graceUnit"`
	// How often you expect a ping to the ping URL.
	Period pulumi.IntInput `pulumi:"period"`
	// Possible values `seconds`, `minutes`, `hours` and `days`.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
	PingToken pulumi.StringPtrInput `pulumi:"pingToken"`
}

func (HeartbeatMonitorHeartbeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorHeartbeat)(nil)).Elem()
}

func (i HeartbeatMonitorHeartbeatArgs) ToHeartbeatMonitorHeartbeatOutput() HeartbeatMonitorHeartbeatOutput {
	return i.ToHeartbeatMonitorHeartbeatOutputWithContext(context.Background())
}

func (i HeartbeatMonitorHeartbeatArgs) ToHeartbeatMonitorHeartbeatOutputWithContext(ctx context.Context) HeartbeatMonitorHeartbeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorHeartbeatOutput)
}

func (i HeartbeatMonitorHeartbeatArgs) ToHeartbeatMonitorHeartbeatPtrOutput() HeartbeatMonitorHeartbeatPtrOutput {
	return i.ToHeartbeatMonitorHeartbeatPtrOutputWithContext(context.Background())
}

func (i HeartbeatMonitorHeartbeatArgs) ToHeartbeatMonitorHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatMonitorHeartbeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorHeartbeatOutput).ToHeartbeatMonitorHeartbeatPtrOutputWithContext(ctx)
}

// HeartbeatMonitorHeartbeatPtrInput is an input type that accepts HeartbeatMonitorHeartbeatArgs, HeartbeatMonitorHeartbeatPtr and HeartbeatMonitorHeartbeatPtrOutput values.
// You can construct a concrete instance of `HeartbeatMonitorHeartbeatPtrInput` via:
//
//	        HeartbeatMonitorHeartbeatArgs{...}
//
//	or:
//
//	        nil
type HeartbeatMonitorHeartbeatPtrInput interface {
	pulumi.Input

	ToHeartbeatMonitorHeartbeatPtrOutput() HeartbeatMonitorHeartbeatPtrOutput
	ToHeartbeatMonitorHeartbeatPtrOutputWithContext(context.Context) HeartbeatMonitorHeartbeatPtrOutput
}

type heartbeatMonitorHeartbeatPtrType HeartbeatMonitorHeartbeatArgs

func HeartbeatMonitorHeartbeatPtr(v *HeartbeatMonitorHeartbeatArgs) HeartbeatMonitorHeartbeatPtrInput {
	return (*heartbeatMonitorHeartbeatPtrType)(v)
}

func (*heartbeatMonitorHeartbeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatMonitorHeartbeat)(nil)).Elem()
}

func (i *heartbeatMonitorHeartbeatPtrType) ToHeartbeatMonitorHeartbeatPtrOutput() HeartbeatMonitorHeartbeatPtrOutput {
	return i.ToHeartbeatMonitorHeartbeatPtrOutputWithContext(context.Background())
}

func (i *heartbeatMonitorHeartbeatPtrType) ToHeartbeatMonitorHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatMonitorHeartbeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorHeartbeatPtrOutput)
}

type HeartbeatMonitorHeartbeatOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorHeartbeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeartbeatMonitorHeartbeat)(nil)).Elem()
}

func (o HeartbeatMonitorHeartbeatOutput) ToHeartbeatMonitorHeartbeatOutput() HeartbeatMonitorHeartbeatOutput {
	return o
}

func (o HeartbeatMonitorHeartbeatOutput) ToHeartbeatMonitorHeartbeatOutputWithContext(ctx context.Context) HeartbeatMonitorHeartbeatOutput {
	return o
}

func (o HeartbeatMonitorHeartbeatOutput) ToHeartbeatMonitorHeartbeatPtrOutput() HeartbeatMonitorHeartbeatPtrOutput {
	return o.ToHeartbeatMonitorHeartbeatPtrOutputWithContext(context.Background())
}

func (o HeartbeatMonitorHeartbeatOutput) ToHeartbeatMonitorHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatMonitorHeartbeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeartbeatMonitorHeartbeat) *HeartbeatMonitorHeartbeat {
		return &v
	}).(HeartbeatMonitorHeartbeatPtrOutput)
}

// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
func (o HeartbeatMonitorHeartbeatOutput) Grace() pulumi.IntOutput {
	return o.ApplyT(func(v HeartbeatMonitorHeartbeat) int { return v.Grace }).(pulumi.IntOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatMonitorHeartbeatOutput) GraceUnit() pulumi.StringOutput {
	return o.ApplyT(func(v HeartbeatMonitorHeartbeat) string { return v.GraceUnit }).(pulumi.StringOutput)
}

// How often you expect a ping to the ping URL.
func (o HeartbeatMonitorHeartbeatOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v HeartbeatMonitorHeartbeat) int { return v.Period }).(pulumi.IntOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatMonitorHeartbeatOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v HeartbeatMonitorHeartbeat) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
func (o HeartbeatMonitorHeartbeatOutput) PingToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeartbeatMonitorHeartbeat) *string { return v.PingToken }).(pulumi.StringPtrOutput)
}

type HeartbeatMonitorHeartbeatPtrOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorHeartbeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatMonitorHeartbeat)(nil)).Elem()
}

func (o HeartbeatMonitorHeartbeatPtrOutput) ToHeartbeatMonitorHeartbeatPtrOutput() HeartbeatMonitorHeartbeatPtrOutput {
	return o
}

func (o HeartbeatMonitorHeartbeatPtrOutput) ToHeartbeatMonitorHeartbeatPtrOutputWithContext(ctx context.Context) HeartbeatMonitorHeartbeatPtrOutput {
	return o
}

func (o HeartbeatMonitorHeartbeatPtrOutput) Elem() HeartbeatMonitorHeartbeatOutput {
	return o.ApplyT(func(v *HeartbeatMonitorHeartbeat) HeartbeatMonitorHeartbeat {
		if v != nil {
			return *v
		}
		var ret HeartbeatMonitorHeartbeat
		return ret
	}).(HeartbeatMonitorHeartbeatOutput)
}

// How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
func (o HeartbeatMonitorHeartbeatPtrOutput) Grace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitorHeartbeat) *int {
		if v == nil {
			return nil
		}
		return &v.Grace
	}).(pulumi.IntPtrOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatMonitorHeartbeatPtrOutput) GraceUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitorHeartbeat) *string {
		if v == nil {
			return nil
		}
		return &v.GraceUnit
	}).(pulumi.StringPtrOutput)
}

// How often you expect a ping to the ping URL.
func (o HeartbeatMonitorHeartbeatPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitorHeartbeat) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

// Possible values `seconds`, `minutes`, `hours` and `days`.
func (o HeartbeatMonitorHeartbeatPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitorHeartbeat) *string {
		if v == nil {
			return nil
		}
		return &v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

// Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
func (o HeartbeatMonitorHeartbeatPtrOutput) PingToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitorHeartbeat) *string {
		if v == nil {
			return nil
		}
		return v.PingToken
	}).(pulumi.StringPtrOutput)
}

type StatusPageCard struct {
	// The name of the card.
	Name string `pulumi:"name"`
	// A list of services to attach to the card.
	ServiceAttachments []StatusPageCardServiceAttachment `pulumi:"serviceAttachments"`
}

// StatusPageCardInput is an input type that accepts StatusPageCardArgs and StatusPageCardOutput values.
// You can construct a concrete instance of `StatusPageCardInput` via:
//
//	StatusPageCardArgs{...}
type StatusPageCardInput interface {
	pulumi.Input

	ToStatusPageCardOutput() StatusPageCardOutput
	ToStatusPageCardOutputWithContext(context.Context) StatusPageCardOutput
}

type StatusPageCardArgs struct {
	// The name of the card.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of services to attach to the card.
	ServiceAttachments StatusPageCardServiceAttachmentArrayInput `pulumi:"serviceAttachments"`
}

func (StatusPageCardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusPageCard)(nil)).Elem()
}

func (i StatusPageCardArgs) ToStatusPageCardOutput() StatusPageCardOutput {
	return i.ToStatusPageCardOutputWithContext(context.Background())
}

func (i StatusPageCardArgs) ToStatusPageCardOutputWithContext(ctx context.Context) StatusPageCardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageCardOutput)
}

// StatusPageCardArrayInput is an input type that accepts StatusPageCardArray and StatusPageCardArrayOutput values.
// You can construct a concrete instance of `StatusPageCardArrayInput` via:
//
//	StatusPageCardArray{ StatusPageCardArgs{...} }
type StatusPageCardArrayInput interface {
	pulumi.Input

	ToStatusPageCardArrayOutput() StatusPageCardArrayOutput
	ToStatusPageCardArrayOutputWithContext(context.Context) StatusPageCardArrayOutput
}

type StatusPageCardArray []StatusPageCardInput

func (StatusPageCardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusPageCard)(nil)).Elem()
}

func (i StatusPageCardArray) ToStatusPageCardArrayOutput() StatusPageCardArrayOutput {
	return i.ToStatusPageCardArrayOutputWithContext(context.Background())
}

func (i StatusPageCardArray) ToStatusPageCardArrayOutputWithContext(ctx context.Context) StatusPageCardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageCardArrayOutput)
}

type StatusPageCardOutput struct{ *pulumi.OutputState }

func (StatusPageCardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusPageCard)(nil)).Elem()
}

func (o StatusPageCardOutput) ToStatusPageCardOutput() StatusPageCardOutput {
	return o
}

func (o StatusPageCardOutput) ToStatusPageCardOutputWithContext(ctx context.Context) StatusPageCardOutput {
	return o
}

// The name of the card.
func (o StatusPageCardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StatusPageCard) string { return v.Name }).(pulumi.StringOutput)
}

// A list of services to attach to the card.
func (o StatusPageCardOutput) ServiceAttachments() StatusPageCardServiceAttachmentArrayOutput {
	return o.ApplyT(func(v StatusPageCard) []StatusPageCardServiceAttachment { return v.ServiceAttachments }).(StatusPageCardServiceAttachmentArrayOutput)
}

type StatusPageCardArrayOutput struct{ *pulumi.OutputState }

func (StatusPageCardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusPageCard)(nil)).Elem()
}

func (o StatusPageCardArrayOutput) ToStatusPageCardArrayOutput() StatusPageCardArrayOutput {
	return o
}

func (o StatusPageCardArrayOutput) ToStatusPageCardArrayOutputWithContext(ctx context.Context) StatusPageCardArrayOutput {
	return o
}

func (o StatusPageCardArrayOutput) Index(i pulumi.IntInput) StatusPageCardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusPageCard {
		return vs[0].([]StatusPageCard)[vs[1].(int)]
	}).(StatusPageCardOutput)
}

type StatusPageCardServiceAttachment struct {
	// The ID of the service.
	ServiceId string `pulumi:"serviceId"`
}

// StatusPageCardServiceAttachmentInput is an input type that accepts StatusPageCardServiceAttachmentArgs and StatusPageCardServiceAttachmentOutput values.
// You can construct a concrete instance of `StatusPageCardServiceAttachmentInput` via:
//
//	StatusPageCardServiceAttachmentArgs{...}
type StatusPageCardServiceAttachmentInput interface {
	pulumi.Input

	ToStatusPageCardServiceAttachmentOutput() StatusPageCardServiceAttachmentOutput
	ToStatusPageCardServiceAttachmentOutputWithContext(context.Context) StatusPageCardServiceAttachmentOutput
}

type StatusPageCardServiceAttachmentArgs struct {
	// The ID of the service.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (StatusPageCardServiceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusPageCardServiceAttachment)(nil)).Elem()
}

func (i StatusPageCardServiceAttachmentArgs) ToStatusPageCardServiceAttachmentOutput() StatusPageCardServiceAttachmentOutput {
	return i.ToStatusPageCardServiceAttachmentOutputWithContext(context.Background())
}

func (i StatusPageCardServiceAttachmentArgs) ToStatusPageCardServiceAttachmentOutputWithContext(ctx context.Context) StatusPageCardServiceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageCardServiceAttachmentOutput)
}

// StatusPageCardServiceAttachmentArrayInput is an input type that accepts StatusPageCardServiceAttachmentArray and StatusPageCardServiceAttachmentArrayOutput values.
// You can construct a concrete instance of `StatusPageCardServiceAttachmentArrayInput` via:
//
//	StatusPageCardServiceAttachmentArray{ StatusPageCardServiceAttachmentArgs{...} }
type StatusPageCardServiceAttachmentArrayInput interface {
	pulumi.Input

	ToStatusPageCardServiceAttachmentArrayOutput() StatusPageCardServiceAttachmentArrayOutput
	ToStatusPageCardServiceAttachmentArrayOutputWithContext(context.Context) StatusPageCardServiceAttachmentArrayOutput
}

type StatusPageCardServiceAttachmentArray []StatusPageCardServiceAttachmentInput

func (StatusPageCardServiceAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusPageCardServiceAttachment)(nil)).Elem()
}

func (i StatusPageCardServiceAttachmentArray) ToStatusPageCardServiceAttachmentArrayOutput() StatusPageCardServiceAttachmentArrayOutput {
	return i.ToStatusPageCardServiceAttachmentArrayOutputWithContext(context.Background())
}

func (i StatusPageCardServiceAttachmentArray) ToStatusPageCardServiceAttachmentArrayOutputWithContext(ctx context.Context) StatusPageCardServiceAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageCardServiceAttachmentArrayOutput)
}

type StatusPageCardServiceAttachmentOutput struct{ *pulumi.OutputState }

func (StatusPageCardServiceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusPageCardServiceAttachment)(nil)).Elem()
}

func (o StatusPageCardServiceAttachmentOutput) ToStatusPageCardServiceAttachmentOutput() StatusPageCardServiceAttachmentOutput {
	return o
}

func (o StatusPageCardServiceAttachmentOutput) ToStatusPageCardServiceAttachmentOutputWithContext(ctx context.Context) StatusPageCardServiceAttachmentOutput {
	return o
}

// The ID of the service.
func (o StatusPageCardServiceAttachmentOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v StatusPageCardServiceAttachment) string { return v.ServiceId }).(pulumi.StringOutput)
}

type StatusPageCardServiceAttachmentArrayOutput struct{ *pulumi.OutputState }

func (StatusPageCardServiceAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusPageCardServiceAttachment)(nil)).Elem()
}

func (o StatusPageCardServiceAttachmentArrayOutput) ToStatusPageCardServiceAttachmentArrayOutput() StatusPageCardServiceAttachmentArrayOutput {
	return o
}

func (o StatusPageCardServiceAttachmentArrayOutput) ToStatusPageCardServiceAttachmentArrayOutputWithContext(ctx context.Context) StatusPageCardServiceAttachmentArrayOutput {
	return o
}

func (o StatusPageCardServiceAttachmentArrayOutput) Index(i pulumi.IntInput) StatusPageCardServiceAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusPageCardServiceAttachment {
		return vs[0].([]StatusPageCardServiceAttachment)[vs[1].(int)]
	}).(StatusPageCardServiceAttachmentOutput)
}

type TcpCheckAlertChannelSubscription struct {
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// TcpCheckAlertChannelSubscriptionInput is an input type that accepts TcpCheckAlertChannelSubscriptionArgs and TcpCheckAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `TcpCheckAlertChannelSubscriptionInput` via:
//
//	TcpCheckAlertChannelSubscriptionArgs{...}
type TcpCheckAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToTcpCheckAlertChannelSubscriptionOutput() TcpCheckAlertChannelSubscriptionOutput
	ToTcpCheckAlertChannelSubscriptionOutputWithContext(context.Context) TcpCheckAlertChannelSubscriptionOutput
}

type TcpCheckAlertChannelSubscriptionArgs struct {
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (TcpCheckAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertChannelSubscription)(nil)).Elem()
}

func (i TcpCheckAlertChannelSubscriptionArgs) ToTcpCheckAlertChannelSubscriptionOutput() TcpCheckAlertChannelSubscriptionOutput {
	return i.ToTcpCheckAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i TcpCheckAlertChannelSubscriptionArgs) ToTcpCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) TcpCheckAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertChannelSubscriptionOutput)
}

// TcpCheckAlertChannelSubscriptionArrayInput is an input type that accepts TcpCheckAlertChannelSubscriptionArray and TcpCheckAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `TcpCheckAlertChannelSubscriptionArrayInput` via:
//
//	TcpCheckAlertChannelSubscriptionArray{ TcpCheckAlertChannelSubscriptionArgs{...} }
type TcpCheckAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToTcpCheckAlertChannelSubscriptionArrayOutput() TcpCheckAlertChannelSubscriptionArrayOutput
	ToTcpCheckAlertChannelSubscriptionArrayOutputWithContext(context.Context) TcpCheckAlertChannelSubscriptionArrayOutput
}

type TcpCheckAlertChannelSubscriptionArray []TcpCheckAlertChannelSubscriptionInput

func (TcpCheckAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertChannelSubscription)(nil)).Elem()
}

func (i TcpCheckAlertChannelSubscriptionArray) ToTcpCheckAlertChannelSubscriptionArrayOutput() TcpCheckAlertChannelSubscriptionArrayOutput {
	return i.ToTcpCheckAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i TcpCheckAlertChannelSubscriptionArray) ToTcpCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) TcpCheckAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertChannelSubscriptionArrayOutput)
}

type TcpCheckAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertChannelSubscription)(nil)).Elem()
}

func (o TcpCheckAlertChannelSubscriptionOutput) ToTcpCheckAlertChannelSubscriptionOutput() TcpCheckAlertChannelSubscriptionOutput {
	return o
}

func (o TcpCheckAlertChannelSubscriptionOutput) ToTcpCheckAlertChannelSubscriptionOutputWithContext(ctx context.Context) TcpCheckAlertChannelSubscriptionOutput {
	return o
}

func (o TcpCheckAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v TcpCheckAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o TcpCheckAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v TcpCheckAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type TcpCheckAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertChannelSubscription)(nil)).Elem()
}

func (o TcpCheckAlertChannelSubscriptionArrayOutput) ToTcpCheckAlertChannelSubscriptionArrayOutput() TcpCheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o TcpCheckAlertChannelSubscriptionArrayOutput) ToTcpCheckAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) TcpCheckAlertChannelSubscriptionArrayOutput {
	return o
}

func (o TcpCheckAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) TcpCheckAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpCheckAlertChannelSubscription {
		return vs[0].([]TcpCheckAlertChannelSubscription)[vs[1].(int)]
	}).(TcpCheckAlertChannelSubscriptionOutput)
}

type TcpCheckAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               *string                                            `pulumi:"escalationType"`
	ParallelRunFailureThresholds []TcpCheckAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	Reminders                    []TcpCheckAlertSettingsReminder                    `pulumi:"reminders"`
	RunBasedEscalations          []TcpCheckAlertSettingsRunBasedEscalation          `pulumi:"runBasedEscalations"`
	TimeBasedEscalations         []TcpCheckAlertSettingsTimeBasedEscalation         `pulumi:"timeBasedEscalations"`
}

// TcpCheckAlertSettingsInput is an input type that accepts TcpCheckAlertSettingsArgs and TcpCheckAlertSettingsOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsInput` via:
//
//	TcpCheckAlertSettingsArgs{...}
type TcpCheckAlertSettingsInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsOutput() TcpCheckAlertSettingsOutput
	ToTcpCheckAlertSettingsOutputWithContext(context.Context) TcpCheckAlertSettingsOutput
}

type TcpCheckAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               pulumi.StringPtrInput                                      `pulumi:"escalationType"`
	ParallelRunFailureThresholds TcpCheckAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	Reminders                    TcpCheckAlertSettingsReminderArrayInput                    `pulumi:"reminders"`
	RunBasedEscalations          TcpCheckAlertSettingsRunBasedEscalationArrayInput          `pulumi:"runBasedEscalations"`
	TimeBasedEscalations         TcpCheckAlertSettingsTimeBasedEscalationArrayInput         `pulumi:"timeBasedEscalations"`
}

func (TcpCheckAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettings)(nil)).Elem()
}

func (i TcpCheckAlertSettingsArgs) ToTcpCheckAlertSettingsOutput() TcpCheckAlertSettingsOutput {
	return i.ToTcpCheckAlertSettingsOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsArgs) ToTcpCheckAlertSettingsOutputWithContext(ctx context.Context) TcpCheckAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsOutput)
}

func (i TcpCheckAlertSettingsArgs) ToTcpCheckAlertSettingsPtrOutput() TcpCheckAlertSettingsPtrOutput {
	return i.ToTcpCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsArgs) ToTcpCheckAlertSettingsPtrOutputWithContext(ctx context.Context) TcpCheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsOutput).ToTcpCheckAlertSettingsPtrOutputWithContext(ctx)
}

// TcpCheckAlertSettingsPtrInput is an input type that accepts TcpCheckAlertSettingsArgs, TcpCheckAlertSettingsPtr and TcpCheckAlertSettingsPtrOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsPtrInput` via:
//
//	        TcpCheckAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type TcpCheckAlertSettingsPtrInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsPtrOutput() TcpCheckAlertSettingsPtrOutput
	ToTcpCheckAlertSettingsPtrOutputWithContext(context.Context) TcpCheckAlertSettingsPtrOutput
}

type tcpCheckAlertSettingsPtrType TcpCheckAlertSettingsArgs

func TcpCheckAlertSettingsPtr(v *TcpCheckAlertSettingsArgs) TcpCheckAlertSettingsPtrInput {
	return (*tcpCheckAlertSettingsPtrType)(v)
}

func (*tcpCheckAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpCheckAlertSettings)(nil)).Elem()
}

func (i *tcpCheckAlertSettingsPtrType) ToTcpCheckAlertSettingsPtrOutput() TcpCheckAlertSettingsPtrOutput {
	return i.ToTcpCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *tcpCheckAlertSettingsPtrType) ToTcpCheckAlertSettingsPtrOutputWithContext(ctx context.Context) TcpCheckAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsPtrOutput)
}

type TcpCheckAlertSettingsOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettings)(nil)).Elem()
}

func (o TcpCheckAlertSettingsOutput) ToTcpCheckAlertSettingsOutput() TcpCheckAlertSettingsOutput {
	return o
}

func (o TcpCheckAlertSettingsOutput) ToTcpCheckAlertSettingsOutputWithContext(ctx context.Context) TcpCheckAlertSettingsOutput {
	return o
}

func (o TcpCheckAlertSettingsOutput) ToTcpCheckAlertSettingsPtrOutput() TcpCheckAlertSettingsPtrOutput {
	return o.ToTcpCheckAlertSettingsPtrOutputWithContext(context.Background())
}

func (o TcpCheckAlertSettingsOutput) ToTcpCheckAlertSettingsPtrOutputWithContext(ctx context.Context) TcpCheckAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpCheckAlertSettings) *TcpCheckAlertSettings {
		return &v
	}).(TcpCheckAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o TcpCheckAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

func (o TcpCheckAlertSettingsOutput) ParallelRunFailureThresholds() TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v TcpCheckAlertSettings) []TcpCheckAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o TcpCheckAlertSettingsOutput) Reminders() TcpCheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v TcpCheckAlertSettings) []TcpCheckAlertSettingsReminder { return v.Reminders }).(TcpCheckAlertSettingsReminderArrayOutput)
}

func (o TcpCheckAlertSettingsOutput) RunBasedEscalations() TcpCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v TcpCheckAlertSettings) []TcpCheckAlertSettingsRunBasedEscalation { return v.RunBasedEscalations }).(TcpCheckAlertSettingsRunBasedEscalationArrayOutput)
}

func (o TcpCheckAlertSettingsOutput) TimeBasedEscalations() TcpCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v TcpCheckAlertSettings) []TcpCheckAlertSettingsTimeBasedEscalation {
		return v.TimeBasedEscalations
	}).(TcpCheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type TcpCheckAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpCheckAlertSettings)(nil)).Elem()
}

func (o TcpCheckAlertSettingsPtrOutput) ToTcpCheckAlertSettingsPtrOutput() TcpCheckAlertSettingsPtrOutput {
	return o
}

func (o TcpCheckAlertSettingsPtrOutput) ToTcpCheckAlertSettingsPtrOutputWithContext(ctx context.Context) TcpCheckAlertSettingsPtrOutput {
	return o
}

func (o TcpCheckAlertSettingsPtrOutput) Elem() TcpCheckAlertSettingsOutput {
	return o.ApplyT(func(v *TcpCheckAlertSettings) TcpCheckAlertSettings {
		if v != nil {
			return *v
		}
		var ret TcpCheckAlertSettings
		return ret
	}).(TcpCheckAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o TcpCheckAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpCheckAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

func (o TcpCheckAlertSettingsPtrOutput) ParallelRunFailureThresholds() TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *TcpCheckAlertSettings) []TcpCheckAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o TcpCheckAlertSettingsPtrOutput) Reminders() TcpCheckAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *TcpCheckAlertSettings) []TcpCheckAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(TcpCheckAlertSettingsReminderArrayOutput)
}

func (o TcpCheckAlertSettingsPtrOutput) RunBasedEscalations() TcpCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *TcpCheckAlertSettings) []TcpCheckAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(TcpCheckAlertSettingsRunBasedEscalationArrayOutput)
}

func (o TcpCheckAlertSettingsPtrOutput) TimeBasedEscalations() TcpCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *TcpCheckAlertSettings) []TcpCheckAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(TcpCheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type TcpCheckAlertSettingsParallelRunFailureThreshold struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled *bool `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// TcpCheckAlertSettingsParallelRunFailureThresholdInput is an input type that accepts TcpCheckAlertSettingsParallelRunFailureThresholdArgs and TcpCheckAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsParallelRunFailureThresholdInput` via:
//
//	TcpCheckAlertSettingsParallelRunFailureThresholdArgs{...}
type TcpCheckAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsParallelRunFailureThresholdOutput() TcpCheckAlertSettingsParallelRunFailureThresholdOutput
	ToTcpCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) TcpCheckAlertSettingsParallelRunFailureThresholdOutput
}

type TcpCheckAlertSettingsParallelRunFailureThresholdArgs struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (TcpCheckAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i TcpCheckAlertSettingsParallelRunFailureThresholdArgs) ToTcpCheckAlertSettingsParallelRunFailureThresholdOutput() TcpCheckAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToTcpCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsParallelRunFailureThresholdArgs) ToTcpCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) TcpCheckAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsParallelRunFailureThresholdOutput)
}

// TcpCheckAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts TcpCheckAlertSettingsParallelRunFailureThresholdArray and TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	TcpCheckAlertSettingsParallelRunFailureThresholdArray{ TcpCheckAlertSettingsParallelRunFailureThresholdArgs{...} }
type TcpCheckAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput() TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput
	ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput
}

type TcpCheckAlertSettingsParallelRunFailureThresholdArray []TcpCheckAlertSettingsParallelRunFailureThresholdInput

func (TcpCheckAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i TcpCheckAlertSettingsParallelRunFailureThresholdArray) ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput() TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsParallelRunFailureThresholdArray) ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type TcpCheckAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o TcpCheckAlertSettingsParallelRunFailureThresholdOutput) ToTcpCheckAlertSettingsParallelRunFailureThresholdOutput() TcpCheckAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o TcpCheckAlertSettingsParallelRunFailureThresholdOutput) ToTcpCheckAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) TcpCheckAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Applicable only for checks scheduled in parallel in multiple locations.
func (o TcpCheckAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
func (o TcpCheckAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput) ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput() TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput) ToTcpCheckAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) TcpCheckAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpCheckAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]TcpCheckAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(TcpCheckAlertSettingsParallelRunFailureThresholdOutput)
}

type TcpCheckAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// TcpCheckAlertSettingsReminderInput is an input type that accepts TcpCheckAlertSettingsReminderArgs and TcpCheckAlertSettingsReminderOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsReminderInput` via:
//
//	TcpCheckAlertSettingsReminderArgs{...}
type TcpCheckAlertSettingsReminderInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsReminderOutput() TcpCheckAlertSettingsReminderOutput
	ToTcpCheckAlertSettingsReminderOutputWithContext(context.Context) TcpCheckAlertSettingsReminderOutput
}

type TcpCheckAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (TcpCheckAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsReminder)(nil)).Elem()
}

func (i TcpCheckAlertSettingsReminderArgs) ToTcpCheckAlertSettingsReminderOutput() TcpCheckAlertSettingsReminderOutput {
	return i.ToTcpCheckAlertSettingsReminderOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsReminderArgs) ToTcpCheckAlertSettingsReminderOutputWithContext(ctx context.Context) TcpCheckAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsReminderOutput)
}

// TcpCheckAlertSettingsReminderArrayInput is an input type that accepts TcpCheckAlertSettingsReminderArray and TcpCheckAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsReminderArrayInput` via:
//
//	TcpCheckAlertSettingsReminderArray{ TcpCheckAlertSettingsReminderArgs{...} }
type TcpCheckAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsReminderArrayOutput() TcpCheckAlertSettingsReminderArrayOutput
	ToTcpCheckAlertSettingsReminderArrayOutputWithContext(context.Context) TcpCheckAlertSettingsReminderArrayOutput
}

type TcpCheckAlertSettingsReminderArray []TcpCheckAlertSettingsReminderInput

func (TcpCheckAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsReminder)(nil)).Elem()
}

func (i TcpCheckAlertSettingsReminderArray) ToTcpCheckAlertSettingsReminderArrayOutput() TcpCheckAlertSettingsReminderArrayOutput {
	return i.ToTcpCheckAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsReminderArray) ToTcpCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsReminderArrayOutput)
}

type TcpCheckAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsReminder)(nil)).Elem()
}

func (o TcpCheckAlertSettingsReminderOutput) ToTcpCheckAlertSettingsReminderOutput() TcpCheckAlertSettingsReminderOutput {
	return o
}

func (o TcpCheckAlertSettingsReminderOutput) ToTcpCheckAlertSettingsReminderOutputWithContext(ctx context.Context) TcpCheckAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o TcpCheckAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o TcpCheckAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type TcpCheckAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsReminder)(nil)).Elem()
}

func (o TcpCheckAlertSettingsReminderArrayOutput) ToTcpCheckAlertSettingsReminderArrayOutput() TcpCheckAlertSettingsReminderArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsReminderArrayOutput) ToTcpCheckAlertSettingsReminderArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsReminderArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) TcpCheckAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpCheckAlertSettingsReminder {
		return vs[0].([]TcpCheckAlertSettingsReminder)[vs[1].(int)]
	}).(TcpCheckAlertSettingsReminderOutput)
}

type TcpCheckAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// TcpCheckAlertSettingsRunBasedEscalationInput is an input type that accepts TcpCheckAlertSettingsRunBasedEscalationArgs and TcpCheckAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsRunBasedEscalationInput` via:
//
//	TcpCheckAlertSettingsRunBasedEscalationArgs{...}
type TcpCheckAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsRunBasedEscalationOutput() TcpCheckAlertSettingsRunBasedEscalationOutput
	ToTcpCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Context) TcpCheckAlertSettingsRunBasedEscalationOutput
}

type TcpCheckAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (TcpCheckAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i TcpCheckAlertSettingsRunBasedEscalationArgs) ToTcpCheckAlertSettingsRunBasedEscalationOutput() TcpCheckAlertSettingsRunBasedEscalationOutput {
	return i.ToTcpCheckAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsRunBasedEscalationArgs) ToTcpCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) TcpCheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsRunBasedEscalationOutput)
}

// TcpCheckAlertSettingsRunBasedEscalationArrayInput is an input type that accepts TcpCheckAlertSettingsRunBasedEscalationArray and TcpCheckAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsRunBasedEscalationArrayInput` via:
//
//	TcpCheckAlertSettingsRunBasedEscalationArray{ TcpCheckAlertSettingsRunBasedEscalationArgs{...} }
type TcpCheckAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsRunBasedEscalationArrayOutput() TcpCheckAlertSettingsRunBasedEscalationArrayOutput
	ToTcpCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) TcpCheckAlertSettingsRunBasedEscalationArrayOutput
}

type TcpCheckAlertSettingsRunBasedEscalationArray []TcpCheckAlertSettingsRunBasedEscalationInput

func (TcpCheckAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i TcpCheckAlertSettingsRunBasedEscalationArray) ToTcpCheckAlertSettingsRunBasedEscalationArrayOutput() TcpCheckAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToTcpCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsRunBasedEscalationArray) ToTcpCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsRunBasedEscalationArrayOutput)
}

type TcpCheckAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o TcpCheckAlertSettingsRunBasedEscalationOutput) ToTcpCheckAlertSettingsRunBasedEscalationOutput() TcpCheckAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o TcpCheckAlertSettingsRunBasedEscalationOutput) ToTcpCheckAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) TcpCheckAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
func (o TcpCheckAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type TcpCheckAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o TcpCheckAlertSettingsRunBasedEscalationArrayOutput) ToTcpCheckAlertSettingsRunBasedEscalationArrayOutput() TcpCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsRunBasedEscalationArrayOutput) ToTcpCheckAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) TcpCheckAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpCheckAlertSettingsRunBasedEscalation {
		return vs[0].([]TcpCheckAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(TcpCheckAlertSettingsRunBasedEscalationOutput)
}

type TcpCheckAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// TcpCheckAlertSettingsTimeBasedEscalationInput is an input type that accepts TcpCheckAlertSettingsTimeBasedEscalationArgs and TcpCheckAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsTimeBasedEscalationInput` via:
//
//	TcpCheckAlertSettingsTimeBasedEscalationArgs{...}
type TcpCheckAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsTimeBasedEscalationOutput() TcpCheckAlertSettingsTimeBasedEscalationOutput
	ToTcpCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) TcpCheckAlertSettingsTimeBasedEscalationOutput
}

type TcpCheckAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (TcpCheckAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i TcpCheckAlertSettingsTimeBasedEscalationArgs) ToTcpCheckAlertSettingsTimeBasedEscalationOutput() TcpCheckAlertSettingsTimeBasedEscalationOutput {
	return i.ToTcpCheckAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsTimeBasedEscalationArgs) ToTcpCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) TcpCheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsTimeBasedEscalationOutput)
}

// TcpCheckAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts TcpCheckAlertSettingsTimeBasedEscalationArray and TcpCheckAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `TcpCheckAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	TcpCheckAlertSettingsTimeBasedEscalationArray{ TcpCheckAlertSettingsTimeBasedEscalationArgs{...} }
type TcpCheckAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutput() TcpCheckAlertSettingsTimeBasedEscalationArrayOutput
	ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) TcpCheckAlertSettingsTimeBasedEscalationArrayOutput
}

type TcpCheckAlertSettingsTimeBasedEscalationArray []TcpCheckAlertSettingsTimeBasedEscalationInput

func (TcpCheckAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i TcpCheckAlertSettingsTimeBasedEscalationArray) ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutput() TcpCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i TcpCheckAlertSettingsTimeBasedEscalationArray) ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckAlertSettingsTimeBasedEscalationArrayOutput)
}

type TcpCheckAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o TcpCheckAlertSettingsTimeBasedEscalationOutput) ToTcpCheckAlertSettingsTimeBasedEscalationOutput() TcpCheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o TcpCheckAlertSettingsTimeBasedEscalationOutput) ToTcpCheckAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) TcpCheckAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o TcpCheckAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type TcpCheckAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (TcpCheckAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o TcpCheckAlertSettingsTimeBasedEscalationArrayOutput) ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutput() TcpCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsTimeBasedEscalationArrayOutput) ToTcpCheckAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) TcpCheckAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o TcpCheckAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) TcpCheckAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpCheckAlertSettingsTimeBasedEscalation {
		return vs[0].([]TcpCheckAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(TcpCheckAlertSettingsTimeBasedEscalationOutput)
}

type TcpCheckRequest struct {
	// A request can have multiple assertions.
	Assertions []TcpCheckRequestAssertion `pulumi:"assertions"`
	// The data to send to the target host.
	Data *string `pulumi:"data"`
	// The hostname or IP to connect to. Do not include a scheme or a port in this value.
	Hostname string `pulumi:"hostname"`
	// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
	IpFamily *string `pulumi:"ipFamily"`
	// The port number to connect to.
	Port int `pulumi:"port"`
}

// TcpCheckRequestInput is an input type that accepts TcpCheckRequestArgs and TcpCheckRequestOutput values.
// You can construct a concrete instance of `TcpCheckRequestInput` via:
//
//	TcpCheckRequestArgs{...}
type TcpCheckRequestInput interface {
	pulumi.Input

	ToTcpCheckRequestOutput() TcpCheckRequestOutput
	ToTcpCheckRequestOutputWithContext(context.Context) TcpCheckRequestOutput
}

type TcpCheckRequestArgs struct {
	// A request can have multiple assertions.
	Assertions TcpCheckRequestAssertionArrayInput `pulumi:"assertions"`
	// The data to send to the target host.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The hostname or IP to connect to. Do not include a scheme or a port in this value.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// The port number to connect to.
	Port pulumi.IntInput `pulumi:"port"`
}

func (TcpCheckRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckRequest)(nil)).Elem()
}

func (i TcpCheckRequestArgs) ToTcpCheckRequestOutput() TcpCheckRequestOutput {
	return i.ToTcpCheckRequestOutputWithContext(context.Background())
}

func (i TcpCheckRequestArgs) ToTcpCheckRequestOutputWithContext(ctx context.Context) TcpCheckRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRequestOutput)
}

func (i TcpCheckRequestArgs) ToTcpCheckRequestPtrOutput() TcpCheckRequestPtrOutput {
	return i.ToTcpCheckRequestPtrOutputWithContext(context.Background())
}

func (i TcpCheckRequestArgs) ToTcpCheckRequestPtrOutputWithContext(ctx context.Context) TcpCheckRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRequestOutput).ToTcpCheckRequestPtrOutputWithContext(ctx)
}

// TcpCheckRequestPtrInput is an input type that accepts TcpCheckRequestArgs, TcpCheckRequestPtr and TcpCheckRequestPtrOutput values.
// You can construct a concrete instance of `TcpCheckRequestPtrInput` via:
//
//	        TcpCheckRequestArgs{...}
//
//	or:
//
//	        nil
type TcpCheckRequestPtrInput interface {
	pulumi.Input

	ToTcpCheckRequestPtrOutput() TcpCheckRequestPtrOutput
	ToTcpCheckRequestPtrOutputWithContext(context.Context) TcpCheckRequestPtrOutput
}

type tcpCheckRequestPtrType TcpCheckRequestArgs

func TcpCheckRequestPtr(v *TcpCheckRequestArgs) TcpCheckRequestPtrInput {
	return (*tcpCheckRequestPtrType)(v)
}

func (*tcpCheckRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpCheckRequest)(nil)).Elem()
}

func (i *tcpCheckRequestPtrType) ToTcpCheckRequestPtrOutput() TcpCheckRequestPtrOutput {
	return i.ToTcpCheckRequestPtrOutputWithContext(context.Background())
}

func (i *tcpCheckRequestPtrType) ToTcpCheckRequestPtrOutputWithContext(ctx context.Context) TcpCheckRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRequestPtrOutput)
}

type TcpCheckRequestOutput struct{ *pulumi.OutputState }

func (TcpCheckRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckRequest)(nil)).Elem()
}

func (o TcpCheckRequestOutput) ToTcpCheckRequestOutput() TcpCheckRequestOutput {
	return o
}

func (o TcpCheckRequestOutput) ToTcpCheckRequestOutputWithContext(ctx context.Context) TcpCheckRequestOutput {
	return o
}

func (o TcpCheckRequestOutput) ToTcpCheckRequestPtrOutput() TcpCheckRequestPtrOutput {
	return o.ToTcpCheckRequestPtrOutputWithContext(context.Background())
}

func (o TcpCheckRequestOutput) ToTcpCheckRequestPtrOutputWithContext(ctx context.Context) TcpCheckRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpCheckRequest) *TcpCheckRequest {
		return &v
	}).(TcpCheckRequestPtrOutput)
}

// A request can have multiple assertions.
func (o TcpCheckRequestOutput) Assertions() TcpCheckRequestAssertionArrayOutput {
	return o.ApplyT(func(v TcpCheckRequest) []TcpCheckRequestAssertion { return v.Assertions }).(TcpCheckRequestAssertionArrayOutput)
}

// The data to send to the target host.
func (o TcpCheckRequestOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpCheckRequest) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// The hostname or IP to connect to. Do not include a scheme or a port in this value.
func (o TcpCheckRequestOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v TcpCheckRequest) string { return v.Hostname }).(pulumi.StringOutput)
}

// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
func (o TcpCheckRequestOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpCheckRequest) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// The port number to connect to.
func (o TcpCheckRequestOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TcpCheckRequest) int { return v.Port }).(pulumi.IntOutput)
}

type TcpCheckRequestPtrOutput struct{ *pulumi.OutputState }

func (TcpCheckRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpCheckRequest)(nil)).Elem()
}

func (o TcpCheckRequestPtrOutput) ToTcpCheckRequestPtrOutput() TcpCheckRequestPtrOutput {
	return o
}

func (o TcpCheckRequestPtrOutput) ToTcpCheckRequestPtrOutputWithContext(ctx context.Context) TcpCheckRequestPtrOutput {
	return o
}

func (o TcpCheckRequestPtrOutput) Elem() TcpCheckRequestOutput {
	return o.ApplyT(func(v *TcpCheckRequest) TcpCheckRequest {
		if v != nil {
			return *v
		}
		var ret TcpCheckRequest
		return ret
	}).(TcpCheckRequestOutput)
}

// A request can have multiple assertions.
func (o TcpCheckRequestPtrOutput) Assertions() TcpCheckRequestAssertionArrayOutput {
	return o.ApplyT(func(v *TcpCheckRequest) []TcpCheckRequestAssertion {
		if v == nil {
			return nil
		}
		return v.Assertions
	}).(TcpCheckRequestAssertionArrayOutput)
}

// The data to send to the target host.
func (o TcpCheckRequestPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpCheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// The hostname or IP to connect to. Do not include a scheme or a port in this value.
func (o TcpCheckRequestPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpCheckRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
func (o TcpCheckRequestPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpCheckRequest) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// The port number to connect to.
func (o TcpCheckRequestPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpCheckRequest) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type TcpCheckRequestAssertion struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison string  `pulumi:"comparison"`
	Property   *string `pulumi:"property"`
	// The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
	Source string  `pulumi:"source"`
	Target *string `pulumi:"target"`
}

// TcpCheckRequestAssertionInput is an input type that accepts TcpCheckRequestAssertionArgs and TcpCheckRequestAssertionOutput values.
// You can construct a concrete instance of `TcpCheckRequestAssertionInput` via:
//
//	TcpCheckRequestAssertionArgs{...}
type TcpCheckRequestAssertionInput interface {
	pulumi.Input

	ToTcpCheckRequestAssertionOutput() TcpCheckRequestAssertionOutput
	ToTcpCheckRequestAssertionOutputWithContext(context.Context) TcpCheckRequestAssertionOutput
}

type TcpCheckRequestAssertionArgs struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison pulumi.StringInput    `pulumi:"comparison"`
	Property   pulumi.StringPtrInput `pulumi:"property"`
	// The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
	Source pulumi.StringInput    `pulumi:"source"`
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (TcpCheckRequestAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckRequestAssertion)(nil)).Elem()
}

func (i TcpCheckRequestAssertionArgs) ToTcpCheckRequestAssertionOutput() TcpCheckRequestAssertionOutput {
	return i.ToTcpCheckRequestAssertionOutputWithContext(context.Background())
}

func (i TcpCheckRequestAssertionArgs) ToTcpCheckRequestAssertionOutputWithContext(ctx context.Context) TcpCheckRequestAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRequestAssertionOutput)
}

// TcpCheckRequestAssertionArrayInput is an input type that accepts TcpCheckRequestAssertionArray and TcpCheckRequestAssertionArrayOutput values.
// You can construct a concrete instance of `TcpCheckRequestAssertionArrayInput` via:
//
//	TcpCheckRequestAssertionArray{ TcpCheckRequestAssertionArgs{...} }
type TcpCheckRequestAssertionArrayInput interface {
	pulumi.Input

	ToTcpCheckRequestAssertionArrayOutput() TcpCheckRequestAssertionArrayOutput
	ToTcpCheckRequestAssertionArrayOutputWithContext(context.Context) TcpCheckRequestAssertionArrayOutput
}

type TcpCheckRequestAssertionArray []TcpCheckRequestAssertionInput

func (TcpCheckRequestAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckRequestAssertion)(nil)).Elem()
}

func (i TcpCheckRequestAssertionArray) ToTcpCheckRequestAssertionArrayOutput() TcpCheckRequestAssertionArrayOutput {
	return i.ToTcpCheckRequestAssertionArrayOutputWithContext(context.Background())
}

func (i TcpCheckRequestAssertionArray) ToTcpCheckRequestAssertionArrayOutputWithContext(ctx context.Context) TcpCheckRequestAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRequestAssertionArrayOutput)
}

type TcpCheckRequestAssertionOutput struct{ *pulumi.OutputState }

func (TcpCheckRequestAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckRequestAssertion)(nil)).Elem()
}

func (o TcpCheckRequestAssertionOutput) ToTcpCheckRequestAssertionOutput() TcpCheckRequestAssertionOutput {
	return o
}

func (o TcpCheckRequestAssertionOutput) ToTcpCheckRequestAssertionOutputWithContext(ctx context.Context) TcpCheckRequestAssertionOutput {
	return o
}

// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
func (o TcpCheckRequestAssertionOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v TcpCheckRequestAssertion) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o TcpCheckRequestAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpCheckRequestAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
func (o TcpCheckRequestAssertionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TcpCheckRequestAssertion) string { return v.Source }).(pulumi.StringOutput)
}

func (o TcpCheckRequestAssertionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpCheckRequestAssertion) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type TcpCheckRequestAssertionArrayOutput struct{ *pulumi.OutputState }

func (TcpCheckRequestAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpCheckRequestAssertion)(nil)).Elem()
}

func (o TcpCheckRequestAssertionArrayOutput) ToTcpCheckRequestAssertionArrayOutput() TcpCheckRequestAssertionArrayOutput {
	return o
}

func (o TcpCheckRequestAssertionArrayOutput) ToTcpCheckRequestAssertionArrayOutputWithContext(ctx context.Context) TcpCheckRequestAssertionArrayOutput {
	return o
}

func (o TcpCheckRequestAssertionArrayOutput) Index(i pulumi.IntInput) TcpCheckRequestAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpCheckRequestAssertion {
		return vs[0].([]TcpCheckRequestAssertion)[vs[1].(int)]
	}).(TcpCheckRequestAssertionOutput)
}

type TcpCheckRetryStrategy struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds *int `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries *int `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion *bool `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type string `pulumi:"type"`
}

// TcpCheckRetryStrategyInput is an input type that accepts TcpCheckRetryStrategyArgs and TcpCheckRetryStrategyOutput values.
// You can construct a concrete instance of `TcpCheckRetryStrategyInput` via:
//
//	TcpCheckRetryStrategyArgs{...}
type TcpCheckRetryStrategyInput interface {
	pulumi.Input

	ToTcpCheckRetryStrategyOutput() TcpCheckRetryStrategyOutput
	ToTcpCheckRetryStrategyOutputWithContext(context.Context) TcpCheckRetryStrategyOutput
}

type TcpCheckRetryStrategyArgs struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds pulumi.IntPtrInput `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion pulumi.BoolPtrInput `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TcpCheckRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckRetryStrategy)(nil)).Elem()
}

func (i TcpCheckRetryStrategyArgs) ToTcpCheckRetryStrategyOutput() TcpCheckRetryStrategyOutput {
	return i.ToTcpCheckRetryStrategyOutputWithContext(context.Background())
}

func (i TcpCheckRetryStrategyArgs) ToTcpCheckRetryStrategyOutputWithContext(ctx context.Context) TcpCheckRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRetryStrategyOutput)
}

func (i TcpCheckRetryStrategyArgs) ToTcpCheckRetryStrategyPtrOutput() TcpCheckRetryStrategyPtrOutput {
	return i.ToTcpCheckRetryStrategyPtrOutputWithContext(context.Background())
}

func (i TcpCheckRetryStrategyArgs) ToTcpCheckRetryStrategyPtrOutputWithContext(ctx context.Context) TcpCheckRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRetryStrategyOutput).ToTcpCheckRetryStrategyPtrOutputWithContext(ctx)
}

// TcpCheckRetryStrategyPtrInput is an input type that accepts TcpCheckRetryStrategyArgs, TcpCheckRetryStrategyPtr and TcpCheckRetryStrategyPtrOutput values.
// You can construct a concrete instance of `TcpCheckRetryStrategyPtrInput` via:
//
//	        TcpCheckRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type TcpCheckRetryStrategyPtrInput interface {
	pulumi.Input

	ToTcpCheckRetryStrategyPtrOutput() TcpCheckRetryStrategyPtrOutput
	ToTcpCheckRetryStrategyPtrOutputWithContext(context.Context) TcpCheckRetryStrategyPtrOutput
}

type tcpCheckRetryStrategyPtrType TcpCheckRetryStrategyArgs

func TcpCheckRetryStrategyPtr(v *TcpCheckRetryStrategyArgs) TcpCheckRetryStrategyPtrInput {
	return (*tcpCheckRetryStrategyPtrType)(v)
}

func (*tcpCheckRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpCheckRetryStrategy)(nil)).Elem()
}

func (i *tcpCheckRetryStrategyPtrType) ToTcpCheckRetryStrategyPtrOutput() TcpCheckRetryStrategyPtrOutput {
	return i.ToTcpCheckRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *tcpCheckRetryStrategyPtrType) ToTcpCheckRetryStrategyPtrOutputWithContext(ctx context.Context) TcpCheckRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpCheckRetryStrategyPtrOutput)
}

type TcpCheckRetryStrategyOutput struct{ *pulumi.OutputState }

func (TcpCheckRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpCheckRetryStrategy)(nil)).Elem()
}

func (o TcpCheckRetryStrategyOutput) ToTcpCheckRetryStrategyOutput() TcpCheckRetryStrategyOutput {
	return o
}

func (o TcpCheckRetryStrategyOutput) ToTcpCheckRetryStrategyOutputWithContext(ctx context.Context) TcpCheckRetryStrategyOutput {
	return o
}

func (o TcpCheckRetryStrategyOutput) ToTcpCheckRetryStrategyPtrOutput() TcpCheckRetryStrategyPtrOutput {
	return o.ToTcpCheckRetryStrategyPtrOutputWithContext(context.Background())
}

func (o TcpCheckRetryStrategyOutput) ToTcpCheckRetryStrategyPtrOutputWithContext(ctx context.Context) TcpCheckRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpCheckRetryStrategy) *TcpCheckRetryStrategy {
		return &v
	}).(TcpCheckRetryStrategyPtrOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o TcpCheckRetryStrategyOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckRetryStrategy) *int { return v.BaseBackoffSeconds }).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o TcpCheckRetryStrategyOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckRetryStrategy) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o TcpCheckRetryStrategyOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpCheckRetryStrategy) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o TcpCheckRetryStrategyOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpCheckRetryStrategy) *bool { return v.SameRegion }).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o TcpCheckRetryStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TcpCheckRetryStrategy) string { return v.Type }).(pulumi.StringOutput)
}

type TcpCheckRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (TcpCheckRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpCheckRetryStrategy)(nil)).Elem()
}

func (o TcpCheckRetryStrategyPtrOutput) ToTcpCheckRetryStrategyPtrOutput() TcpCheckRetryStrategyPtrOutput {
	return o
}

func (o TcpCheckRetryStrategyPtrOutput) ToTcpCheckRetryStrategyPtrOutputWithContext(ctx context.Context) TcpCheckRetryStrategyPtrOutput {
	return o
}

func (o TcpCheckRetryStrategyPtrOutput) Elem() TcpCheckRetryStrategyOutput {
	return o.ApplyT(func(v *TcpCheckRetryStrategy) TcpCheckRetryStrategy {
		if v != nil {
			return *v
		}
		var ret TcpCheckRetryStrategy
		return ret
	}).(TcpCheckRetryStrategyOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o TcpCheckRetryStrategyPtrOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpCheckRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.BaseBackoffSeconds
	}).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o TcpCheckRetryStrategyPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpCheckRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o TcpCheckRetryStrategyPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpCheckRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o TcpCheckRetryStrategyPtrOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpCheckRetryStrategy) *bool {
		if v == nil {
			return nil
		}
		return v.SameRegion
	}).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o TcpCheckRetryStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpCheckRetryStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type TcpMonitorAlertChannelSubscription struct {
	Activated bool `pulumi:"activated"`
	ChannelId int  `pulumi:"channelId"`
}

// TcpMonitorAlertChannelSubscriptionInput is an input type that accepts TcpMonitorAlertChannelSubscriptionArgs and TcpMonitorAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `TcpMonitorAlertChannelSubscriptionInput` via:
//
//	TcpMonitorAlertChannelSubscriptionArgs{...}
type TcpMonitorAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToTcpMonitorAlertChannelSubscriptionOutput() TcpMonitorAlertChannelSubscriptionOutput
	ToTcpMonitorAlertChannelSubscriptionOutputWithContext(context.Context) TcpMonitorAlertChannelSubscriptionOutput
}

type TcpMonitorAlertChannelSubscriptionArgs struct {
	Activated pulumi.BoolInput `pulumi:"activated"`
	ChannelId pulumi.IntInput  `pulumi:"channelId"`
}

func (TcpMonitorAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertChannelSubscription)(nil)).Elem()
}

func (i TcpMonitorAlertChannelSubscriptionArgs) ToTcpMonitorAlertChannelSubscriptionOutput() TcpMonitorAlertChannelSubscriptionOutput {
	return i.ToTcpMonitorAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i TcpMonitorAlertChannelSubscriptionArgs) ToTcpMonitorAlertChannelSubscriptionOutputWithContext(ctx context.Context) TcpMonitorAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertChannelSubscriptionOutput)
}

// TcpMonitorAlertChannelSubscriptionArrayInput is an input type that accepts TcpMonitorAlertChannelSubscriptionArray and TcpMonitorAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `TcpMonitorAlertChannelSubscriptionArrayInput` via:
//
//	TcpMonitorAlertChannelSubscriptionArray{ TcpMonitorAlertChannelSubscriptionArgs{...} }
type TcpMonitorAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToTcpMonitorAlertChannelSubscriptionArrayOutput() TcpMonitorAlertChannelSubscriptionArrayOutput
	ToTcpMonitorAlertChannelSubscriptionArrayOutputWithContext(context.Context) TcpMonitorAlertChannelSubscriptionArrayOutput
}

type TcpMonitorAlertChannelSubscriptionArray []TcpMonitorAlertChannelSubscriptionInput

func (TcpMonitorAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertChannelSubscription)(nil)).Elem()
}

func (i TcpMonitorAlertChannelSubscriptionArray) ToTcpMonitorAlertChannelSubscriptionArrayOutput() TcpMonitorAlertChannelSubscriptionArrayOutput {
	return i.ToTcpMonitorAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i TcpMonitorAlertChannelSubscriptionArray) ToTcpMonitorAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) TcpMonitorAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertChannelSubscriptionArrayOutput)
}

type TcpMonitorAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertChannelSubscription)(nil)).Elem()
}

func (o TcpMonitorAlertChannelSubscriptionOutput) ToTcpMonitorAlertChannelSubscriptionOutput() TcpMonitorAlertChannelSubscriptionOutput {
	return o
}

func (o TcpMonitorAlertChannelSubscriptionOutput) ToTcpMonitorAlertChannelSubscriptionOutputWithContext(ctx context.Context) TcpMonitorAlertChannelSubscriptionOutput {
	return o
}

func (o TcpMonitorAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v TcpMonitorAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

func (o TcpMonitorAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v TcpMonitorAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type TcpMonitorAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertChannelSubscription)(nil)).Elem()
}

func (o TcpMonitorAlertChannelSubscriptionArrayOutput) ToTcpMonitorAlertChannelSubscriptionArrayOutput() TcpMonitorAlertChannelSubscriptionArrayOutput {
	return o
}

func (o TcpMonitorAlertChannelSubscriptionArrayOutput) ToTcpMonitorAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) TcpMonitorAlertChannelSubscriptionArrayOutput {
	return o
}

func (o TcpMonitorAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) TcpMonitorAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpMonitorAlertChannelSubscription {
		return vs[0].([]TcpMonitorAlertChannelSubscription)[vs[1].(int)]
	}).(TcpMonitorAlertChannelSubscriptionOutput)
}

type TcpMonitorAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               *string                                              `pulumi:"escalationType"`
	ParallelRunFailureThresholds []TcpMonitorAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	Reminders                    []TcpMonitorAlertSettingsReminder                    `pulumi:"reminders"`
	RunBasedEscalations          []TcpMonitorAlertSettingsRunBasedEscalation          `pulumi:"runBasedEscalations"`
	TimeBasedEscalations         []TcpMonitorAlertSettingsTimeBasedEscalation         `pulumi:"timeBasedEscalations"`
}

// TcpMonitorAlertSettingsInput is an input type that accepts TcpMonitorAlertSettingsArgs and TcpMonitorAlertSettingsOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsInput` via:
//
//	TcpMonitorAlertSettingsArgs{...}
type TcpMonitorAlertSettingsInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsOutput() TcpMonitorAlertSettingsOutput
	ToTcpMonitorAlertSettingsOutputWithContext(context.Context) TcpMonitorAlertSettingsOutput
}

type TcpMonitorAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
	EscalationType               pulumi.StringPtrInput                                        `pulumi:"escalationType"`
	ParallelRunFailureThresholds TcpMonitorAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	Reminders                    TcpMonitorAlertSettingsReminderArrayInput                    `pulumi:"reminders"`
	RunBasedEscalations          TcpMonitorAlertSettingsRunBasedEscalationArrayInput          `pulumi:"runBasedEscalations"`
	TimeBasedEscalations         TcpMonitorAlertSettingsTimeBasedEscalationArrayInput         `pulumi:"timeBasedEscalations"`
}

func (TcpMonitorAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettings)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsArgs) ToTcpMonitorAlertSettingsOutput() TcpMonitorAlertSettingsOutput {
	return i.ToTcpMonitorAlertSettingsOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsArgs) ToTcpMonitorAlertSettingsOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsOutput)
}

func (i TcpMonitorAlertSettingsArgs) ToTcpMonitorAlertSettingsPtrOutput() TcpMonitorAlertSettingsPtrOutput {
	return i.ToTcpMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsArgs) ToTcpMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsOutput).ToTcpMonitorAlertSettingsPtrOutputWithContext(ctx)
}

// TcpMonitorAlertSettingsPtrInput is an input type that accepts TcpMonitorAlertSettingsArgs, TcpMonitorAlertSettingsPtr and TcpMonitorAlertSettingsPtrOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsPtrInput` via:
//
//	        TcpMonitorAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type TcpMonitorAlertSettingsPtrInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsPtrOutput() TcpMonitorAlertSettingsPtrOutput
	ToTcpMonitorAlertSettingsPtrOutputWithContext(context.Context) TcpMonitorAlertSettingsPtrOutput
}

type tcpMonitorAlertSettingsPtrType TcpMonitorAlertSettingsArgs

func TcpMonitorAlertSettingsPtr(v *TcpMonitorAlertSettingsArgs) TcpMonitorAlertSettingsPtrInput {
	return (*tcpMonitorAlertSettingsPtrType)(v)
}

func (*tcpMonitorAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitorAlertSettings)(nil)).Elem()
}

func (i *tcpMonitorAlertSettingsPtrType) ToTcpMonitorAlertSettingsPtrOutput() TcpMonitorAlertSettingsPtrOutput {
	return i.ToTcpMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *tcpMonitorAlertSettingsPtrType) ToTcpMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsPtrOutput)
}

type TcpMonitorAlertSettingsOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettings)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsOutput) ToTcpMonitorAlertSettingsOutput() TcpMonitorAlertSettingsOutput {
	return o
}

func (o TcpMonitorAlertSettingsOutput) ToTcpMonitorAlertSettingsOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsOutput {
	return o
}

func (o TcpMonitorAlertSettingsOutput) ToTcpMonitorAlertSettingsPtrOutput() TcpMonitorAlertSettingsPtrOutput {
	return o.ToTcpMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (o TcpMonitorAlertSettingsOutput) ToTcpMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpMonitorAlertSettings) *TcpMonitorAlertSettings {
		return &v
	}).(TcpMonitorAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o TcpMonitorAlertSettingsOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettings) *string { return v.EscalationType }).(pulumi.StringPtrOutput)
}

func (o TcpMonitorAlertSettingsOutput) ParallelRunFailureThresholds() TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettings) []TcpMonitorAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o TcpMonitorAlertSettingsOutput) Reminders() TcpMonitorAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettings) []TcpMonitorAlertSettingsReminder { return v.Reminders }).(TcpMonitorAlertSettingsReminderArrayOutput)
}

func (o TcpMonitorAlertSettingsOutput) RunBasedEscalations() TcpMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettings) []TcpMonitorAlertSettingsRunBasedEscalation {
		return v.RunBasedEscalations
	}).(TcpMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

func (o TcpMonitorAlertSettingsOutput) TimeBasedEscalations() TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettings) []TcpMonitorAlertSettingsTimeBasedEscalation {
		return v.TimeBasedEscalations
	}).(TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type TcpMonitorAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitorAlertSettings)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsPtrOutput) ToTcpMonitorAlertSettingsPtrOutput() TcpMonitorAlertSettingsPtrOutput {
	return o
}

func (o TcpMonitorAlertSettingsPtrOutput) ToTcpMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsPtrOutput {
	return o
}

func (o TcpMonitorAlertSettingsPtrOutput) Elem() TcpMonitorAlertSettingsOutput {
	return o.ApplyT(func(v *TcpMonitorAlertSettings) TcpMonitorAlertSettings {
		if v != nil {
			return *v
		}
		var ret TcpMonitorAlertSettings
		return ret
	}).(TcpMonitorAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
func (o TcpMonitorAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpMonitorAlertSettings) *string {
		if v == nil {
			return nil
		}
		return v.EscalationType
	}).(pulumi.StringPtrOutput)
}

func (o TcpMonitorAlertSettingsPtrOutput) ParallelRunFailureThresholds() TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *TcpMonitorAlertSettings) []TcpMonitorAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

func (o TcpMonitorAlertSettingsPtrOutput) Reminders() TcpMonitorAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *TcpMonitorAlertSettings) []TcpMonitorAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(TcpMonitorAlertSettingsReminderArrayOutput)
}

func (o TcpMonitorAlertSettingsPtrOutput) RunBasedEscalations() TcpMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *TcpMonitorAlertSettings) []TcpMonitorAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(TcpMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

func (o TcpMonitorAlertSettingsPtrOutput) TimeBasedEscalations() TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *TcpMonitorAlertSettings) []TcpMonitorAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type TcpMonitorAlertSettingsParallelRunFailureThreshold struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled *bool `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// TcpMonitorAlertSettingsParallelRunFailureThresholdInput is an input type that accepts TcpMonitorAlertSettingsParallelRunFailureThresholdArgs and TcpMonitorAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsParallelRunFailureThresholdInput` via:
//
//	TcpMonitorAlertSettingsParallelRunFailureThresholdArgs{...}
type TcpMonitorAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutput() TcpMonitorAlertSettingsParallelRunFailureThresholdOutput
	ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) TcpMonitorAlertSettingsParallelRunFailureThresholdOutput
}

type TcpMonitorAlertSettingsParallelRunFailureThresholdArgs struct {
	// Applicable only for checks scheduled in parallel in multiple locations.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (TcpMonitorAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsParallelRunFailureThresholdArgs) ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutput() TcpMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsParallelRunFailureThresholdArgs) ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsParallelRunFailureThresholdOutput)
}

// TcpMonitorAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts TcpMonitorAlertSettingsParallelRunFailureThresholdArray and TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	TcpMonitorAlertSettingsParallelRunFailureThresholdArray{ TcpMonitorAlertSettingsParallelRunFailureThresholdArgs{...} }
type TcpMonitorAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput
	ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput
}

type TcpMonitorAlertSettingsParallelRunFailureThresholdArray []TcpMonitorAlertSettingsParallelRunFailureThresholdInput

func (TcpMonitorAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsParallelRunFailureThresholdArray) ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsParallelRunFailureThresholdArray) ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type TcpMonitorAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsParallelRunFailureThresholdOutput) ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutput() TcpMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o TcpMonitorAlertSettingsParallelRunFailureThresholdOutput) ToTcpMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Applicable only for checks scheduled in parallel in multiple locations.
func (o TcpMonitorAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
func (o TcpMonitorAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ToTcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) TcpMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpMonitorAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]TcpMonitorAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(TcpMonitorAlertSettingsParallelRunFailureThresholdOutput)
}

type TcpMonitorAlertSettingsReminder struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount *int `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// TcpMonitorAlertSettingsReminderInput is an input type that accepts TcpMonitorAlertSettingsReminderArgs and TcpMonitorAlertSettingsReminderOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsReminderInput` via:
//
//	TcpMonitorAlertSettingsReminderArgs{...}
type TcpMonitorAlertSettingsReminderInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsReminderOutput() TcpMonitorAlertSettingsReminderOutput
	ToTcpMonitorAlertSettingsReminderOutputWithContext(context.Context) TcpMonitorAlertSettingsReminderOutput
}

type TcpMonitorAlertSettingsReminderArgs struct {
	// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (TcpMonitorAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsReminder)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsReminderArgs) ToTcpMonitorAlertSettingsReminderOutput() TcpMonitorAlertSettingsReminderOutput {
	return i.ToTcpMonitorAlertSettingsReminderOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsReminderArgs) ToTcpMonitorAlertSettingsReminderOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsReminderOutput)
}

// TcpMonitorAlertSettingsReminderArrayInput is an input type that accepts TcpMonitorAlertSettingsReminderArray and TcpMonitorAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsReminderArrayInput` via:
//
//	TcpMonitorAlertSettingsReminderArray{ TcpMonitorAlertSettingsReminderArgs{...} }
type TcpMonitorAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsReminderArrayOutput() TcpMonitorAlertSettingsReminderArrayOutput
	ToTcpMonitorAlertSettingsReminderArrayOutputWithContext(context.Context) TcpMonitorAlertSettingsReminderArrayOutput
}

type TcpMonitorAlertSettingsReminderArray []TcpMonitorAlertSettingsReminderInput

func (TcpMonitorAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsReminder)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsReminderArray) ToTcpMonitorAlertSettingsReminderArrayOutput() TcpMonitorAlertSettingsReminderArrayOutput {
	return i.ToTcpMonitorAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsReminderArray) ToTcpMonitorAlertSettingsReminderArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsReminderArrayOutput)
}

type TcpMonitorAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsReminder)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsReminderOutput) ToTcpMonitorAlertSettingsReminderOutput() TcpMonitorAlertSettingsReminderOutput {
	return o
}

func (o TcpMonitorAlertSettingsReminderOutput) ToTcpMonitorAlertSettingsReminderOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsReminderOutput {
	return o
}

// How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
func (o TcpMonitorAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o TcpMonitorAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type TcpMonitorAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsReminder)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsReminderArrayOutput) ToTcpMonitorAlertSettingsReminderArrayOutput() TcpMonitorAlertSettingsReminderArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsReminderArrayOutput) ToTcpMonitorAlertSettingsReminderArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsReminderArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) TcpMonitorAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpMonitorAlertSettingsReminder {
		return vs[0].([]TcpMonitorAlertSettingsReminder)[vs[1].(int)]
	}).(TcpMonitorAlertSettingsReminderOutput)
}

type TcpMonitorAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// TcpMonitorAlertSettingsRunBasedEscalationInput is an input type that accepts TcpMonitorAlertSettingsRunBasedEscalationArgs and TcpMonitorAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsRunBasedEscalationInput` via:
//
//	TcpMonitorAlertSettingsRunBasedEscalationArgs{...}
type TcpMonitorAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsRunBasedEscalationOutput() TcpMonitorAlertSettingsRunBasedEscalationOutput
	ToTcpMonitorAlertSettingsRunBasedEscalationOutputWithContext(context.Context) TcpMonitorAlertSettingsRunBasedEscalationOutput
}

type TcpMonitorAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (TcpMonitorAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsRunBasedEscalationArgs) ToTcpMonitorAlertSettingsRunBasedEscalationOutput() TcpMonitorAlertSettingsRunBasedEscalationOutput {
	return i.ToTcpMonitorAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsRunBasedEscalationArgs) ToTcpMonitorAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsRunBasedEscalationOutput)
}

// TcpMonitorAlertSettingsRunBasedEscalationArrayInput is an input type that accepts TcpMonitorAlertSettingsRunBasedEscalationArray and TcpMonitorAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsRunBasedEscalationArrayInput` via:
//
//	TcpMonitorAlertSettingsRunBasedEscalationArray{ TcpMonitorAlertSettingsRunBasedEscalationArgs{...} }
type TcpMonitorAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutput() TcpMonitorAlertSettingsRunBasedEscalationArrayOutput
	ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) TcpMonitorAlertSettingsRunBasedEscalationArrayOutput
}

type TcpMonitorAlertSettingsRunBasedEscalationArray []TcpMonitorAlertSettingsRunBasedEscalationInput

func (TcpMonitorAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsRunBasedEscalationArray) ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutput() TcpMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsRunBasedEscalationArray) ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

type TcpMonitorAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsRunBasedEscalationOutput) ToTcpMonitorAlertSettingsRunBasedEscalationOutput() TcpMonitorAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o TcpMonitorAlertSettingsRunBasedEscalationOutput) ToTcpMonitorAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
func (o TcpMonitorAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type TcpMonitorAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsRunBasedEscalationArrayOutput) ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutput() TcpMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsRunBasedEscalationArrayOutput) ToTcpMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) TcpMonitorAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpMonitorAlertSettingsRunBasedEscalation {
		return vs[0].([]TcpMonitorAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(TcpMonitorAlertSettingsRunBasedEscalationOutput)
}

type TcpMonitorAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// TcpMonitorAlertSettingsTimeBasedEscalationInput is an input type that accepts TcpMonitorAlertSettingsTimeBasedEscalationArgs and TcpMonitorAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsTimeBasedEscalationInput` via:
//
//	TcpMonitorAlertSettingsTimeBasedEscalationArgs{...}
type TcpMonitorAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsTimeBasedEscalationOutput() TcpMonitorAlertSettingsTimeBasedEscalationOutput
	ToTcpMonitorAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) TcpMonitorAlertSettingsTimeBasedEscalationOutput
}

type TcpMonitorAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (TcpMonitorAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsTimeBasedEscalationArgs) ToTcpMonitorAlertSettingsTimeBasedEscalationOutput() TcpMonitorAlertSettingsTimeBasedEscalationOutput {
	return i.ToTcpMonitorAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsTimeBasedEscalationArgs) ToTcpMonitorAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsTimeBasedEscalationOutput)
}

// TcpMonitorAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts TcpMonitorAlertSettingsTimeBasedEscalationArray and TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `TcpMonitorAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	TcpMonitorAlertSettingsTimeBasedEscalationArray{ TcpMonitorAlertSettingsTimeBasedEscalationArgs{...} }
type TcpMonitorAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutput() TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput
	ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput
}

type TcpMonitorAlertSettingsTimeBasedEscalationArray []TcpMonitorAlertSettingsTimeBasedEscalationInput

func (TcpMonitorAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i TcpMonitorAlertSettingsTimeBasedEscalationArray) ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutput() TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i TcpMonitorAlertSettingsTimeBasedEscalationArray) ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type TcpMonitorAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsTimeBasedEscalationOutput) ToTcpMonitorAlertSettingsTimeBasedEscalationOutput() TcpMonitorAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o TcpMonitorAlertSettingsTimeBasedEscalationOutput) ToTcpMonitorAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o TcpMonitorAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput) ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutput() TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput) ToTcpMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) TcpMonitorAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpMonitorAlertSettingsTimeBasedEscalation {
		return vs[0].([]TcpMonitorAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(TcpMonitorAlertSettingsTimeBasedEscalationOutput)
}

type TcpMonitorRequest struct {
	// A request can have multiple assertions.
	Assertions []TcpMonitorRequestAssertion `pulumi:"assertions"`
	// The data to send to the target host.
	Data *string `pulumi:"data"`
	// The hostname or IP to connect to. Do not include a scheme or a port in this value.
	Hostname string `pulumi:"hostname"`
	// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
	IpFamily *string `pulumi:"ipFamily"`
	// The port number to connect to.
	Port int `pulumi:"port"`
}

// TcpMonitorRequestInput is an input type that accepts TcpMonitorRequestArgs and TcpMonitorRequestOutput values.
// You can construct a concrete instance of `TcpMonitorRequestInput` via:
//
//	TcpMonitorRequestArgs{...}
type TcpMonitorRequestInput interface {
	pulumi.Input

	ToTcpMonitorRequestOutput() TcpMonitorRequestOutput
	ToTcpMonitorRequestOutputWithContext(context.Context) TcpMonitorRequestOutput
}

type TcpMonitorRequestArgs struct {
	// A request can have multiple assertions.
	Assertions TcpMonitorRequestAssertionArrayInput `pulumi:"assertions"`
	// The data to send to the target host.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The hostname or IP to connect to. Do not include a scheme or a port in this value.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// The port number to connect to.
	Port pulumi.IntInput `pulumi:"port"`
}

func (TcpMonitorRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorRequest)(nil)).Elem()
}

func (i TcpMonitorRequestArgs) ToTcpMonitorRequestOutput() TcpMonitorRequestOutput {
	return i.ToTcpMonitorRequestOutputWithContext(context.Background())
}

func (i TcpMonitorRequestArgs) ToTcpMonitorRequestOutputWithContext(ctx context.Context) TcpMonitorRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRequestOutput)
}

func (i TcpMonitorRequestArgs) ToTcpMonitorRequestPtrOutput() TcpMonitorRequestPtrOutput {
	return i.ToTcpMonitorRequestPtrOutputWithContext(context.Background())
}

func (i TcpMonitorRequestArgs) ToTcpMonitorRequestPtrOutputWithContext(ctx context.Context) TcpMonitorRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRequestOutput).ToTcpMonitorRequestPtrOutputWithContext(ctx)
}

// TcpMonitorRequestPtrInput is an input type that accepts TcpMonitorRequestArgs, TcpMonitorRequestPtr and TcpMonitorRequestPtrOutput values.
// You can construct a concrete instance of `TcpMonitorRequestPtrInput` via:
//
//	        TcpMonitorRequestArgs{...}
//
//	or:
//
//	        nil
type TcpMonitorRequestPtrInput interface {
	pulumi.Input

	ToTcpMonitorRequestPtrOutput() TcpMonitorRequestPtrOutput
	ToTcpMonitorRequestPtrOutputWithContext(context.Context) TcpMonitorRequestPtrOutput
}

type tcpMonitorRequestPtrType TcpMonitorRequestArgs

func TcpMonitorRequestPtr(v *TcpMonitorRequestArgs) TcpMonitorRequestPtrInput {
	return (*tcpMonitorRequestPtrType)(v)
}

func (*tcpMonitorRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitorRequest)(nil)).Elem()
}

func (i *tcpMonitorRequestPtrType) ToTcpMonitorRequestPtrOutput() TcpMonitorRequestPtrOutput {
	return i.ToTcpMonitorRequestPtrOutputWithContext(context.Background())
}

func (i *tcpMonitorRequestPtrType) ToTcpMonitorRequestPtrOutputWithContext(ctx context.Context) TcpMonitorRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRequestPtrOutput)
}

type TcpMonitorRequestOutput struct{ *pulumi.OutputState }

func (TcpMonitorRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorRequest)(nil)).Elem()
}

func (o TcpMonitorRequestOutput) ToTcpMonitorRequestOutput() TcpMonitorRequestOutput {
	return o
}

func (o TcpMonitorRequestOutput) ToTcpMonitorRequestOutputWithContext(ctx context.Context) TcpMonitorRequestOutput {
	return o
}

func (o TcpMonitorRequestOutput) ToTcpMonitorRequestPtrOutput() TcpMonitorRequestPtrOutput {
	return o.ToTcpMonitorRequestPtrOutputWithContext(context.Background())
}

func (o TcpMonitorRequestOutput) ToTcpMonitorRequestPtrOutputWithContext(ctx context.Context) TcpMonitorRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpMonitorRequest) *TcpMonitorRequest {
		return &v
	}).(TcpMonitorRequestPtrOutput)
}

// A request can have multiple assertions.
func (o TcpMonitorRequestOutput) Assertions() TcpMonitorRequestAssertionArrayOutput {
	return o.ApplyT(func(v TcpMonitorRequest) []TcpMonitorRequestAssertion { return v.Assertions }).(TcpMonitorRequestAssertionArrayOutput)
}

// The data to send to the target host.
func (o TcpMonitorRequestOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpMonitorRequest) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// The hostname or IP to connect to. Do not include a scheme or a port in this value.
func (o TcpMonitorRequestOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v TcpMonitorRequest) string { return v.Hostname }).(pulumi.StringOutput)
}

// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
func (o TcpMonitorRequestOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpMonitorRequest) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// The port number to connect to.
func (o TcpMonitorRequestOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v TcpMonitorRequest) int { return v.Port }).(pulumi.IntOutput)
}

type TcpMonitorRequestPtrOutput struct{ *pulumi.OutputState }

func (TcpMonitorRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitorRequest)(nil)).Elem()
}

func (o TcpMonitorRequestPtrOutput) ToTcpMonitorRequestPtrOutput() TcpMonitorRequestPtrOutput {
	return o
}

func (o TcpMonitorRequestPtrOutput) ToTcpMonitorRequestPtrOutputWithContext(ctx context.Context) TcpMonitorRequestPtrOutput {
	return o
}

func (o TcpMonitorRequestPtrOutput) Elem() TcpMonitorRequestOutput {
	return o.ApplyT(func(v *TcpMonitorRequest) TcpMonitorRequest {
		if v != nil {
			return *v
		}
		var ret TcpMonitorRequest
		return ret
	}).(TcpMonitorRequestOutput)
}

// A request can have multiple assertions.
func (o TcpMonitorRequestPtrOutput) Assertions() TcpMonitorRequestAssertionArrayOutput {
	return o.ApplyT(func(v *TcpMonitorRequest) []TcpMonitorRequestAssertion {
		if v == nil {
			return nil
		}
		return v.Assertions
	}).(TcpMonitorRequestAssertionArrayOutput)
}

// The data to send to the target host.
func (o TcpMonitorRequestPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRequest) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// The hostname or IP to connect to. Do not include a scheme or a port in this value.
func (o TcpMonitorRequestPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
func (o TcpMonitorRequestPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRequest) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// The port number to connect to.
func (o TcpMonitorRequestPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRequest) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type TcpMonitorRequestAssertion struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison string  `pulumi:"comparison"`
	Property   *string `pulumi:"property"`
	// The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
	Source string  `pulumi:"source"`
	Target *string `pulumi:"target"`
}

// TcpMonitorRequestAssertionInput is an input type that accepts TcpMonitorRequestAssertionArgs and TcpMonitorRequestAssertionOutput values.
// You can construct a concrete instance of `TcpMonitorRequestAssertionInput` via:
//
//	TcpMonitorRequestAssertionArgs{...}
type TcpMonitorRequestAssertionInput interface {
	pulumi.Input

	ToTcpMonitorRequestAssertionOutput() TcpMonitorRequestAssertionOutput
	ToTcpMonitorRequestAssertionOutputWithContext(context.Context) TcpMonitorRequestAssertionOutput
}

type TcpMonitorRequestAssertionArgs struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
	Comparison pulumi.StringInput    `pulumi:"comparison"`
	Property   pulumi.StringPtrInput `pulumi:"property"`
	// The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
	Source pulumi.StringInput    `pulumi:"source"`
	Target pulumi.StringPtrInput `pulumi:"target"`
}

func (TcpMonitorRequestAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorRequestAssertion)(nil)).Elem()
}

func (i TcpMonitorRequestAssertionArgs) ToTcpMonitorRequestAssertionOutput() TcpMonitorRequestAssertionOutput {
	return i.ToTcpMonitorRequestAssertionOutputWithContext(context.Background())
}

func (i TcpMonitorRequestAssertionArgs) ToTcpMonitorRequestAssertionOutputWithContext(ctx context.Context) TcpMonitorRequestAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRequestAssertionOutput)
}

// TcpMonitorRequestAssertionArrayInput is an input type that accepts TcpMonitorRequestAssertionArray and TcpMonitorRequestAssertionArrayOutput values.
// You can construct a concrete instance of `TcpMonitorRequestAssertionArrayInput` via:
//
//	TcpMonitorRequestAssertionArray{ TcpMonitorRequestAssertionArgs{...} }
type TcpMonitorRequestAssertionArrayInput interface {
	pulumi.Input

	ToTcpMonitorRequestAssertionArrayOutput() TcpMonitorRequestAssertionArrayOutput
	ToTcpMonitorRequestAssertionArrayOutputWithContext(context.Context) TcpMonitorRequestAssertionArrayOutput
}

type TcpMonitorRequestAssertionArray []TcpMonitorRequestAssertionInput

func (TcpMonitorRequestAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorRequestAssertion)(nil)).Elem()
}

func (i TcpMonitorRequestAssertionArray) ToTcpMonitorRequestAssertionArrayOutput() TcpMonitorRequestAssertionArrayOutput {
	return i.ToTcpMonitorRequestAssertionArrayOutputWithContext(context.Background())
}

func (i TcpMonitorRequestAssertionArray) ToTcpMonitorRequestAssertionArrayOutputWithContext(ctx context.Context) TcpMonitorRequestAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRequestAssertionArrayOutput)
}

type TcpMonitorRequestAssertionOutput struct{ *pulumi.OutputState }

func (TcpMonitorRequestAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorRequestAssertion)(nil)).Elem()
}

func (o TcpMonitorRequestAssertionOutput) ToTcpMonitorRequestAssertionOutput() TcpMonitorRequestAssertionOutput {
	return o
}

func (o TcpMonitorRequestAssertionOutput) ToTcpMonitorRequestAssertionOutputWithContext(ctx context.Context) TcpMonitorRequestAssertionOutput {
	return o
}

// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
func (o TcpMonitorRequestAssertionOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v TcpMonitorRequestAssertion) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o TcpMonitorRequestAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpMonitorRequestAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
func (o TcpMonitorRequestAssertionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v TcpMonitorRequestAssertion) string { return v.Source }).(pulumi.StringOutput)
}

func (o TcpMonitorRequestAssertionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpMonitorRequestAssertion) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type TcpMonitorRequestAssertionArrayOutput struct{ *pulumi.OutputState }

func (TcpMonitorRequestAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpMonitorRequestAssertion)(nil)).Elem()
}

func (o TcpMonitorRequestAssertionArrayOutput) ToTcpMonitorRequestAssertionArrayOutput() TcpMonitorRequestAssertionArrayOutput {
	return o
}

func (o TcpMonitorRequestAssertionArrayOutput) ToTcpMonitorRequestAssertionArrayOutputWithContext(ctx context.Context) TcpMonitorRequestAssertionArrayOutput {
	return o
}

func (o TcpMonitorRequestAssertionArrayOutput) Index(i pulumi.IntInput) TcpMonitorRequestAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpMonitorRequestAssertion {
		return vs[0].([]TcpMonitorRequestAssertion)[vs[1].(int)]
	}).(TcpMonitorRequestAssertionOutput)
}

type TcpMonitorRetryStrategy struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds *int `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries *int `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion *bool `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type string `pulumi:"type"`
}

// TcpMonitorRetryStrategyInput is an input type that accepts TcpMonitorRetryStrategyArgs and TcpMonitorRetryStrategyOutput values.
// You can construct a concrete instance of `TcpMonitorRetryStrategyInput` via:
//
//	TcpMonitorRetryStrategyArgs{...}
type TcpMonitorRetryStrategyInput interface {
	pulumi.Input

	ToTcpMonitorRetryStrategyOutput() TcpMonitorRetryStrategyOutput
	ToTcpMonitorRetryStrategyOutputWithContext(context.Context) TcpMonitorRetryStrategyOutput
}

type TcpMonitorRetryStrategyArgs struct {
	// The number of seconds to wait before the first retry attempt.
	BaseBackoffSeconds pulumi.IntPtrInput `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the check (maximum 600 seconds).
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the check. Value must be between 1 and 10.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial check run.
	SameRegion pulumi.BoolPtrInput `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TcpMonitorRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorRetryStrategy)(nil)).Elem()
}

func (i TcpMonitorRetryStrategyArgs) ToTcpMonitorRetryStrategyOutput() TcpMonitorRetryStrategyOutput {
	return i.ToTcpMonitorRetryStrategyOutputWithContext(context.Background())
}

func (i TcpMonitorRetryStrategyArgs) ToTcpMonitorRetryStrategyOutputWithContext(ctx context.Context) TcpMonitorRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRetryStrategyOutput)
}

func (i TcpMonitorRetryStrategyArgs) ToTcpMonitorRetryStrategyPtrOutput() TcpMonitorRetryStrategyPtrOutput {
	return i.ToTcpMonitorRetryStrategyPtrOutputWithContext(context.Background())
}

func (i TcpMonitorRetryStrategyArgs) ToTcpMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) TcpMonitorRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRetryStrategyOutput).ToTcpMonitorRetryStrategyPtrOutputWithContext(ctx)
}

// TcpMonitorRetryStrategyPtrInput is an input type that accepts TcpMonitorRetryStrategyArgs, TcpMonitorRetryStrategyPtr and TcpMonitorRetryStrategyPtrOutput values.
// You can construct a concrete instance of `TcpMonitorRetryStrategyPtrInput` via:
//
//	        TcpMonitorRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type TcpMonitorRetryStrategyPtrInput interface {
	pulumi.Input

	ToTcpMonitorRetryStrategyPtrOutput() TcpMonitorRetryStrategyPtrOutput
	ToTcpMonitorRetryStrategyPtrOutputWithContext(context.Context) TcpMonitorRetryStrategyPtrOutput
}

type tcpMonitorRetryStrategyPtrType TcpMonitorRetryStrategyArgs

func TcpMonitorRetryStrategyPtr(v *TcpMonitorRetryStrategyArgs) TcpMonitorRetryStrategyPtrInput {
	return (*tcpMonitorRetryStrategyPtrType)(v)
}

func (*tcpMonitorRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitorRetryStrategy)(nil)).Elem()
}

func (i *tcpMonitorRetryStrategyPtrType) ToTcpMonitorRetryStrategyPtrOutput() TcpMonitorRetryStrategyPtrOutput {
	return i.ToTcpMonitorRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *tcpMonitorRetryStrategyPtrType) ToTcpMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) TcpMonitorRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpMonitorRetryStrategyPtrOutput)
}

type TcpMonitorRetryStrategyOutput struct{ *pulumi.OutputState }

func (TcpMonitorRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpMonitorRetryStrategy)(nil)).Elem()
}

func (o TcpMonitorRetryStrategyOutput) ToTcpMonitorRetryStrategyOutput() TcpMonitorRetryStrategyOutput {
	return o
}

func (o TcpMonitorRetryStrategyOutput) ToTcpMonitorRetryStrategyOutputWithContext(ctx context.Context) TcpMonitorRetryStrategyOutput {
	return o
}

func (o TcpMonitorRetryStrategyOutput) ToTcpMonitorRetryStrategyPtrOutput() TcpMonitorRetryStrategyPtrOutput {
	return o.ToTcpMonitorRetryStrategyPtrOutputWithContext(context.Background())
}

func (o TcpMonitorRetryStrategyOutput) ToTcpMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) TcpMonitorRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpMonitorRetryStrategy) *TcpMonitorRetryStrategy {
		return &v
	}).(TcpMonitorRetryStrategyPtrOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o TcpMonitorRetryStrategyOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorRetryStrategy) *int { return v.BaseBackoffSeconds }).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o TcpMonitorRetryStrategyOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorRetryStrategy) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o TcpMonitorRetryStrategyOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpMonitorRetryStrategy) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o TcpMonitorRetryStrategyOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpMonitorRetryStrategy) *bool { return v.SameRegion }).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o TcpMonitorRetryStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TcpMonitorRetryStrategy) string { return v.Type }).(pulumi.StringOutput)
}

type TcpMonitorRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (TcpMonitorRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpMonitorRetryStrategy)(nil)).Elem()
}

func (o TcpMonitorRetryStrategyPtrOutput) ToTcpMonitorRetryStrategyPtrOutput() TcpMonitorRetryStrategyPtrOutput {
	return o
}

func (o TcpMonitorRetryStrategyPtrOutput) ToTcpMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) TcpMonitorRetryStrategyPtrOutput {
	return o
}

func (o TcpMonitorRetryStrategyPtrOutput) Elem() TcpMonitorRetryStrategyOutput {
	return o.ApplyT(func(v *TcpMonitorRetryStrategy) TcpMonitorRetryStrategy {
		if v != nil {
			return *v
		}
		var ret TcpMonitorRetryStrategy
		return ret
	}).(TcpMonitorRetryStrategyOutput)
}

// The number of seconds to wait before the first retry attempt.
func (o TcpMonitorRetryStrategyPtrOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.BaseBackoffSeconds
	}).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the check (maximum 600 seconds).
func (o TcpMonitorRetryStrategyPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the check. Value must be between 1 and 10.
func (o TcpMonitorRetryStrategyPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial check run.
func (o TcpMonitorRetryStrategyPtrOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRetryStrategy) *bool {
		if v == nil {
			return nil
		}
		return v.SameRegion
	}).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, or `EXPONENTIAL`.
func (o TcpMonitorRetryStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpMonitorRetryStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type UrlMonitorAlertChannelSubscription struct {
	// Whether an alert should be sent to this channel.
	Activated bool `pulumi:"activated"`
	// The ID of the alert channel.
	ChannelId int `pulumi:"channelId"`
}

// UrlMonitorAlertChannelSubscriptionInput is an input type that accepts UrlMonitorAlertChannelSubscriptionArgs and UrlMonitorAlertChannelSubscriptionOutput values.
// You can construct a concrete instance of `UrlMonitorAlertChannelSubscriptionInput` via:
//
//	UrlMonitorAlertChannelSubscriptionArgs{...}
type UrlMonitorAlertChannelSubscriptionInput interface {
	pulumi.Input

	ToUrlMonitorAlertChannelSubscriptionOutput() UrlMonitorAlertChannelSubscriptionOutput
	ToUrlMonitorAlertChannelSubscriptionOutputWithContext(context.Context) UrlMonitorAlertChannelSubscriptionOutput
}

type UrlMonitorAlertChannelSubscriptionArgs struct {
	// Whether an alert should be sent to this channel.
	Activated pulumi.BoolInput `pulumi:"activated"`
	// The ID of the alert channel.
	ChannelId pulumi.IntInput `pulumi:"channelId"`
}

func (UrlMonitorAlertChannelSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertChannelSubscription)(nil)).Elem()
}

func (i UrlMonitorAlertChannelSubscriptionArgs) ToUrlMonitorAlertChannelSubscriptionOutput() UrlMonitorAlertChannelSubscriptionOutput {
	return i.ToUrlMonitorAlertChannelSubscriptionOutputWithContext(context.Background())
}

func (i UrlMonitorAlertChannelSubscriptionArgs) ToUrlMonitorAlertChannelSubscriptionOutputWithContext(ctx context.Context) UrlMonitorAlertChannelSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertChannelSubscriptionOutput)
}

// UrlMonitorAlertChannelSubscriptionArrayInput is an input type that accepts UrlMonitorAlertChannelSubscriptionArray and UrlMonitorAlertChannelSubscriptionArrayOutput values.
// You can construct a concrete instance of `UrlMonitorAlertChannelSubscriptionArrayInput` via:
//
//	UrlMonitorAlertChannelSubscriptionArray{ UrlMonitorAlertChannelSubscriptionArgs{...} }
type UrlMonitorAlertChannelSubscriptionArrayInput interface {
	pulumi.Input

	ToUrlMonitorAlertChannelSubscriptionArrayOutput() UrlMonitorAlertChannelSubscriptionArrayOutput
	ToUrlMonitorAlertChannelSubscriptionArrayOutputWithContext(context.Context) UrlMonitorAlertChannelSubscriptionArrayOutput
}

type UrlMonitorAlertChannelSubscriptionArray []UrlMonitorAlertChannelSubscriptionInput

func (UrlMonitorAlertChannelSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertChannelSubscription)(nil)).Elem()
}

func (i UrlMonitorAlertChannelSubscriptionArray) ToUrlMonitorAlertChannelSubscriptionArrayOutput() UrlMonitorAlertChannelSubscriptionArrayOutput {
	return i.ToUrlMonitorAlertChannelSubscriptionArrayOutputWithContext(context.Background())
}

func (i UrlMonitorAlertChannelSubscriptionArray) ToUrlMonitorAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) UrlMonitorAlertChannelSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertChannelSubscriptionArrayOutput)
}

type UrlMonitorAlertChannelSubscriptionOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertChannelSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertChannelSubscription)(nil)).Elem()
}

func (o UrlMonitorAlertChannelSubscriptionOutput) ToUrlMonitorAlertChannelSubscriptionOutput() UrlMonitorAlertChannelSubscriptionOutput {
	return o
}

func (o UrlMonitorAlertChannelSubscriptionOutput) ToUrlMonitorAlertChannelSubscriptionOutputWithContext(ctx context.Context) UrlMonitorAlertChannelSubscriptionOutput {
	return o
}

// Whether an alert should be sent to this channel.
func (o UrlMonitorAlertChannelSubscriptionOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v UrlMonitorAlertChannelSubscription) bool { return v.Activated }).(pulumi.BoolOutput)
}

// The ID of the alert channel.
func (o UrlMonitorAlertChannelSubscriptionOutput) ChannelId() pulumi.IntOutput {
	return o.ApplyT(func(v UrlMonitorAlertChannelSubscription) int { return v.ChannelId }).(pulumi.IntOutput)
}

type UrlMonitorAlertChannelSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertChannelSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertChannelSubscription)(nil)).Elem()
}

func (o UrlMonitorAlertChannelSubscriptionArrayOutput) ToUrlMonitorAlertChannelSubscriptionArrayOutput() UrlMonitorAlertChannelSubscriptionArrayOutput {
	return o
}

func (o UrlMonitorAlertChannelSubscriptionArrayOutput) ToUrlMonitorAlertChannelSubscriptionArrayOutputWithContext(ctx context.Context) UrlMonitorAlertChannelSubscriptionArrayOutput {
	return o
}

func (o UrlMonitorAlertChannelSubscriptionArrayOutput) Index(i pulumi.IntInput) UrlMonitorAlertChannelSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMonitorAlertChannelSubscription {
		return vs[0].([]UrlMonitorAlertChannelSubscription)[vs[1].(int)]
	}).(UrlMonitorAlertChannelSubscriptionOutput)
}

type UrlMonitorAlertSettings struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` and `TIME_BASED`.
	EscalationType string `pulumi:"escalationType"`
	// Configuration for parallel run failure threshold.
	ParallelRunFailureThresholds []UrlMonitorAlertSettingsParallelRunFailureThreshold `pulumi:"parallelRunFailureThresholds"`
	// Defines how often to send reminder notifications after initial alert.
	Reminders []UrlMonitorAlertSettingsReminder `pulumi:"reminders"`
	// Configuration for run-based escalation.
	RunBasedEscalations []UrlMonitorAlertSettingsRunBasedEscalation `pulumi:"runBasedEscalations"`
	// Configuration for time-based escalation.
	TimeBasedEscalations []UrlMonitorAlertSettingsTimeBasedEscalation `pulumi:"timeBasedEscalations"`
}

// UrlMonitorAlertSettingsInput is an input type that accepts UrlMonitorAlertSettingsArgs and UrlMonitorAlertSettingsOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsInput` via:
//
//	UrlMonitorAlertSettingsArgs{...}
type UrlMonitorAlertSettingsInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsOutput() UrlMonitorAlertSettingsOutput
	ToUrlMonitorAlertSettingsOutputWithContext(context.Context) UrlMonitorAlertSettingsOutput
}

type UrlMonitorAlertSettingsArgs struct {
	// Determines what type of escalation to use. Possible values are `RUN_BASED` and `TIME_BASED`.
	EscalationType pulumi.StringInput `pulumi:"escalationType"`
	// Configuration for parallel run failure threshold.
	ParallelRunFailureThresholds UrlMonitorAlertSettingsParallelRunFailureThresholdArrayInput `pulumi:"parallelRunFailureThresholds"`
	// Defines how often to send reminder notifications after initial alert.
	Reminders UrlMonitorAlertSettingsReminderArrayInput `pulumi:"reminders"`
	// Configuration for run-based escalation.
	RunBasedEscalations UrlMonitorAlertSettingsRunBasedEscalationArrayInput `pulumi:"runBasedEscalations"`
	// Configuration for time-based escalation.
	TimeBasedEscalations UrlMonitorAlertSettingsTimeBasedEscalationArrayInput `pulumi:"timeBasedEscalations"`
}

func (UrlMonitorAlertSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettings)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsArgs) ToUrlMonitorAlertSettingsOutput() UrlMonitorAlertSettingsOutput {
	return i.ToUrlMonitorAlertSettingsOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsArgs) ToUrlMonitorAlertSettingsOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsOutput)
}

func (i UrlMonitorAlertSettingsArgs) ToUrlMonitorAlertSettingsPtrOutput() UrlMonitorAlertSettingsPtrOutput {
	return i.ToUrlMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsArgs) ToUrlMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsOutput).ToUrlMonitorAlertSettingsPtrOutputWithContext(ctx)
}

// UrlMonitorAlertSettingsPtrInput is an input type that accepts UrlMonitorAlertSettingsArgs, UrlMonitorAlertSettingsPtr and UrlMonitorAlertSettingsPtrOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsPtrInput` via:
//
//	        UrlMonitorAlertSettingsArgs{...}
//
//	or:
//
//	        nil
type UrlMonitorAlertSettingsPtrInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsPtrOutput() UrlMonitorAlertSettingsPtrOutput
	ToUrlMonitorAlertSettingsPtrOutputWithContext(context.Context) UrlMonitorAlertSettingsPtrOutput
}

type urlMonitorAlertSettingsPtrType UrlMonitorAlertSettingsArgs

func UrlMonitorAlertSettingsPtr(v *UrlMonitorAlertSettingsArgs) UrlMonitorAlertSettingsPtrInput {
	return (*urlMonitorAlertSettingsPtrType)(v)
}

func (*urlMonitorAlertSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitorAlertSettings)(nil)).Elem()
}

func (i *urlMonitorAlertSettingsPtrType) ToUrlMonitorAlertSettingsPtrOutput() UrlMonitorAlertSettingsPtrOutput {
	return i.ToUrlMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (i *urlMonitorAlertSettingsPtrType) ToUrlMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsPtrOutput)
}

type UrlMonitorAlertSettingsOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettings)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsOutput) ToUrlMonitorAlertSettingsOutput() UrlMonitorAlertSettingsOutput {
	return o
}

func (o UrlMonitorAlertSettingsOutput) ToUrlMonitorAlertSettingsOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsOutput {
	return o
}

func (o UrlMonitorAlertSettingsOutput) ToUrlMonitorAlertSettingsPtrOutput() UrlMonitorAlertSettingsPtrOutput {
	return o.ToUrlMonitorAlertSettingsPtrOutputWithContext(context.Background())
}

func (o UrlMonitorAlertSettingsOutput) ToUrlMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlMonitorAlertSettings) *UrlMonitorAlertSettings {
		return &v
	}).(UrlMonitorAlertSettingsPtrOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` and `TIME_BASED`.
func (o UrlMonitorAlertSettingsOutput) EscalationType() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettings) string { return v.EscalationType }).(pulumi.StringOutput)
}

// Configuration for parallel run failure threshold.
func (o UrlMonitorAlertSettingsOutput) ParallelRunFailureThresholds() UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettings) []UrlMonitorAlertSettingsParallelRunFailureThreshold {
		return v.ParallelRunFailureThresholds
	}).(UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

// Defines how often to send reminder notifications after initial alert.
func (o UrlMonitorAlertSettingsOutput) Reminders() UrlMonitorAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettings) []UrlMonitorAlertSettingsReminder { return v.Reminders }).(UrlMonitorAlertSettingsReminderArrayOutput)
}

// Configuration for run-based escalation.
func (o UrlMonitorAlertSettingsOutput) RunBasedEscalations() UrlMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettings) []UrlMonitorAlertSettingsRunBasedEscalation {
		return v.RunBasedEscalations
	}).(UrlMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

// Configuration for time-based escalation.
func (o UrlMonitorAlertSettingsOutput) TimeBasedEscalations() UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettings) []UrlMonitorAlertSettingsTimeBasedEscalation {
		return v.TimeBasedEscalations
	}).(UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type UrlMonitorAlertSettingsPtrOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitorAlertSettings)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsPtrOutput) ToUrlMonitorAlertSettingsPtrOutput() UrlMonitorAlertSettingsPtrOutput {
	return o
}

func (o UrlMonitorAlertSettingsPtrOutput) ToUrlMonitorAlertSettingsPtrOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsPtrOutput {
	return o
}

func (o UrlMonitorAlertSettingsPtrOutput) Elem() UrlMonitorAlertSettingsOutput {
	return o.ApplyT(func(v *UrlMonitorAlertSettings) UrlMonitorAlertSettings {
		if v != nil {
			return *v
		}
		var ret UrlMonitorAlertSettings
		return ret
	}).(UrlMonitorAlertSettingsOutput)
}

// Determines what type of escalation to use. Possible values are `RUN_BASED` and `TIME_BASED`.
func (o UrlMonitorAlertSettingsPtrOutput) EscalationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlMonitorAlertSettings) *string {
		if v == nil {
			return nil
		}
		return &v.EscalationType
	}).(pulumi.StringPtrOutput)
}

// Configuration for parallel run failure threshold.
func (o UrlMonitorAlertSettingsPtrOutput) ParallelRunFailureThresholds() UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o.ApplyT(func(v *UrlMonitorAlertSettings) []UrlMonitorAlertSettingsParallelRunFailureThreshold {
		if v == nil {
			return nil
		}
		return v.ParallelRunFailureThresholds
	}).(UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

// Defines how often to send reminder notifications after initial alert.
func (o UrlMonitorAlertSettingsPtrOutput) Reminders() UrlMonitorAlertSettingsReminderArrayOutput {
	return o.ApplyT(func(v *UrlMonitorAlertSettings) []UrlMonitorAlertSettingsReminder {
		if v == nil {
			return nil
		}
		return v.Reminders
	}).(UrlMonitorAlertSettingsReminderArrayOutput)
}

// Configuration for run-based escalation.
func (o UrlMonitorAlertSettingsPtrOutput) RunBasedEscalations() UrlMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o.ApplyT(func(v *UrlMonitorAlertSettings) []UrlMonitorAlertSettingsRunBasedEscalation {
		if v == nil {
			return nil
		}
		return v.RunBasedEscalations
	}).(UrlMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

// Configuration for time-based escalation.
func (o UrlMonitorAlertSettingsPtrOutput) TimeBasedEscalations() UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o.ApplyT(func(v *UrlMonitorAlertSettings) []UrlMonitorAlertSettingsTimeBasedEscalation {
		if v == nil {
			return nil
		}
		return v.TimeBasedEscalations
	}).(UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type UrlMonitorAlertSettingsParallelRunFailureThreshold struct {
	// Whether parallel run failure threshold is enabled. Applicable only for monitors scheduled in parallel in multiple locations. (Default `false`).
	Enabled *bool `pulumi:"enabled"`
	// Percentage of runs that must fail to trigger alert. Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `90`, and `100`. (Default `10`).
	Percentage *int `pulumi:"percentage"`
}

// UrlMonitorAlertSettingsParallelRunFailureThresholdInput is an input type that accepts UrlMonitorAlertSettingsParallelRunFailureThresholdArgs and UrlMonitorAlertSettingsParallelRunFailureThresholdOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsParallelRunFailureThresholdInput` via:
//
//	UrlMonitorAlertSettingsParallelRunFailureThresholdArgs{...}
type UrlMonitorAlertSettingsParallelRunFailureThresholdInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutput() UrlMonitorAlertSettingsParallelRunFailureThresholdOutput
	ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Context) UrlMonitorAlertSettingsParallelRunFailureThresholdOutput
}

type UrlMonitorAlertSettingsParallelRunFailureThresholdArgs struct {
	// Whether parallel run failure threshold is enabled. Applicable only for monitors scheduled in parallel in multiple locations. (Default `false`).
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Percentage of runs that must fail to trigger alert. Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `90`, and `100`. (Default `10`).
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (UrlMonitorAlertSettingsParallelRunFailureThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsParallelRunFailureThresholdArgs) ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutput() UrlMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return i.ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsParallelRunFailureThresholdArgs) ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsParallelRunFailureThresholdOutput)
}

// UrlMonitorAlertSettingsParallelRunFailureThresholdArrayInput is an input type that accepts UrlMonitorAlertSettingsParallelRunFailureThresholdArray and UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsParallelRunFailureThresholdArrayInput` via:
//
//	UrlMonitorAlertSettingsParallelRunFailureThresholdArray{ UrlMonitorAlertSettingsParallelRunFailureThresholdArgs{...} }
type UrlMonitorAlertSettingsParallelRunFailureThresholdArrayInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput
	ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Context) UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput
}

type UrlMonitorAlertSettingsParallelRunFailureThresholdArray []UrlMonitorAlertSettingsParallelRunFailureThresholdInput

func (UrlMonitorAlertSettingsParallelRunFailureThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsParallelRunFailureThresholdArray) ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return i.ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsParallelRunFailureThresholdArray) ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput)
}

type UrlMonitorAlertSettingsParallelRunFailureThresholdOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsParallelRunFailureThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsParallelRunFailureThresholdOutput) ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutput() UrlMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

func (o UrlMonitorAlertSettingsParallelRunFailureThresholdOutput) ToUrlMonitorAlertSettingsParallelRunFailureThresholdOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return o
}

// Whether parallel run failure threshold is enabled. Applicable only for monitors scheduled in parallel in multiple locations. (Default `false`).
func (o UrlMonitorAlertSettingsParallelRunFailureThresholdOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettingsParallelRunFailureThreshold) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Percentage of runs that must fail to trigger alert. Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `90`, and `100`. (Default `10`).
func (o UrlMonitorAlertSettingsParallelRunFailureThresholdOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettingsParallelRunFailureThreshold) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsParallelRunFailureThreshold)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput() UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) ToUrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput) Index(i pulumi.IntInput) UrlMonitorAlertSettingsParallelRunFailureThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMonitorAlertSettingsParallelRunFailureThreshold {
		return vs[0].([]UrlMonitorAlertSettingsParallelRunFailureThreshold)[vs[1].(int)]
	}).(UrlMonitorAlertSettingsParallelRunFailureThresholdOutput)
}

type UrlMonitorAlertSettingsReminder struct {
	// Number of reminder notifications to send. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000` (`0` to disable, `100000` for unlimited). (Default `0`).
	Amount *int `pulumi:"amount"`
	// Interval between reminder notifications in minutes. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval *int `pulumi:"interval"`
}

// UrlMonitorAlertSettingsReminderInput is an input type that accepts UrlMonitorAlertSettingsReminderArgs and UrlMonitorAlertSettingsReminderOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsReminderInput` via:
//
//	UrlMonitorAlertSettingsReminderArgs{...}
type UrlMonitorAlertSettingsReminderInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsReminderOutput() UrlMonitorAlertSettingsReminderOutput
	ToUrlMonitorAlertSettingsReminderOutputWithContext(context.Context) UrlMonitorAlertSettingsReminderOutput
}

type UrlMonitorAlertSettingsReminderArgs struct {
	// Number of reminder notifications to send. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000` (`0` to disable, `100000` for unlimited). (Default `0`).
	Amount pulumi.IntPtrInput `pulumi:"amount"`
	// Interval between reminder notifications in minutes. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (UrlMonitorAlertSettingsReminderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsReminder)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsReminderArgs) ToUrlMonitorAlertSettingsReminderOutput() UrlMonitorAlertSettingsReminderOutput {
	return i.ToUrlMonitorAlertSettingsReminderOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsReminderArgs) ToUrlMonitorAlertSettingsReminderOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsReminderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsReminderOutput)
}

// UrlMonitorAlertSettingsReminderArrayInput is an input type that accepts UrlMonitorAlertSettingsReminderArray and UrlMonitorAlertSettingsReminderArrayOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsReminderArrayInput` via:
//
//	UrlMonitorAlertSettingsReminderArray{ UrlMonitorAlertSettingsReminderArgs{...} }
type UrlMonitorAlertSettingsReminderArrayInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsReminderArrayOutput() UrlMonitorAlertSettingsReminderArrayOutput
	ToUrlMonitorAlertSettingsReminderArrayOutputWithContext(context.Context) UrlMonitorAlertSettingsReminderArrayOutput
}

type UrlMonitorAlertSettingsReminderArray []UrlMonitorAlertSettingsReminderInput

func (UrlMonitorAlertSettingsReminderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsReminder)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsReminderArray) ToUrlMonitorAlertSettingsReminderArrayOutput() UrlMonitorAlertSettingsReminderArrayOutput {
	return i.ToUrlMonitorAlertSettingsReminderArrayOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsReminderArray) ToUrlMonitorAlertSettingsReminderArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsReminderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsReminderArrayOutput)
}

type UrlMonitorAlertSettingsReminderOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsReminderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsReminder)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsReminderOutput) ToUrlMonitorAlertSettingsReminderOutput() UrlMonitorAlertSettingsReminderOutput {
	return o
}

func (o UrlMonitorAlertSettingsReminderOutput) ToUrlMonitorAlertSettingsReminderOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsReminderOutput {
	return o
}

// Number of reminder notifications to send. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000` (`0` to disable, `100000` for unlimited). (Default `0`).
func (o UrlMonitorAlertSettingsReminderOutput) Amount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettingsReminder) *int { return v.Amount }).(pulumi.IntPtrOutput)
}

// Interval between reminder notifications in minutes. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o UrlMonitorAlertSettingsReminderOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettingsReminder) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type UrlMonitorAlertSettingsReminderArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsReminderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsReminder)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsReminderArrayOutput) ToUrlMonitorAlertSettingsReminderArrayOutput() UrlMonitorAlertSettingsReminderArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsReminderArrayOutput) ToUrlMonitorAlertSettingsReminderArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsReminderArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsReminderArrayOutput) Index(i pulumi.IntInput) UrlMonitorAlertSettingsReminderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMonitorAlertSettingsReminder {
		return vs[0].([]UrlMonitorAlertSettingsReminder)[vs[1].(int)]
	}).(UrlMonitorAlertSettingsReminderOutput)
}

type UrlMonitorAlertSettingsRunBasedEscalation struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between `1` and `5`. (Default `1`).
	FailedRunThreshold *int `pulumi:"failedRunThreshold"`
}

// UrlMonitorAlertSettingsRunBasedEscalationInput is an input type that accepts UrlMonitorAlertSettingsRunBasedEscalationArgs and UrlMonitorAlertSettingsRunBasedEscalationOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsRunBasedEscalationInput` via:
//
//	UrlMonitorAlertSettingsRunBasedEscalationArgs{...}
type UrlMonitorAlertSettingsRunBasedEscalationInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsRunBasedEscalationOutput() UrlMonitorAlertSettingsRunBasedEscalationOutput
	ToUrlMonitorAlertSettingsRunBasedEscalationOutputWithContext(context.Context) UrlMonitorAlertSettingsRunBasedEscalationOutput
}

type UrlMonitorAlertSettingsRunBasedEscalationArgs struct {
	// After how many failed consecutive check runs an alert notification should be sent. Possible values are between `1` and `5`. (Default `1`).
	FailedRunThreshold pulumi.IntPtrInput `pulumi:"failedRunThreshold"`
}

func (UrlMonitorAlertSettingsRunBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsRunBasedEscalationArgs) ToUrlMonitorAlertSettingsRunBasedEscalationOutput() UrlMonitorAlertSettingsRunBasedEscalationOutput {
	return i.ToUrlMonitorAlertSettingsRunBasedEscalationOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsRunBasedEscalationArgs) ToUrlMonitorAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsRunBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsRunBasedEscalationOutput)
}

// UrlMonitorAlertSettingsRunBasedEscalationArrayInput is an input type that accepts UrlMonitorAlertSettingsRunBasedEscalationArray and UrlMonitorAlertSettingsRunBasedEscalationArrayOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsRunBasedEscalationArrayInput` via:
//
//	UrlMonitorAlertSettingsRunBasedEscalationArray{ UrlMonitorAlertSettingsRunBasedEscalationArgs{...} }
type UrlMonitorAlertSettingsRunBasedEscalationArrayInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutput() UrlMonitorAlertSettingsRunBasedEscalationArrayOutput
	ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Context) UrlMonitorAlertSettingsRunBasedEscalationArrayOutput
}

type UrlMonitorAlertSettingsRunBasedEscalationArray []UrlMonitorAlertSettingsRunBasedEscalationInput

func (UrlMonitorAlertSettingsRunBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsRunBasedEscalationArray) ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutput() UrlMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return i.ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsRunBasedEscalationArray) ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsRunBasedEscalationArrayOutput)
}

type UrlMonitorAlertSettingsRunBasedEscalationOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsRunBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsRunBasedEscalationOutput) ToUrlMonitorAlertSettingsRunBasedEscalationOutput() UrlMonitorAlertSettingsRunBasedEscalationOutput {
	return o
}

func (o UrlMonitorAlertSettingsRunBasedEscalationOutput) ToUrlMonitorAlertSettingsRunBasedEscalationOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsRunBasedEscalationOutput {
	return o
}

// After how many failed consecutive check runs an alert notification should be sent. Possible values are between `1` and `5`. (Default `1`).
func (o UrlMonitorAlertSettingsRunBasedEscalationOutput) FailedRunThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettingsRunBasedEscalation) *int { return v.FailedRunThreshold }).(pulumi.IntPtrOutput)
}

type UrlMonitorAlertSettingsRunBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsRunBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsRunBasedEscalation)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsRunBasedEscalationArrayOutput) ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutput() UrlMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsRunBasedEscalationArrayOutput) ToUrlMonitorAlertSettingsRunBasedEscalationArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsRunBasedEscalationArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsRunBasedEscalationArrayOutput) Index(i pulumi.IntInput) UrlMonitorAlertSettingsRunBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMonitorAlertSettingsRunBasedEscalation {
		return vs[0].([]UrlMonitorAlertSettingsRunBasedEscalation)[vs[1].(int)]
	}).(UrlMonitorAlertSettingsRunBasedEscalationOutput)
}

type UrlMonitorAlertSettingsTimeBasedEscalation struct {
	// After how many minutes after a monitor starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold *int `pulumi:"minutesFailingThreshold"`
}

// UrlMonitorAlertSettingsTimeBasedEscalationInput is an input type that accepts UrlMonitorAlertSettingsTimeBasedEscalationArgs and UrlMonitorAlertSettingsTimeBasedEscalationOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsTimeBasedEscalationInput` via:
//
//	UrlMonitorAlertSettingsTimeBasedEscalationArgs{...}
type UrlMonitorAlertSettingsTimeBasedEscalationInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsTimeBasedEscalationOutput() UrlMonitorAlertSettingsTimeBasedEscalationOutput
	ToUrlMonitorAlertSettingsTimeBasedEscalationOutputWithContext(context.Context) UrlMonitorAlertSettingsTimeBasedEscalationOutput
}

type UrlMonitorAlertSettingsTimeBasedEscalationArgs struct {
	// After how many minutes after a monitor starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
	MinutesFailingThreshold pulumi.IntPtrInput `pulumi:"minutesFailingThreshold"`
}

func (UrlMonitorAlertSettingsTimeBasedEscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsTimeBasedEscalationArgs) ToUrlMonitorAlertSettingsTimeBasedEscalationOutput() UrlMonitorAlertSettingsTimeBasedEscalationOutput {
	return i.ToUrlMonitorAlertSettingsTimeBasedEscalationOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsTimeBasedEscalationArgs) ToUrlMonitorAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsTimeBasedEscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsTimeBasedEscalationOutput)
}

// UrlMonitorAlertSettingsTimeBasedEscalationArrayInput is an input type that accepts UrlMonitorAlertSettingsTimeBasedEscalationArray and UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput values.
// You can construct a concrete instance of `UrlMonitorAlertSettingsTimeBasedEscalationArrayInput` via:
//
//	UrlMonitorAlertSettingsTimeBasedEscalationArray{ UrlMonitorAlertSettingsTimeBasedEscalationArgs{...} }
type UrlMonitorAlertSettingsTimeBasedEscalationArrayInput interface {
	pulumi.Input

	ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutput() UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput
	ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Context) UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput
}

type UrlMonitorAlertSettingsTimeBasedEscalationArray []UrlMonitorAlertSettingsTimeBasedEscalationInput

func (UrlMonitorAlertSettingsTimeBasedEscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (i UrlMonitorAlertSettingsTimeBasedEscalationArray) ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutput() UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return i.ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(context.Background())
}

func (i UrlMonitorAlertSettingsTimeBasedEscalationArray) ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput)
}

type UrlMonitorAlertSettingsTimeBasedEscalationOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsTimeBasedEscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsTimeBasedEscalationOutput) ToUrlMonitorAlertSettingsTimeBasedEscalationOutput() UrlMonitorAlertSettingsTimeBasedEscalationOutput {
	return o
}

func (o UrlMonitorAlertSettingsTimeBasedEscalationOutput) ToUrlMonitorAlertSettingsTimeBasedEscalationOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsTimeBasedEscalationOutput {
	return o
}

// After how many minutes after a monitor starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
func (o UrlMonitorAlertSettingsTimeBasedEscalationOutput) MinutesFailingThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorAlertSettingsTimeBasedEscalation) *int { return v.MinutesFailingThreshold }).(pulumi.IntPtrOutput)
}

type UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorAlertSettingsTimeBasedEscalation)(nil)).Elem()
}

func (o UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput) ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutput() UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput) ToUrlMonitorAlertSettingsTimeBasedEscalationArrayOutputWithContext(ctx context.Context) UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput {
	return o
}

func (o UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput) Index(i pulumi.IntInput) UrlMonitorAlertSettingsTimeBasedEscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMonitorAlertSettingsTimeBasedEscalation {
		return vs[0].([]UrlMonitorAlertSettingsTimeBasedEscalation)[vs[1].(int)]
	}).(UrlMonitorAlertSettingsTimeBasedEscalationOutput)
}

type UrlMonitorRequest struct {
	// Assertions to validate the HTTP response. URL monitors only support status code assertions.
	Assertions []UrlMonitorRequestAssertion `pulumi:"assertions"`
	// Whether to follow HTTP redirects automatically. (Default `true`).
	FollowRedirects *bool `pulumi:"followRedirects"`
	// IP family version to use for the connection. The value can be either `IPv4` or `IPv6`. (Default `IPv4`).
	IpFamily *string `pulumi:"ipFamily"`
	// Whether to skip SSL certificate verification. (Default `false`).
	SkipSsl *bool `pulumi:"skipSsl"`
	// The URL to monitor. Must be a valid HTTP or HTTPS URL.
	Url string `pulumi:"url"`
}

// UrlMonitorRequestInput is an input type that accepts UrlMonitorRequestArgs and UrlMonitorRequestOutput values.
// You can construct a concrete instance of `UrlMonitorRequestInput` via:
//
//	UrlMonitorRequestArgs{...}
type UrlMonitorRequestInput interface {
	pulumi.Input

	ToUrlMonitorRequestOutput() UrlMonitorRequestOutput
	ToUrlMonitorRequestOutputWithContext(context.Context) UrlMonitorRequestOutput
}

type UrlMonitorRequestArgs struct {
	// Assertions to validate the HTTP response. URL monitors only support status code assertions.
	Assertions UrlMonitorRequestAssertionArrayInput `pulumi:"assertions"`
	// Whether to follow HTTP redirects automatically. (Default `true`).
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// IP family version to use for the connection. The value can be either `IPv4` or `IPv6`. (Default `IPv4`).
	IpFamily pulumi.StringPtrInput `pulumi:"ipFamily"`
	// Whether to skip SSL certificate verification. (Default `false`).
	SkipSsl pulumi.BoolPtrInput `pulumi:"skipSsl"`
	// The URL to monitor. Must be a valid HTTP or HTTPS URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (UrlMonitorRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorRequest)(nil)).Elem()
}

func (i UrlMonitorRequestArgs) ToUrlMonitorRequestOutput() UrlMonitorRequestOutput {
	return i.ToUrlMonitorRequestOutputWithContext(context.Background())
}

func (i UrlMonitorRequestArgs) ToUrlMonitorRequestOutputWithContext(ctx context.Context) UrlMonitorRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRequestOutput)
}

func (i UrlMonitorRequestArgs) ToUrlMonitorRequestPtrOutput() UrlMonitorRequestPtrOutput {
	return i.ToUrlMonitorRequestPtrOutputWithContext(context.Background())
}

func (i UrlMonitorRequestArgs) ToUrlMonitorRequestPtrOutputWithContext(ctx context.Context) UrlMonitorRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRequestOutput).ToUrlMonitorRequestPtrOutputWithContext(ctx)
}

// UrlMonitorRequestPtrInput is an input type that accepts UrlMonitorRequestArgs, UrlMonitorRequestPtr and UrlMonitorRequestPtrOutput values.
// You can construct a concrete instance of `UrlMonitorRequestPtrInput` via:
//
//	        UrlMonitorRequestArgs{...}
//
//	or:
//
//	        nil
type UrlMonitorRequestPtrInput interface {
	pulumi.Input

	ToUrlMonitorRequestPtrOutput() UrlMonitorRequestPtrOutput
	ToUrlMonitorRequestPtrOutputWithContext(context.Context) UrlMonitorRequestPtrOutput
}

type urlMonitorRequestPtrType UrlMonitorRequestArgs

func UrlMonitorRequestPtr(v *UrlMonitorRequestArgs) UrlMonitorRequestPtrInput {
	return (*urlMonitorRequestPtrType)(v)
}

func (*urlMonitorRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitorRequest)(nil)).Elem()
}

func (i *urlMonitorRequestPtrType) ToUrlMonitorRequestPtrOutput() UrlMonitorRequestPtrOutput {
	return i.ToUrlMonitorRequestPtrOutputWithContext(context.Background())
}

func (i *urlMonitorRequestPtrType) ToUrlMonitorRequestPtrOutputWithContext(ctx context.Context) UrlMonitorRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRequestPtrOutput)
}

type UrlMonitorRequestOutput struct{ *pulumi.OutputState }

func (UrlMonitorRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorRequest)(nil)).Elem()
}

func (o UrlMonitorRequestOutput) ToUrlMonitorRequestOutput() UrlMonitorRequestOutput {
	return o
}

func (o UrlMonitorRequestOutput) ToUrlMonitorRequestOutputWithContext(ctx context.Context) UrlMonitorRequestOutput {
	return o
}

func (o UrlMonitorRequestOutput) ToUrlMonitorRequestPtrOutput() UrlMonitorRequestPtrOutput {
	return o.ToUrlMonitorRequestPtrOutputWithContext(context.Background())
}

func (o UrlMonitorRequestOutput) ToUrlMonitorRequestPtrOutputWithContext(ctx context.Context) UrlMonitorRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlMonitorRequest) *UrlMonitorRequest {
		return &v
	}).(UrlMonitorRequestPtrOutput)
}

// Assertions to validate the HTTP response. URL monitors only support status code assertions.
func (o UrlMonitorRequestOutput) Assertions() UrlMonitorRequestAssertionArrayOutput {
	return o.ApplyT(func(v UrlMonitorRequest) []UrlMonitorRequestAssertion { return v.Assertions }).(UrlMonitorRequestAssertionArrayOutput)
}

// Whether to follow HTTP redirects automatically. (Default `true`).
func (o UrlMonitorRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UrlMonitorRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// IP family version to use for the connection. The value can be either `IPv4` or `IPv6`. (Default `IPv4`).
func (o UrlMonitorRequestOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMonitorRequest) *string { return v.IpFamily }).(pulumi.StringPtrOutput)
}

// Whether to skip SSL certificate verification. (Default `false`).
func (o UrlMonitorRequestOutput) SkipSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UrlMonitorRequest) *bool { return v.SkipSsl }).(pulumi.BoolPtrOutput)
}

// The URL to monitor. Must be a valid HTTP or HTTPS URL.
func (o UrlMonitorRequestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMonitorRequest) string { return v.Url }).(pulumi.StringOutput)
}

type UrlMonitorRequestPtrOutput struct{ *pulumi.OutputState }

func (UrlMonitorRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitorRequest)(nil)).Elem()
}

func (o UrlMonitorRequestPtrOutput) ToUrlMonitorRequestPtrOutput() UrlMonitorRequestPtrOutput {
	return o
}

func (o UrlMonitorRequestPtrOutput) ToUrlMonitorRequestPtrOutputWithContext(ctx context.Context) UrlMonitorRequestPtrOutput {
	return o
}

func (o UrlMonitorRequestPtrOutput) Elem() UrlMonitorRequestOutput {
	return o.ApplyT(func(v *UrlMonitorRequest) UrlMonitorRequest {
		if v != nil {
			return *v
		}
		var ret UrlMonitorRequest
		return ret
	}).(UrlMonitorRequestOutput)
}

// Assertions to validate the HTTP response. URL monitors only support status code assertions.
func (o UrlMonitorRequestPtrOutput) Assertions() UrlMonitorRequestAssertionArrayOutput {
	return o.ApplyT(func(v *UrlMonitorRequest) []UrlMonitorRequestAssertion {
		if v == nil {
			return nil
		}
		return v.Assertions
	}).(UrlMonitorRequestAssertionArrayOutput)
}

// Whether to follow HTTP redirects automatically. (Default `true`).
func (o UrlMonitorRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// IP family version to use for the connection. The value can be either `IPv4` or `IPv6`. (Default `IPv4`).
func (o UrlMonitorRequestPtrOutput) IpFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRequest) *string {
		if v == nil {
			return nil
		}
		return v.IpFamily
	}).(pulumi.StringPtrOutput)
}

// Whether to skip SSL certificate verification. (Default `false`).
func (o UrlMonitorRequestPtrOutput) SkipSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRequest) *bool {
		if v == nil {
			return nil
		}
		return v.SkipSsl
	}).(pulumi.BoolPtrOutput)
}

// The URL to monitor. Must be a valid HTTP or HTTPS URL.
func (o UrlMonitorRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type UrlMonitorRequestAssertion struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `GREATER_THAN` and `LESS_THAN`.
	Comparison string  `pulumi:"comparison"`
	Property   *string `pulumi:"property"`
	// The source of the asserted value. The only allowed value is `STATUS_CODE`.
	Source string `pulumi:"source"`
	// The target value. Typically `200` when the source is `STATUS_CODE`.
	Target string `pulumi:"target"`
}

// UrlMonitorRequestAssertionInput is an input type that accepts UrlMonitorRequestAssertionArgs and UrlMonitorRequestAssertionOutput values.
// You can construct a concrete instance of `UrlMonitorRequestAssertionInput` via:
//
//	UrlMonitorRequestAssertionArgs{...}
type UrlMonitorRequestAssertionInput interface {
	pulumi.Input

	ToUrlMonitorRequestAssertionOutput() UrlMonitorRequestAssertionOutput
	ToUrlMonitorRequestAssertionOutputWithContext(context.Context) UrlMonitorRequestAssertionOutput
}

type UrlMonitorRequestAssertionArgs struct {
	// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `GREATER_THAN` and `LESS_THAN`.
	Comparison pulumi.StringInput    `pulumi:"comparison"`
	Property   pulumi.StringPtrInput `pulumi:"property"`
	// The source of the asserted value. The only allowed value is `STATUS_CODE`.
	Source pulumi.StringInput `pulumi:"source"`
	// The target value. Typically `200` when the source is `STATUS_CODE`.
	Target pulumi.StringInput `pulumi:"target"`
}

func (UrlMonitorRequestAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorRequestAssertion)(nil)).Elem()
}

func (i UrlMonitorRequestAssertionArgs) ToUrlMonitorRequestAssertionOutput() UrlMonitorRequestAssertionOutput {
	return i.ToUrlMonitorRequestAssertionOutputWithContext(context.Background())
}

func (i UrlMonitorRequestAssertionArgs) ToUrlMonitorRequestAssertionOutputWithContext(ctx context.Context) UrlMonitorRequestAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRequestAssertionOutput)
}

// UrlMonitorRequestAssertionArrayInput is an input type that accepts UrlMonitorRequestAssertionArray and UrlMonitorRequestAssertionArrayOutput values.
// You can construct a concrete instance of `UrlMonitorRequestAssertionArrayInput` via:
//
//	UrlMonitorRequestAssertionArray{ UrlMonitorRequestAssertionArgs{...} }
type UrlMonitorRequestAssertionArrayInput interface {
	pulumi.Input

	ToUrlMonitorRequestAssertionArrayOutput() UrlMonitorRequestAssertionArrayOutput
	ToUrlMonitorRequestAssertionArrayOutputWithContext(context.Context) UrlMonitorRequestAssertionArrayOutput
}

type UrlMonitorRequestAssertionArray []UrlMonitorRequestAssertionInput

func (UrlMonitorRequestAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorRequestAssertion)(nil)).Elem()
}

func (i UrlMonitorRequestAssertionArray) ToUrlMonitorRequestAssertionArrayOutput() UrlMonitorRequestAssertionArrayOutput {
	return i.ToUrlMonitorRequestAssertionArrayOutputWithContext(context.Background())
}

func (i UrlMonitorRequestAssertionArray) ToUrlMonitorRequestAssertionArrayOutputWithContext(ctx context.Context) UrlMonitorRequestAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRequestAssertionArrayOutput)
}

type UrlMonitorRequestAssertionOutput struct{ *pulumi.OutputState }

func (UrlMonitorRequestAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorRequestAssertion)(nil)).Elem()
}

func (o UrlMonitorRequestAssertionOutput) ToUrlMonitorRequestAssertionOutput() UrlMonitorRequestAssertionOutput {
	return o
}

func (o UrlMonitorRequestAssertionOutput) ToUrlMonitorRequestAssertionOutputWithContext(ctx context.Context) UrlMonitorRequestAssertionOutput {
	return o
}

// The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `GREATER_THAN` and `LESS_THAN`.
func (o UrlMonitorRequestAssertionOutput) Comparison() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMonitorRequestAssertion) string { return v.Comparison }).(pulumi.StringOutput)
}

func (o UrlMonitorRequestAssertionOutput) Property() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UrlMonitorRequestAssertion) *string { return v.Property }).(pulumi.StringPtrOutput)
}

// The source of the asserted value. The only allowed value is `STATUS_CODE`.
func (o UrlMonitorRequestAssertionOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMonitorRequestAssertion) string { return v.Source }).(pulumi.StringOutput)
}

// The target value. Typically `200` when the source is `STATUS_CODE`.
func (o UrlMonitorRequestAssertionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMonitorRequestAssertion) string { return v.Target }).(pulumi.StringOutput)
}

type UrlMonitorRequestAssertionArrayOutput struct{ *pulumi.OutputState }

func (UrlMonitorRequestAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UrlMonitorRequestAssertion)(nil)).Elem()
}

func (o UrlMonitorRequestAssertionArrayOutput) ToUrlMonitorRequestAssertionArrayOutput() UrlMonitorRequestAssertionArrayOutput {
	return o
}

func (o UrlMonitorRequestAssertionArrayOutput) ToUrlMonitorRequestAssertionArrayOutputWithContext(ctx context.Context) UrlMonitorRequestAssertionArrayOutput {
	return o
}

func (o UrlMonitorRequestAssertionArrayOutput) Index(i pulumi.IntInput) UrlMonitorRequestAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UrlMonitorRequestAssertion {
		return vs[0].([]UrlMonitorRequestAssertion)[vs[1].(int)]
	}).(UrlMonitorRequestAssertionOutput)
}

type UrlMonitorRetryStrategy struct {
	// The number of seconds to wait before the first retry attempt. (Default `60`).
	BaseBackoffSeconds *int `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the monitor (maximum 600 seconds). (Default `600`).
	MaxDurationSeconds *int `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the monitor. Value must be between `1` and `10`. (Default `2`).
	MaxRetries *int `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial monitor run. (Default `true`).
	SameRegion *bool `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, and `EXPONENTIAL`.
	Type string `pulumi:"type"`
}

// UrlMonitorRetryStrategyInput is an input type that accepts UrlMonitorRetryStrategyArgs and UrlMonitorRetryStrategyOutput values.
// You can construct a concrete instance of `UrlMonitorRetryStrategyInput` via:
//
//	UrlMonitorRetryStrategyArgs{...}
type UrlMonitorRetryStrategyInput interface {
	pulumi.Input

	ToUrlMonitorRetryStrategyOutput() UrlMonitorRetryStrategyOutput
	ToUrlMonitorRetryStrategyOutputWithContext(context.Context) UrlMonitorRetryStrategyOutput
}

type UrlMonitorRetryStrategyArgs struct {
	// The number of seconds to wait before the first retry attempt. (Default `60`).
	BaseBackoffSeconds pulumi.IntPtrInput `pulumi:"baseBackoffSeconds"`
	// The total amount of time to continue retrying the monitor (maximum 600 seconds). (Default `600`).
	MaxDurationSeconds pulumi.IntPtrInput `pulumi:"maxDurationSeconds"`
	// The maximum number of times to retry the monitor. Value must be between `1` and `10`. (Default `2`).
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Whether retries should be run in the same region as the initial monitor run. (Default `true`).
	SameRegion pulumi.BoolPtrInput `pulumi:"sameRegion"`
	// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, and `EXPONENTIAL`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (UrlMonitorRetryStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorRetryStrategy)(nil)).Elem()
}

func (i UrlMonitorRetryStrategyArgs) ToUrlMonitorRetryStrategyOutput() UrlMonitorRetryStrategyOutput {
	return i.ToUrlMonitorRetryStrategyOutputWithContext(context.Background())
}

func (i UrlMonitorRetryStrategyArgs) ToUrlMonitorRetryStrategyOutputWithContext(ctx context.Context) UrlMonitorRetryStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRetryStrategyOutput)
}

func (i UrlMonitorRetryStrategyArgs) ToUrlMonitorRetryStrategyPtrOutput() UrlMonitorRetryStrategyPtrOutput {
	return i.ToUrlMonitorRetryStrategyPtrOutputWithContext(context.Background())
}

func (i UrlMonitorRetryStrategyArgs) ToUrlMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) UrlMonitorRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRetryStrategyOutput).ToUrlMonitorRetryStrategyPtrOutputWithContext(ctx)
}

// UrlMonitorRetryStrategyPtrInput is an input type that accepts UrlMonitorRetryStrategyArgs, UrlMonitorRetryStrategyPtr and UrlMonitorRetryStrategyPtrOutput values.
// You can construct a concrete instance of `UrlMonitorRetryStrategyPtrInput` via:
//
//	        UrlMonitorRetryStrategyArgs{...}
//
//	or:
//
//	        nil
type UrlMonitorRetryStrategyPtrInput interface {
	pulumi.Input

	ToUrlMonitorRetryStrategyPtrOutput() UrlMonitorRetryStrategyPtrOutput
	ToUrlMonitorRetryStrategyPtrOutputWithContext(context.Context) UrlMonitorRetryStrategyPtrOutput
}

type urlMonitorRetryStrategyPtrType UrlMonitorRetryStrategyArgs

func UrlMonitorRetryStrategyPtr(v *UrlMonitorRetryStrategyArgs) UrlMonitorRetryStrategyPtrInput {
	return (*urlMonitorRetryStrategyPtrType)(v)
}

func (*urlMonitorRetryStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitorRetryStrategy)(nil)).Elem()
}

func (i *urlMonitorRetryStrategyPtrType) ToUrlMonitorRetryStrategyPtrOutput() UrlMonitorRetryStrategyPtrOutput {
	return i.ToUrlMonitorRetryStrategyPtrOutputWithContext(context.Background())
}

func (i *urlMonitorRetryStrategyPtrType) ToUrlMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) UrlMonitorRetryStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlMonitorRetryStrategyPtrOutput)
}

type UrlMonitorRetryStrategyOutput struct{ *pulumi.OutputState }

func (UrlMonitorRetryStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlMonitorRetryStrategy)(nil)).Elem()
}

func (o UrlMonitorRetryStrategyOutput) ToUrlMonitorRetryStrategyOutput() UrlMonitorRetryStrategyOutput {
	return o
}

func (o UrlMonitorRetryStrategyOutput) ToUrlMonitorRetryStrategyOutputWithContext(ctx context.Context) UrlMonitorRetryStrategyOutput {
	return o
}

func (o UrlMonitorRetryStrategyOutput) ToUrlMonitorRetryStrategyPtrOutput() UrlMonitorRetryStrategyPtrOutput {
	return o.ToUrlMonitorRetryStrategyPtrOutputWithContext(context.Background())
}

func (o UrlMonitorRetryStrategyOutput) ToUrlMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) UrlMonitorRetryStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UrlMonitorRetryStrategy) *UrlMonitorRetryStrategy {
		return &v
	}).(UrlMonitorRetryStrategyPtrOutput)
}

// The number of seconds to wait before the first retry attempt. (Default `60`).
func (o UrlMonitorRetryStrategyOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorRetryStrategy) *int { return v.BaseBackoffSeconds }).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the monitor (maximum 600 seconds). (Default `600`).
func (o UrlMonitorRetryStrategyOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorRetryStrategy) *int { return v.MaxDurationSeconds }).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the monitor. Value must be between `1` and `10`. (Default `2`).
func (o UrlMonitorRetryStrategyOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UrlMonitorRetryStrategy) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial monitor run. (Default `true`).
func (o UrlMonitorRetryStrategyOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UrlMonitorRetryStrategy) *bool { return v.SameRegion }).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, and `EXPONENTIAL`.
func (o UrlMonitorRetryStrategyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UrlMonitorRetryStrategy) string { return v.Type }).(pulumi.StringOutput)
}

type UrlMonitorRetryStrategyPtrOutput struct{ *pulumi.OutputState }

func (UrlMonitorRetryStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlMonitorRetryStrategy)(nil)).Elem()
}

func (o UrlMonitorRetryStrategyPtrOutput) ToUrlMonitorRetryStrategyPtrOutput() UrlMonitorRetryStrategyPtrOutput {
	return o
}

func (o UrlMonitorRetryStrategyPtrOutput) ToUrlMonitorRetryStrategyPtrOutputWithContext(ctx context.Context) UrlMonitorRetryStrategyPtrOutput {
	return o
}

func (o UrlMonitorRetryStrategyPtrOutput) Elem() UrlMonitorRetryStrategyOutput {
	return o.ApplyT(func(v *UrlMonitorRetryStrategy) UrlMonitorRetryStrategy {
		if v != nil {
			return *v
		}
		var ret UrlMonitorRetryStrategy
		return ret
	}).(UrlMonitorRetryStrategyOutput)
}

// The number of seconds to wait before the first retry attempt. (Default `60`).
func (o UrlMonitorRetryStrategyPtrOutput) BaseBackoffSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.BaseBackoffSeconds
	}).(pulumi.IntPtrOutput)
}

// The total amount of time to continue retrying the monitor (maximum 600 seconds). (Default `600`).
func (o UrlMonitorRetryStrategyPtrOutput) MaxDurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxDurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The maximum number of times to retry the monitor. Value must be between `1` and `10`. (Default `2`).
func (o UrlMonitorRetryStrategyPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRetryStrategy) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Whether retries should be run in the same region as the initial monitor run. (Default `true`).
func (o UrlMonitorRetryStrategyPtrOutput) SameRegion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRetryStrategy) *bool {
		if v == nil {
			return nil
		}
		return v.SameRegion
	}).(pulumi.BoolPtrOutput)
}

// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, and `EXPONENTIAL`.
func (o UrlMonitorRetryStrategyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlMonitorRetryStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelCallInput)(nil)).Elem(), AlertChannelCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelCallPtrInput)(nil)).Elem(), AlertChannelCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelEmailInput)(nil)).Elem(), AlertChannelEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelEmailPtrInput)(nil)).Elem(), AlertChannelEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelOpsgenieInput)(nil)).Elem(), AlertChannelOpsgenieArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelOpsgeniePtrInput)(nil)).Elem(), AlertChannelOpsgenieArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelPagerdutyInput)(nil)).Elem(), AlertChannelPagerdutyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelPagerdutyPtrInput)(nil)).Elem(), AlertChannelPagerdutyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelSlackInput)(nil)).Elem(), AlertChannelSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelSlackPtrInput)(nil)).Elem(), AlertChannelSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelSmsInput)(nil)).Elem(), AlertChannelSmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelSmsPtrInput)(nil)).Elem(), AlertChannelSmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelWebhookInput)(nil)).Elem(), AlertChannelWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertChannelWebhookPtrInput)(nil)).Elem(), AlertChannelWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertChannelSubscriptionInput)(nil)).Elem(), CheckAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertChannelSubscriptionArrayInput)(nil)).Elem(), CheckAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsInput)(nil)).Elem(), CheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsPtrInput)(nil)).Elem(), CheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), CheckAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), CheckAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsReminderInput)(nil)).Elem(), CheckAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsReminderArrayInput)(nil)).Elem(), CheckAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsRunBasedEscalationInput)(nil)).Elem(), CheckAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), CheckAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsSslCertificateInput)(nil)).Elem(), CheckAlertSettingsSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsSslCertificateArrayInput)(nil)).Elem(), CheckAlertSettingsSslCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), CheckAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), CheckAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckEnvironmentVariableInput)(nil)).Elem(), CheckEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckEnvironmentVariableArrayInput)(nil)).Elem(), CheckEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertChannelSubscriptionInput)(nil)).Elem(), CheckGroupAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertChannelSubscriptionArrayInput)(nil)).Elem(), CheckGroupAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsInput)(nil)).Elem(), CheckGroupAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsPtrInput)(nil)).Elem(), CheckGroupAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), CheckGroupAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), CheckGroupAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsReminderInput)(nil)).Elem(), CheckGroupAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsReminderArrayInput)(nil)).Elem(), CheckGroupAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsRunBasedEscalationInput)(nil)).Elem(), CheckGroupAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), CheckGroupAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsSslCertificateInput)(nil)).Elem(), CheckGroupAlertSettingsSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsSslCertificateArrayInput)(nil)).Elem(), CheckGroupAlertSettingsSslCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), CheckGroupAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), CheckGroupAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupApiCheckDefaultsInput)(nil)).Elem(), CheckGroupApiCheckDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupApiCheckDefaultsPtrInput)(nil)).Elem(), CheckGroupApiCheckDefaultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupApiCheckDefaultsAssertionInput)(nil)).Elem(), CheckGroupApiCheckDefaultsAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupApiCheckDefaultsAssertionArrayInput)(nil)).Elem(), CheckGroupApiCheckDefaultsAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupApiCheckDefaultsBasicAuthInput)(nil)).Elem(), CheckGroupApiCheckDefaultsBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupApiCheckDefaultsBasicAuthPtrInput)(nil)).Elem(), CheckGroupApiCheckDefaultsBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupEnvironmentVariableInput)(nil)).Elem(), CheckGroupEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupEnvironmentVariableArrayInput)(nil)).Elem(), CheckGroupEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupRetryStrategyInput)(nil)).Elem(), CheckGroupRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckGroupRetryStrategyPtrInput)(nil)).Elem(), CheckGroupRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestInput)(nil)).Elem(), CheckRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestPtrInput)(nil)).Elem(), CheckRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestAssertionInput)(nil)).Elem(), CheckRequestAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestAssertionArrayInput)(nil)).Elem(), CheckRequestAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestBasicAuthInput)(nil)).Elem(), CheckRequestBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRequestBasicAuthPtrInput)(nil)).Elem(), CheckRequestBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRetryStrategyInput)(nil)).Elem(), CheckRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckRetryStrategyPtrInput)(nil)).Elem(), CheckRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertChannelSubscriptionInput)(nil)).Elem(), HeartbeatCheckAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertChannelSubscriptionArrayInput)(nil)).Elem(), HeartbeatCheckAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsInput)(nil)).Elem(), HeartbeatCheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsPtrInput)(nil)).Elem(), HeartbeatCheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), HeartbeatCheckAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), HeartbeatCheckAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsReminderInput)(nil)).Elem(), HeartbeatCheckAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsReminderArrayInput)(nil)).Elem(), HeartbeatCheckAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsRunBasedEscalationInput)(nil)).Elem(), HeartbeatCheckAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), HeartbeatCheckAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsSslCertificateInput)(nil)).Elem(), HeartbeatCheckAlertSettingsSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsSslCertificateArrayInput)(nil)).Elem(), HeartbeatCheckAlertSettingsSslCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), HeartbeatCheckAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), HeartbeatCheckAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckHeartbeatInput)(nil)).Elem(), HeartbeatCheckHeartbeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckHeartbeatPtrInput)(nil)).Elem(), HeartbeatCheckHeartbeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertChannelSubscriptionInput)(nil)).Elem(), HeartbeatMonitorAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertChannelSubscriptionArrayInput)(nil)).Elem(), HeartbeatMonitorAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsPtrInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsReminderInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsReminderArrayInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsRunBasedEscalationInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsSslCertificateInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsSslCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsSslCertificateArrayInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsSslCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), HeartbeatMonitorAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorHeartbeatInput)(nil)).Elem(), HeartbeatMonitorHeartbeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorHeartbeatPtrInput)(nil)).Elem(), HeartbeatMonitorHeartbeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageCardInput)(nil)).Elem(), StatusPageCardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageCardArrayInput)(nil)).Elem(), StatusPageCardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageCardServiceAttachmentInput)(nil)).Elem(), StatusPageCardServiceAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageCardServiceAttachmentArrayInput)(nil)).Elem(), StatusPageCardServiceAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertChannelSubscriptionInput)(nil)).Elem(), TcpCheckAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertChannelSubscriptionArrayInput)(nil)).Elem(), TcpCheckAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsInput)(nil)).Elem(), TcpCheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsPtrInput)(nil)).Elem(), TcpCheckAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), TcpCheckAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), TcpCheckAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsReminderInput)(nil)).Elem(), TcpCheckAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsReminderArrayInput)(nil)).Elem(), TcpCheckAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsRunBasedEscalationInput)(nil)).Elem(), TcpCheckAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), TcpCheckAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), TcpCheckAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), TcpCheckAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckRequestInput)(nil)).Elem(), TcpCheckRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckRequestPtrInput)(nil)).Elem(), TcpCheckRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckRequestAssertionInput)(nil)).Elem(), TcpCheckRequestAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckRequestAssertionArrayInput)(nil)).Elem(), TcpCheckRequestAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckRetryStrategyInput)(nil)).Elem(), TcpCheckRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpCheckRetryStrategyPtrInput)(nil)).Elem(), TcpCheckRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertChannelSubscriptionInput)(nil)).Elem(), TcpMonitorAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertChannelSubscriptionArrayInput)(nil)).Elem(), TcpMonitorAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsInput)(nil)).Elem(), TcpMonitorAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsPtrInput)(nil)).Elem(), TcpMonitorAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), TcpMonitorAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), TcpMonitorAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsReminderInput)(nil)).Elem(), TcpMonitorAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsReminderArrayInput)(nil)).Elem(), TcpMonitorAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsRunBasedEscalationInput)(nil)).Elem(), TcpMonitorAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), TcpMonitorAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), TcpMonitorAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), TcpMonitorAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorRequestInput)(nil)).Elem(), TcpMonitorRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorRequestPtrInput)(nil)).Elem(), TcpMonitorRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorRequestAssertionInput)(nil)).Elem(), TcpMonitorRequestAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorRequestAssertionArrayInput)(nil)).Elem(), TcpMonitorRequestAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorRetryStrategyInput)(nil)).Elem(), TcpMonitorRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpMonitorRetryStrategyPtrInput)(nil)).Elem(), TcpMonitorRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertChannelSubscriptionInput)(nil)).Elem(), UrlMonitorAlertChannelSubscriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertChannelSubscriptionArrayInput)(nil)).Elem(), UrlMonitorAlertChannelSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsInput)(nil)).Elem(), UrlMonitorAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsPtrInput)(nil)).Elem(), UrlMonitorAlertSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsParallelRunFailureThresholdInput)(nil)).Elem(), UrlMonitorAlertSettingsParallelRunFailureThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsParallelRunFailureThresholdArrayInput)(nil)).Elem(), UrlMonitorAlertSettingsParallelRunFailureThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsReminderInput)(nil)).Elem(), UrlMonitorAlertSettingsReminderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsReminderArrayInput)(nil)).Elem(), UrlMonitorAlertSettingsReminderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsRunBasedEscalationInput)(nil)).Elem(), UrlMonitorAlertSettingsRunBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsRunBasedEscalationArrayInput)(nil)).Elem(), UrlMonitorAlertSettingsRunBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsTimeBasedEscalationInput)(nil)).Elem(), UrlMonitorAlertSettingsTimeBasedEscalationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorAlertSettingsTimeBasedEscalationArrayInput)(nil)).Elem(), UrlMonitorAlertSettingsTimeBasedEscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorRequestInput)(nil)).Elem(), UrlMonitorRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorRequestPtrInput)(nil)).Elem(), UrlMonitorRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorRequestAssertionInput)(nil)).Elem(), UrlMonitorRequestAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorRequestAssertionArrayInput)(nil)).Elem(), UrlMonitorRequestAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorRetryStrategyInput)(nil)).Elem(), UrlMonitorRetryStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlMonitorRetryStrategyPtrInput)(nil)).Elem(), UrlMonitorRetryStrategyArgs{})
	pulumi.RegisterOutputType(AlertChannelCallOutput{})
	pulumi.RegisterOutputType(AlertChannelCallPtrOutput{})
	pulumi.RegisterOutputType(AlertChannelEmailOutput{})
	pulumi.RegisterOutputType(AlertChannelEmailPtrOutput{})
	pulumi.RegisterOutputType(AlertChannelOpsgenieOutput{})
	pulumi.RegisterOutputType(AlertChannelOpsgeniePtrOutput{})
	pulumi.RegisterOutputType(AlertChannelPagerdutyOutput{})
	pulumi.RegisterOutputType(AlertChannelPagerdutyPtrOutput{})
	pulumi.RegisterOutputType(AlertChannelSlackOutput{})
	pulumi.RegisterOutputType(AlertChannelSlackPtrOutput{})
	pulumi.RegisterOutputType(AlertChannelSmsOutput{})
	pulumi.RegisterOutputType(AlertChannelSmsPtrOutput{})
	pulumi.RegisterOutputType(AlertChannelWebhookOutput{})
	pulumi.RegisterOutputType(AlertChannelWebhookPtrOutput{})
	pulumi.RegisterOutputType(CheckAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(CheckAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsSslCertificateOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsSslCertificateArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(CheckAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(CheckEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(CheckEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsSslCertificateOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsSslCertificateArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(CheckGroupAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupApiCheckDefaultsOutput{})
	pulumi.RegisterOutputType(CheckGroupApiCheckDefaultsPtrOutput{})
	pulumi.RegisterOutputType(CheckGroupApiCheckDefaultsAssertionOutput{})
	pulumi.RegisterOutputType(CheckGroupApiCheckDefaultsAssertionArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupApiCheckDefaultsBasicAuthOutput{})
	pulumi.RegisterOutputType(CheckGroupApiCheckDefaultsBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(CheckGroupEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(CheckGroupEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(CheckGroupRetryStrategyOutput{})
	pulumi.RegisterOutputType(CheckGroupRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(CheckRequestOutput{})
	pulumi.RegisterOutputType(CheckRequestPtrOutput{})
	pulumi.RegisterOutputType(CheckRequestAssertionOutput{})
	pulumi.RegisterOutputType(CheckRequestAssertionArrayOutput{})
	pulumi.RegisterOutputType(CheckRequestBasicAuthOutput{})
	pulumi.RegisterOutputType(CheckRequestBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(CheckRetryStrategyOutput{})
	pulumi.RegisterOutputType(CheckRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsSslCertificateOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsSslCertificateArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckHeartbeatOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckHeartbeatPtrOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsSslCertificateOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsSslCertificateArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorHeartbeatOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorHeartbeatPtrOutput{})
	pulumi.RegisterOutputType(StatusPageCardOutput{})
	pulumi.RegisterOutputType(StatusPageCardArrayOutput{})
	pulumi.RegisterOutputType(StatusPageCardServiceAttachmentOutput{})
	pulumi.RegisterOutputType(StatusPageCardServiceAttachmentArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(TcpCheckAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckRequestOutput{})
	pulumi.RegisterOutputType(TcpCheckRequestPtrOutput{})
	pulumi.RegisterOutputType(TcpCheckRequestAssertionOutput{})
	pulumi.RegisterOutputType(TcpCheckRequestAssertionArrayOutput{})
	pulumi.RegisterOutputType(TcpCheckRetryStrategyOutput{})
	pulumi.RegisterOutputType(TcpCheckRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(TcpMonitorAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorRequestOutput{})
	pulumi.RegisterOutputType(TcpMonitorRequestPtrOutput{})
	pulumi.RegisterOutputType(TcpMonitorRequestAssertionOutput{})
	pulumi.RegisterOutputType(TcpMonitorRequestAssertionArrayOutput{})
	pulumi.RegisterOutputType(TcpMonitorRetryStrategyOutput{})
	pulumi.RegisterOutputType(TcpMonitorRetryStrategyPtrOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertChannelSubscriptionOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertChannelSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsPtrOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsParallelRunFailureThresholdOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsParallelRunFailureThresholdArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsReminderOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsReminderArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsRunBasedEscalationOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsRunBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsTimeBasedEscalationOutput{})
	pulumi.RegisterOutputType(UrlMonitorAlertSettingsTimeBasedEscalationArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorRequestOutput{})
	pulumi.RegisterOutputType(UrlMonitorRequestPtrOutput{})
	pulumi.RegisterOutputType(UrlMonitorRequestAssertionOutput{})
	pulumi.RegisterOutputType(UrlMonitorRequestAssertionArrayOutput{})
	pulumi.RegisterOutputType(UrlMonitorRetryStrategyOutput{})
	pulumi.RegisterOutputType(UrlMonitorRetryStrategyPtrOutput{})
}
