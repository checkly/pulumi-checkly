// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Heartbeats allows you to monitor your cron jobs and set up alerting, so you get a notification when things break or slow down.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := checkly.NewHeartbeatMonitor(ctx, "example-heartbeat-monitor", &checkly.HeartbeatMonitorArgs{
//				Name:      pulumi.String("Example heartbeat monitor"),
//				Activated: pulumi.Bool(true),
//				Heartbeat: &checkly.HeartbeatMonitorHeartbeatArgs{
//					Period:     pulumi.Int(7),
//					PeriodUnit: pulumi.String("days"),
//					Grace:      pulumi.Int(1),
//					GraceUnit:  pulumi.String("days"),
//				},
//				UseGlobalAlertSettings: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HeartbeatMonitor struct {
	pulumi.CustomResourceState

	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolOutput                                   `pulumi:"activated"`
	AlertChannelSubscriptions HeartbeatMonitorAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	AlertSettings             HeartbeatMonitorAlertSettingsOutput                 `pulumi:"alertSettings"`
	Heartbeat                 HeartbeatMonitorHeartbeatOutput                     `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the check.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident HeartbeatMonitorTriggerIncidentPtrOutput `pulumi:"triggerIncident"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewHeartbeatMonitor registers a new resource with the given unique name, arguments, and options.
func NewHeartbeatMonitor(ctx *pulumi.Context,
	name string, args *HeartbeatMonitorArgs, opts ...pulumi.ResourceOption) (*HeartbeatMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Heartbeat == nil {
		return nil, errors.New("invalid value for required argument 'Heartbeat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HeartbeatMonitor
	err := ctx.RegisterResource("checkly:index/heartbeatMonitor:HeartbeatMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHeartbeatMonitor gets an existing HeartbeatMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeartbeatMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HeartbeatMonitorState, opts ...pulumi.ResourceOption) (*HeartbeatMonitor, error) {
	var resource HeartbeatMonitor
	err := ctx.ReadResource("checkly:index/heartbeatMonitor:HeartbeatMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HeartbeatMonitor resources.
type heartbeatMonitorState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 *bool                                      `pulumi:"activated"`
	AlertChannelSubscriptions []HeartbeatMonitorAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *HeartbeatMonitorAlertSettings             `pulumi:"alertSettings"`
	Heartbeat                 *HeartbeatMonitorHeartbeat                 `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident *HeartbeatMonitorTriggerIncident `pulumi:"triggerIncident"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type HeartbeatMonitorState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolPtrInput
	AlertChannelSubscriptions HeartbeatMonitorAlertChannelSubscriptionArrayInput
	AlertSettings             HeartbeatMonitorAlertSettingsPtrInput
	Heartbeat                 HeartbeatMonitorHeartbeatPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident HeartbeatMonitorTriggerIncidentPtrInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (HeartbeatMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatMonitorState)(nil)).Elem()
}

type heartbeatMonitorArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 bool                                       `pulumi:"activated"`
	AlertChannelSubscriptions []HeartbeatMonitorAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *HeartbeatMonitorAlertSettings             `pulumi:"alertSettings"`
	Heartbeat                 HeartbeatMonitorHeartbeat                  `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident *HeartbeatMonitorTriggerIncident `pulumi:"triggerIncident"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a HeartbeatMonitor resource.
type HeartbeatMonitorArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolInput
	AlertChannelSubscriptions HeartbeatMonitorAlertChannelSubscriptionArrayInput
	AlertSettings             HeartbeatMonitorAlertSettingsPtrInput
	Heartbeat                 HeartbeatMonitorHeartbeatInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// Create and resolve an incident based on the alert configuration. Useful for status page automation.
	TriggerIncident HeartbeatMonitorTriggerIncidentPtrInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (HeartbeatMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatMonitorArgs)(nil)).Elem()
}

type HeartbeatMonitorInput interface {
	pulumi.Input

	ToHeartbeatMonitorOutput() HeartbeatMonitorOutput
	ToHeartbeatMonitorOutputWithContext(ctx context.Context) HeartbeatMonitorOutput
}

func (*HeartbeatMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatMonitor)(nil)).Elem()
}

func (i *HeartbeatMonitor) ToHeartbeatMonitorOutput() HeartbeatMonitorOutput {
	return i.ToHeartbeatMonitorOutputWithContext(context.Background())
}

func (i *HeartbeatMonitor) ToHeartbeatMonitorOutputWithContext(ctx context.Context) HeartbeatMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorOutput)
}

// HeartbeatMonitorArrayInput is an input type that accepts HeartbeatMonitorArray and HeartbeatMonitorArrayOutput values.
// You can construct a concrete instance of `HeartbeatMonitorArrayInput` via:
//
//	HeartbeatMonitorArray{ HeartbeatMonitorArgs{...} }
type HeartbeatMonitorArrayInput interface {
	pulumi.Input

	ToHeartbeatMonitorArrayOutput() HeartbeatMonitorArrayOutput
	ToHeartbeatMonitorArrayOutputWithContext(context.Context) HeartbeatMonitorArrayOutput
}

type HeartbeatMonitorArray []HeartbeatMonitorInput

func (HeartbeatMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HeartbeatMonitor)(nil)).Elem()
}

func (i HeartbeatMonitorArray) ToHeartbeatMonitorArrayOutput() HeartbeatMonitorArrayOutput {
	return i.ToHeartbeatMonitorArrayOutputWithContext(context.Background())
}

func (i HeartbeatMonitorArray) ToHeartbeatMonitorArrayOutputWithContext(ctx context.Context) HeartbeatMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorArrayOutput)
}

// HeartbeatMonitorMapInput is an input type that accepts HeartbeatMonitorMap and HeartbeatMonitorMapOutput values.
// You can construct a concrete instance of `HeartbeatMonitorMapInput` via:
//
//	HeartbeatMonitorMap{ "key": HeartbeatMonitorArgs{...} }
type HeartbeatMonitorMapInput interface {
	pulumi.Input

	ToHeartbeatMonitorMapOutput() HeartbeatMonitorMapOutput
	ToHeartbeatMonitorMapOutputWithContext(context.Context) HeartbeatMonitorMapOutput
}

type HeartbeatMonitorMap map[string]HeartbeatMonitorInput

func (HeartbeatMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HeartbeatMonitor)(nil)).Elem()
}

func (i HeartbeatMonitorMap) ToHeartbeatMonitorMapOutput() HeartbeatMonitorMapOutput {
	return i.ToHeartbeatMonitorMapOutputWithContext(context.Background())
}

func (i HeartbeatMonitorMap) ToHeartbeatMonitorMapOutputWithContext(ctx context.Context) HeartbeatMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMonitorMapOutput)
}

type HeartbeatMonitorOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatMonitor)(nil)).Elem()
}

func (o HeartbeatMonitorOutput) ToHeartbeatMonitorOutput() HeartbeatMonitorOutput {
	return o
}

func (o HeartbeatMonitorOutput) ToHeartbeatMonitorOutputWithContext(ctx context.Context) HeartbeatMonitorOutput {
	return o
}

// Determines if the check is running or not. Possible values `true`, and `false`.
func (o HeartbeatMonitorOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) pulumi.BoolOutput { return v.Activated }).(pulumi.BoolOutput)
}

func (o HeartbeatMonitorOutput) AlertChannelSubscriptions() HeartbeatMonitorAlertChannelSubscriptionArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) HeartbeatMonitorAlertChannelSubscriptionArrayOutput {
		return v.AlertChannelSubscriptions
	}).(HeartbeatMonitorAlertChannelSubscriptionArrayOutput)
}

func (o HeartbeatMonitorOutput) AlertSettings() HeartbeatMonitorAlertSettingsOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) HeartbeatMonitorAlertSettingsOutput { return v.AlertSettings }).(HeartbeatMonitorAlertSettingsOutput)
}

func (o HeartbeatMonitorOutput) Heartbeat() HeartbeatMonitorHeartbeatOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) HeartbeatMonitorHeartbeatOutput { return v.Heartbeat }).(HeartbeatMonitorHeartbeatOutput)
}

// Determines if any notifications will be sent out when a check fails/degrades/recovers.
func (o HeartbeatMonitorOutput) Muted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) pulumi.BoolPtrOutput { return v.Muted }).(pulumi.BoolPtrOutput)
}

// The name of the check.
func (o HeartbeatMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of tags for organizing and filtering checks.
func (o HeartbeatMonitorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Create and resolve an incident based on the alert configuration. Useful for status page automation.
func (o HeartbeatMonitorOutput) TriggerIncident() HeartbeatMonitorTriggerIncidentPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) HeartbeatMonitorTriggerIncidentPtrOutput { return v.TriggerIncident }).(HeartbeatMonitorTriggerIncidentPtrOutput)
}

// When true, the account level alert settings will be used, not the alert setting defined on this check.
func (o HeartbeatMonitorOutput) UseGlobalAlertSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HeartbeatMonitor) pulumi.BoolPtrOutput { return v.UseGlobalAlertSettings }).(pulumi.BoolPtrOutput)
}

type HeartbeatMonitorArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HeartbeatMonitor)(nil)).Elem()
}

func (o HeartbeatMonitorArrayOutput) ToHeartbeatMonitorArrayOutput() HeartbeatMonitorArrayOutput {
	return o
}

func (o HeartbeatMonitorArrayOutput) ToHeartbeatMonitorArrayOutputWithContext(ctx context.Context) HeartbeatMonitorArrayOutput {
	return o
}

func (o HeartbeatMonitorArrayOutput) Index(i pulumi.IntInput) HeartbeatMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HeartbeatMonitor {
		return vs[0].([]*HeartbeatMonitor)[vs[1].(int)]
	}).(HeartbeatMonitorOutput)
}

type HeartbeatMonitorMapOutput struct{ *pulumi.OutputState }

func (HeartbeatMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HeartbeatMonitor)(nil)).Elem()
}

func (o HeartbeatMonitorMapOutput) ToHeartbeatMonitorMapOutput() HeartbeatMonitorMapOutput {
	return o
}

func (o HeartbeatMonitorMapOutput) ToHeartbeatMonitorMapOutputWithContext(ctx context.Context) HeartbeatMonitorMapOutput {
	return o
}

func (o HeartbeatMonitorMapOutput) MapIndex(k pulumi.StringInput) HeartbeatMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HeartbeatMonitor {
		return vs[0].(map[string]*HeartbeatMonitor)[vs[1].(string)]
	}).(HeartbeatMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorInput)(nil)).Elem(), &HeartbeatMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorArrayInput)(nil)).Elem(), HeartbeatMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMonitorMapInput)(nil)).Elem(), HeartbeatMonitorMap{})
	pulumi.RegisterOutputType(HeartbeatMonitorOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMonitorMapOutput{})
}
