// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Heartbeats allows you to monitor your cron jobs and set up alerting, so you get a notification when things break or slow down.
type Heartbeat struct {
	pulumi.CustomResourceState

	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolOutput                            `pulumi:"activated"`
	AlertChannelSubscriptions HeartbeatAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	AlertSettings             HeartbeatAlertSettingsOutput                 `pulumi:"alertSettings"`
	Heartbeat                 HeartbeatHeartbeatOutput                     `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the check.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewHeartbeat registers a new resource with the given unique name, arguments, and options.
func NewHeartbeat(ctx *pulumi.Context,
	name string, args *HeartbeatArgs, opts ...pulumi.ResourceOption) (*Heartbeat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Heartbeat == nil {
		return nil, errors.New("invalid value for required argument 'Heartbeat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Heartbeat
	err := ctx.RegisterResource("checkly:index/heartbeat:Heartbeat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHeartbeat gets an existing Heartbeat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeartbeat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HeartbeatState, opts ...pulumi.ResourceOption) (*Heartbeat, error) {
	var resource Heartbeat
	err := ctx.ReadResource("checkly:index/heartbeat:Heartbeat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Heartbeat resources.
type heartbeatState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 *bool                               `pulumi:"activated"`
	AlertChannelSubscriptions []HeartbeatAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *HeartbeatAlertSettings             `pulumi:"alertSettings"`
	Heartbeat                 *HeartbeatHeartbeat                 `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type HeartbeatState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolPtrInput
	AlertChannelSubscriptions HeartbeatAlertChannelSubscriptionArrayInput
	AlertSettings             HeartbeatAlertSettingsPtrInput
	Heartbeat                 HeartbeatHeartbeatPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (HeartbeatState) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatState)(nil)).Elem()
}

type heartbeatArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 bool                                `pulumi:"activated"`
	AlertChannelSubscriptions []HeartbeatAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *HeartbeatAlertSettings             `pulumi:"alertSettings"`
	Heartbeat                 HeartbeatHeartbeat                  `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a Heartbeat resource.
type HeartbeatArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolInput
	AlertChannelSubscriptions HeartbeatAlertChannelSubscriptionArrayInput
	AlertSettings             HeartbeatAlertSettingsPtrInput
	Heartbeat                 HeartbeatHeartbeatInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (HeartbeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatArgs)(nil)).Elem()
}

type HeartbeatInput interface {
	pulumi.Input

	ToHeartbeatOutput() HeartbeatOutput
	ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput
}

func (*Heartbeat) ElementType() reflect.Type {
	return reflect.TypeOf((**Heartbeat)(nil)).Elem()
}

func (i *Heartbeat) ToHeartbeatOutput() HeartbeatOutput {
	return i.ToHeartbeatOutputWithContext(context.Background())
}

func (i *Heartbeat) ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatOutput)
}

// HeartbeatArrayInput is an input type that accepts HeartbeatArray and HeartbeatArrayOutput values.
// You can construct a concrete instance of `HeartbeatArrayInput` via:
//
//	HeartbeatArray{ HeartbeatArgs{...} }
type HeartbeatArrayInput interface {
	pulumi.Input

	ToHeartbeatArrayOutput() HeartbeatArrayOutput
	ToHeartbeatArrayOutputWithContext(context.Context) HeartbeatArrayOutput
}

type HeartbeatArray []HeartbeatInput

func (HeartbeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Heartbeat)(nil)).Elem()
}

func (i HeartbeatArray) ToHeartbeatArrayOutput() HeartbeatArrayOutput {
	return i.ToHeartbeatArrayOutputWithContext(context.Background())
}

func (i HeartbeatArray) ToHeartbeatArrayOutputWithContext(ctx context.Context) HeartbeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatArrayOutput)
}

// HeartbeatMapInput is an input type that accepts HeartbeatMap and HeartbeatMapOutput values.
// You can construct a concrete instance of `HeartbeatMapInput` via:
//
//	HeartbeatMap{ "key": HeartbeatArgs{...} }
type HeartbeatMapInput interface {
	pulumi.Input

	ToHeartbeatMapOutput() HeartbeatMapOutput
	ToHeartbeatMapOutputWithContext(context.Context) HeartbeatMapOutput
}

type HeartbeatMap map[string]HeartbeatInput

func (HeartbeatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Heartbeat)(nil)).Elem()
}

func (i HeartbeatMap) ToHeartbeatMapOutput() HeartbeatMapOutput {
	return i.ToHeartbeatMapOutputWithContext(context.Background())
}

func (i HeartbeatMap) ToHeartbeatMapOutputWithContext(ctx context.Context) HeartbeatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMapOutput)
}

type HeartbeatOutput struct{ *pulumi.OutputState }

func (HeartbeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Heartbeat)(nil)).Elem()
}

func (o HeartbeatOutput) ToHeartbeatOutput() HeartbeatOutput {
	return o
}

func (o HeartbeatOutput) ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput {
	return o
}

// Determines if the check is running or not. Possible values `true`, and `false`.
func (o HeartbeatOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.BoolOutput { return v.Activated }).(pulumi.BoolOutput)
}

func (o HeartbeatOutput) AlertChannelSubscriptions() HeartbeatAlertChannelSubscriptionArrayOutput {
	return o.ApplyT(func(v *Heartbeat) HeartbeatAlertChannelSubscriptionArrayOutput { return v.AlertChannelSubscriptions }).(HeartbeatAlertChannelSubscriptionArrayOutput)
}

func (o HeartbeatOutput) AlertSettings() HeartbeatAlertSettingsOutput {
	return o.ApplyT(func(v *Heartbeat) HeartbeatAlertSettingsOutput { return v.AlertSettings }).(HeartbeatAlertSettingsOutput)
}

func (o HeartbeatOutput) Heartbeat() HeartbeatHeartbeatOutput {
	return o.ApplyT(func(v *Heartbeat) HeartbeatHeartbeatOutput { return v.Heartbeat }).(HeartbeatHeartbeatOutput)
}

// Determines if any notifications will be sent out when a check fails/degrades/recovers.
func (o HeartbeatOutput) Muted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.BoolPtrOutput { return v.Muted }).(pulumi.BoolPtrOutput)
}

// The name of the check.
func (o HeartbeatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of tags for organizing and filtering checks.
func (o HeartbeatOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// When true, the account level alert settings will be used, not the alert setting defined on this check.
func (o HeartbeatOutput) UseGlobalAlertSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.BoolPtrOutput { return v.UseGlobalAlertSettings }).(pulumi.BoolPtrOutput)
}

type HeartbeatArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Heartbeat)(nil)).Elem()
}

func (o HeartbeatArrayOutput) ToHeartbeatArrayOutput() HeartbeatArrayOutput {
	return o
}

func (o HeartbeatArrayOutput) ToHeartbeatArrayOutputWithContext(ctx context.Context) HeartbeatArrayOutput {
	return o
}

func (o HeartbeatArrayOutput) Index(i pulumi.IntInput) HeartbeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Heartbeat {
		return vs[0].([]*Heartbeat)[vs[1].(int)]
	}).(HeartbeatOutput)
}

type HeartbeatMapOutput struct{ *pulumi.OutputState }

func (HeartbeatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Heartbeat)(nil)).Elem()
}

func (o HeartbeatMapOutput) ToHeartbeatMapOutput() HeartbeatMapOutput {
	return o
}

func (o HeartbeatMapOutput) ToHeartbeatMapOutputWithContext(ctx context.Context) HeartbeatMapOutput {
	return o
}

func (o HeartbeatMapOutput) MapIndex(k pulumi.StringInput) HeartbeatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Heartbeat {
		return vs[0].(map[string]*Heartbeat)[vs[1].(string)]
	}).(HeartbeatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatInput)(nil)).Elem(), &Heartbeat{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatArrayInput)(nil)).Elem(), HeartbeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMapInput)(nil)).Elem(), HeartbeatMap{})
	pulumi.RegisterOutputType(HeartbeatOutput{})
	pulumi.RegisterOutputType(HeartbeatArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMapOutput{})
}
