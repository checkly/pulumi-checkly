// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # NaintenanceWindows
//
// `NaintenanceWindows` allows users to manage Checkly maintenance windows. Add a `NaintenanceWindows` resource to your resource file.
//
// ## Example Usage
//
// Minimal maintenance windows example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-checkly/sdk/go/checkly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := checkly.NewNaintenanceWindows(ctx, "maintenance-1", &checkly.NaintenanceWindowsArgs{
// 			EndsAt:     pulumi.String("2014-08-25T00:00:00.000Z"),
// 			RepeatUnit: pulumi.String("MONTH"),
// 			StartsAt:   pulumi.String("2014-08-24T00:00:00.000Z"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("auto"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Full maintenance windows example (includes optional fields)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-checkly/sdk/go/checkly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := checkly.NewNaintenanceWindows(ctx, "maintenance-1", &checkly.NaintenanceWindowsArgs{
// 			EndsAt:         pulumi.String("2014-08-25T00:00:00.000Z"),
// 			RepeatEndsAt:   pulumi.String("2014-08-24T00:00:00.000Z"),
// 			RepeatInterval: pulumi.Int(1),
// 			RepeatUnit:     pulumi.String("MONTH"),
// 			StartsAt:       pulumi.String("2014-08-24T00:00:00.000Z"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("auto"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type NaintenanceWindows struct {
	pulumi.CustomResourceState

	// The end date of the maintenance window.
	EndsAt pulumi.StringOutput `pulumi:"endsAt"`
	// The maintenance window name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The end date where the maintenance window should stop repeating.
	RepeatEndsAt pulumi.StringOutput `pulumi:"repeatEndsAt"`
	// The repeat interval of the maintenance window from the first occurance.
	RepeatInterval pulumi.IntOutput `pulumi:"repeatInterval"`
	// The repeat strategy for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.
	RepeatUnit pulumi.StringOutput `pulumi:"repeatUnit"`
	// The start date of the maintenance window.
	StartsAt pulumi.StringOutput `pulumi:"startsAt"`
	// The names of the checks and groups maintenance window should apply to.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewNaintenanceWindows registers a new resource with the given unique name, arguments, and options.
func NewNaintenanceWindows(ctx *pulumi.Context,
	name string, args *NaintenanceWindowsArgs, opts ...pulumi.ResourceOption) (*NaintenanceWindows, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndsAt == nil {
		return nil, errors.New("invalid value for required argument 'EndsAt'")
	}
	if args.RepeatEndsAt == nil {
		return nil, errors.New("invalid value for required argument 'RepeatEndsAt'")
	}
	if args.RepeatInterval == nil {
		return nil, errors.New("invalid value for required argument 'RepeatInterval'")
	}
	if args.RepeatUnit == nil {
		return nil, errors.New("invalid value for required argument 'RepeatUnit'")
	}
	if args.StartsAt == nil {
		return nil, errors.New("invalid value for required argument 'StartsAt'")
	}
	var resource NaintenanceWindows
	err := ctx.RegisterResource("checkly:index/naintenanceWindows:NaintenanceWindows", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNaintenanceWindows gets an existing NaintenanceWindows resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNaintenanceWindows(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NaintenanceWindowsState, opts ...pulumi.ResourceOption) (*NaintenanceWindows, error) {
	var resource NaintenanceWindows
	err := ctx.ReadResource("checkly:index/naintenanceWindows:NaintenanceWindows", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NaintenanceWindows resources.
type naintenanceWindowsState struct {
	// The end date of the maintenance window.
	EndsAt *string `pulumi:"endsAt"`
	// The maintenance window name.
	Name *string `pulumi:"name"`
	// The end date where the maintenance window should stop repeating.
	RepeatEndsAt *string `pulumi:"repeatEndsAt"`
	// The repeat interval of the maintenance window from the first occurance.
	RepeatInterval *int `pulumi:"repeatInterval"`
	// The repeat strategy for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.
	RepeatUnit *string `pulumi:"repeatUnit"`
	// The start date of the maintenance window.
	StartsAt *string `pulumi:"startsAt"`
	// The names of the checks and groups maintenance window should apply to.
	Tags []string `pulumi:"tags"`
}

type NaintenanceWindowsState struct {
	// The end date of the maintenance window.
	EndsAt pulumi.StringPtrInput
	// The maintenance window name.
	Name pulumi.StringPtrInput
	// The end date where the maintenance window should stop repeating.
	RepeatEndsAt pulumi.StringPtrInput
	// The repeat interval of the maintenance window from the first occurance.
	RepeatInterval pulumi.IntPtrInput
	// The repeat strategy for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.
	RepeatUnit pulumi.StringPtrInput
	// The start date of the maintenance window.
	StartsAt pulumi.StringPtrInput
	// The names of the checks and groups maintenance window should apply to.
	Tags pulumi.StringArrayInput
}

func (NaintenanceWindowsState) ElementType() reflect.Type {
	return reflect.TypeOf((*naintenanceWindowsState)(nil)).Elem()
}

type naintenanceWindowsArgs struct {
	// The end date of the maintenance window.
	EndsAt string `pulumi:"endsAt"`
	// The maintenance window name.
	Name *string `pulumi:"name"`
	// The end date where the maintenance window should stop repeating.
	RepeatEndsAt string `pulumi:"repeatEndsAt"`
	// The repeat interval of the maintenance window from the first occurance.
	RepeatInterval int `pulumi:"repeatInterval"`
	// The repeat strategy for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.
	RepeatUnit string `pulumi:"repeatUnit"`
	// The start date of the maintenance window.
	StartsAt string `pulumi:"startsAt"`
	// The names of the checks and groups maintenance window should apply to.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a NaintenanceWindows resource.
type NaintenanceWindowsArgs struct {
	// The end date of the maintenance window.
	EndsAt pulumi.StringInput
	// The maintenance window name.
	Name pulumi.StringPtrInput
	// The end date where the maintenance window should stop repeating.
	RepeatEndsAt pulumi.StringInput
	// The repeat interval of the maintenance window from the first occurance.
	RepeatInterval pulumi.IntInput
	// The repeat strategy for the maintenance window. Possible values `DAY`, `WEEK` and `MONTH`.
	RepeatUnit pulumi.StringInput
	// The start date of the maintenance window.
	StartsAt pulumi.StringInput
	// The names of the checks and groups maintenance window should apply to.
	Tags pulumi.StringArrayInput
}

func (NaintenanceWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*naintenanceWindowsArgs)(nil)).Elem()
}

type NaintenanceWindowsInput interface {
	pulumi.Input

	ToNaintenanceWindowsOutput() NaintenanceWindowsOutput
	ToNaintenanceWindowsOutputWithContext(ctx context.Context) NaintenanceWindowsOutput
}

func (*NaintenanceWindows) ElementType() reflect.Type {
	return reflect.TypeOf((**NaintenanceWindows)(nil)).Elem()
}

func (i *NaintenanceWindows) ToNaintenanceWindowsOutput() NaintenanceWindowsOutput {
	return i.ToNaintenanceWindowsOutputWithContext(context.Background())
}

func (i *NaintenanceWindows) ToNaintenanceWindowsOutputWithContext(ctx context.Context) NaintenanceWindowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NaintenanceWindowsOutput)
}

// NaintenanceWindowsArrayInput is an input type that accepts NaintenanceWindowsArray and NaintenanceWindowsArrayOutput values.
// You can construct a concrete instance of `NaintenanceWindowsArrayInput` via:
//
//          NaintenanceWindowsArray{ NaintenanceWindowsArgs{...} }
type NaintenanceWindowsArrayInput interface {
	pulumi.Input

	ToNaintenanceWindowsArrayOutput() NaintenanceWindowsArrayOutput
	ToNaintenanceWindowsArrayOutputWithContext(context.Context) NaintenanceWindowsArrayOutput
}

type NaintenanceWindowsArray []NaintenanceWindowsInput

func (NaintenanceWindowsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NaintenanceWindows)(nil)).Elem()
}

func (i NaintenanceWindowsArray) ToNaintenanceWindowsArrayOutput() NaintenanceWindowsArrayOutput {
	return i.ToNaintenanceWindowsArrayOutputWithContext(context.Background())
}

func (i NaintenanceWindowsArray) ToNaintenanceWindowsArrayOutputWithContext(ctx context.Context) NaintenanceWindowsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NaintenanceWindowsArrayOutput)
}

// NaintenanceWindowsMapInput is an input type that accepts NaintenanceWindowsMap and NaintenanceWindowsMapOutput values.
// You can construct a concrete instance of `NaintenanceWindowsMapInput` via:
//
//          NaintenanceWindowsMap{ "key": NaintenanceWindowsArgs{...} }
type NaintenanceWindowsMapInput interface {
	pulumi.Input

	ToNaintenanceWindowsMapOutput() NaintenanceWindowsMapOutput
	ToNaintenanceWindowsMapOutputWithContext(context.Context) NaintenanceWindowsMapOutput
}

type NaintenanceWindowsMap map[string]NaintenanceWindowsInput

func (NaintenanceWindowsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NaintenanceWindows)(nil)).Elem()
}

func (i NaintenanceWindowsMap) ToNaintenanceWindowsMapOutput() NaintenanceWindowsMapOutput {
	return i.ToNaintenanceWindowsMapOutputWithContext(context.Background())
}

func (i NaintenanceWindowsMap) ToNaintenanceWindowsMapOutputWithContext(ctx context.Context) NaintenanceWindowsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NaintenanceWindowsMapOutput)
}

type NaintenanceWindowsOutput struct{ *pulumi.OutputState }

func (NaintenanceWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NaintenanceWindows)(nil)).Elem()
}

func (o NaintenanceWindowsOutput) ToNaintenanceWindowsOutput() NaintenanceWindowsOutput {
	return o
}

func (o NaintenanceWindowsOutput) ToNaintenanceWindowsOutputWithContext(ctx context.Context) NaintenanceWindowsOutput {
	return o
}

type NaintenanceWindowsArrayOutput struct{ *pulumi.OutputState }

func (NaintenanceWindowsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NaintenanceWindows)(nil)).Elem()
}

func (o NaintenanceWindowsArrayOutput) ToNaintenanceWindowsArrayOutput() NaintenanceWindowsArrayOutput {
	return o
}

func (o NaintenanceWindowsArrayOutput) ToNaintenanceWindowsArrayOutputWithContext(ctx context.Context) NaintenanceWindowsArrayOutput {
	return o
}

func (o NaintenanceWindowsArrayOutput) Index(i pulumi.IntInput) NaintenanceWindowsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NaintenanceWindows {
		return vs[0].([]*NaintenanceWindows)[vs[1].(int)]
	}).(NaintenanceWindowsOutput)
}

type NaintenanceWindowsMapOutput struct{ *pulumi.OutputState }

func (NaintenanceWindowsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NaintenanceWindows)(nil)).Elem()
}

func (o NaintenanceWindowsMapOutput) ToNaintenanceWindowsMapOutput() NaintenanceWindowsMapOutput {
	return o
}

func (o NaintenanceWindowsMapOutput) ToNaintenanceWindowsMapOutputWithContext(ctx context.Context) NaintenanceWindowsMapOutput {
	return o
}

func (o NaintenanceWindowsMapOutput) MapIndex(k pulumi.StringInput) NaintenanceWindowsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NaintenanceWindows {
		return vs[0].(map[string]*NaintenanceWindows)[vs[1].(string)]
	}).(NaintenanceWindowsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NaintenanceWindowsInput)(nil)).Elem(), &NaintenanceWindows{})
	pulumi.RegisterInputType(reflect.TypeOf((*NaintenanceWindowsArrayInput)(nil)).Elem(), NaintenanceWindowsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NaintenanceWindowsMapInput)(nil)).Elem(), NaintenanceWindowsMap{})
	pulumi.RegisterOutputType(NaintenanceWindowsOutput{})
	pulumi.RegisterOutputType(NaintenanceWindowsArrayOutput{})
	pulumi.RegisterOutputType(NaintenanceWindowsMapOutput{})
}
