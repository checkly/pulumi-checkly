// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Heartbeats allows you to monitor your cron jobs and set up alerting, so you get a notification when things break or slow down.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := checkly.NewHeartbeatCheck(ctx, "example-heartbeat", &checkly.HeartbeatCheckArgs{
//				Name:      pulumi.String("Example heartbeat"),
//				Activated: pulumi.Bool(true),
//				Heartbeat: &checkly.HeartbeatCheckHeartbeatArgs{
//					Period:     pulumi.Int(7),
//					PeriodUnit: pulumi.String("days"),
//					Grace:      pulumi.Int(1),
//					GraceUnit:  pulumi.String("days"),
//				},
//				UseGlobalAlertSettings: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type HeartbeatCheck struct {
	pulumi.CustomResourceState

	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolOutput                                 `pulumi:"activated"`
	AlertChannelSubscriptions HeartbeatCheckAlertChannelSubscriptionArrayOutput `pulumi:"alertChannelSubscriptions"`
	AlertSettings             HeartbeatCheckAlertSettingsOutput                 `pulumi:"alertSettings"`
	Heartbeat                 HeartbeatCheckHeartbeatOutput                     `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrOutput `pulumi:"muted"`
	// The name of the check.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrOutput `pulumi:"useGlobalAlertSettings"`
}

// NewHeartbeatCheck registers a new resource with the given unique name, arguments, and options.
func NewHeartbeatCheck(ctx *pulumi.Context,
	name string, args *HeartbeatCheckArgs, opts ...pulumi.ResourceOption) (*HeartbeatCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Activated == nil {
		return nil, errors.New("invalid value for required argument 'Activated'")
	}
	if args.Heartbeat == nil {
		return nil, errors.New("invalid value for required argument 'Heartbeat'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HeartbeatCheck
	err := ctx.RegisterResource("checkly:index/heartbeatCheck:HeartbeatCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHeartbeatCheck gets an existing HeartbeatCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeartbeatCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HeartbeatCheckState, opts ...pulumi.ResourceOption) (*HeartbeatCheck, error) {
	var resource HeartbeatCheck
	err := ctx.ReadResource("checkly:index/heartbeatCheck:HeartbeatCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HeartbeatCheck resources.
type heartbeatCheckState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 *bool                                    `pulumi:"activated"`
	AlertChannelSubscriptions []HeartbeatCheckAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *HeartbeatCheckAlertSettings             `pulumi:"alertSettings"`
	Heartbeat                 *HeartbeatCheckHeartbeat                 `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

type HeartbeatCheckState struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolPtrInput
	AlertChannelSubscriptions HeartbeatCheckAlertChannelSubscriptionArrayInput
	AlertSettings             HeartbeatCheckAlertSettingsPtrInput
	Heartbeat                 HeartbeatCheckHeartbeatPtrInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (HeartbeatCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatCheckState)(nil)).Elem()
}

type heartbeatCheckArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 bool                                     `pulumi:"activated"`
	AlertChannelSubscriptions []HeartbeatCheckAlertChannelSubscription `pulumi:"alertChannelSubscriptions"`
	AlertSettings             *HeartbeatCheckAlertSettings             `pulumi:"alertSettings"`
	Heartbeat                 HeartbeatCheckHeartbeat                  `pulumi:"heartbeat"`
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted *bool `pulumi:"muted"`
	// The name of the check.
	Name *string `pulumi:"name"`
	// A list of tags for organizing and filtering checks.
	Tags []string `pulumi:"tags"`
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings *bool `pulumi:"useGlobalAlertSettings"`
}

// The set of arguments for constructing a HeartbeatCheck resource.
type HeartbeatCheckArgs struct {
	// Determines if the check is running or not. Possible values `true`, and `false`.
	Activated                 pulumi.BoolInput
	AlertChannelSubscriptions HeartbeatCheckAlertChannelSubscriptionArrayInput
	AlertSettings             HeartbeatCheckAlertSettingsPtrInput
	Heartbeat                 HeartbeatCheckHeartbeatInput
	// Determines if any notifications will be sent out when a check fails/degrades/recovers.
	Muted pulumi.BoolPtrInput
	// The name of the check.
	Name pulumi.StringPtrInput
	// A list of tags for organizing and filtering checks.
	Tags pulumi.StringArrayInput
	// When true, the account level alert settings will be used, not the alert setting defined on this check.
	UseGlobalAlertSettings pulumi.BoolPtrInput
}

func (HeartbeatCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatCheckArgs)(nil)).Elem()
}

type HeartbeatCheckInput interface {
	pulumi.Input

	ToHeartbeatCheckOutput() HeartbeatCheckOutput
	ToHeartbeatCheckOutputWithContext(ctx context.Context) HeartbeatCheckOutput
}

func (*HeartbeatCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatCheck)(nil)).Elem()
}

func (i *HeartbeatCheck) ToHeartbeatCheckOutput() HeartbeatCheckOutput {
	return i.ToHeartbeatCheckOutputWithContext(context.Background())
}

func (i *HeartbeatCheck) ToHeartbeatCheckOutputWithContext(ctx context.Context) HeartbeatCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckOutput)
}

// HeartbeatCheckArrayInput is an input type that accepts HeartbeatCheckArray and HeartbeatCheckArrayOutput values.
// You can construct a concrete instance of `HeartbeatCheckArrayInput` via:
//
//	HeartbeatCheckArray{ HeartbeatCheckArgs{...} }
type HeartbeatCheckArrayInput interface {
	pulumi.Input

	ToHeartbeatCheckArrayOutput() HeartbeatCheckArrayOutput
	ToHeartbeatCheckArrayOutputWithContext(context.Context) HeartbeatCheckArrayOutput
}

type HeartbeatCheckArray []HeartbeatCheckInput

func (HeartbeatCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HeartbeatCheck)(nil)).Elem()
}

func (i HeartbeatCheckArray) ToHeartbeatCheckArrayOutput() HeartbeatCheckArrayOutput {
	return i.ToHeartbeatCheckArrayOutputWithContext(context.Background())
}

func (i HeartbeatCheckArray) ToHeartbeatCheckArrayOutputWithContext(ctx context.Context) HeartbeatCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckArrayOutput)
}

// HeartbeatCheckMapInput is an input type that accepts HeartbeatCheckMap and HeartbeatCheckMapOutput values.
// You can construct a concrete instance of `HeartbeatCheckMapInput` via:
//
//	HeartbeatCheckMap{ "key": HeartbeatCheckArgs{...} }
type HeartbeatCheckMapInput interface {
	pulumi.Input

	ToHeartbeatCheckMapOutput() HeartbeatCheckMapOutput
	ToHeartbeatCheckMapOutputWithContext(context.Context) HeartbeatCheckMapOutput
}

type HeartbeatCheckMap map[string]HeartbeatCheckInput

func (HeartbeatCheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HeartbeatCheck)(nil)).Elem()
}

func (i HeartbeatCheckMap) ToHeartbeatCheckMapOutput() HeartbeatCheckMapOutput {
	return i.ToHeartbeatCheckMapOutputWithContext(context.Background())
}

func (i HeartbeatCheckMap) ToHeartbeatCheckMapOutputWithContext(ctx context.Context) HeartbeatCheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatCheckMapOutput)
}

type HeartbeatCheckOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeartbeatCheck)(nil)).Elem()
}

func (o HeartbeatCheckOutput) ToHeartbeatCheckOutput() HeartbeatCheckOutput {
	return o
}

func (o HeartbeatCheckOutput) ToHeartbeatCheckOutputWithContext(ctx context.Context) HeartbeatCheckOutput {
	return o
}

// Determines if the check is running or not. Possible values `true`, and `false`.
func (o HeartbeatCheckOutput) Activated() pulumi.BoolOutput {
	return o.ApplyT(func(v *HeartbeatCheck) pulumi.BoolOutput { return v.Activated }).(pulumi.BoolOutput)
}

func (o HeartbeatCheckOutput) AlertChannelSubscriptions() HeartbeatCheckAlertChannelSubscriptionArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheck) HeartbeatCheckAlertChannelSubscriptionArrayOutput {
		return v.AlertChannelSubscriptions
	}).(HeartbeatCheckAlertChannelSubscriptionArrayOutput)
}

func (o HeartbeatCheckOutput) AlertSettings() HeartbeatCheckAlertSettingsOutput {
	return o.ApplyT(func(v *HeartbeatCheck) HeartbeatCheckAlertSettingsOutput { return v.AlertSettings }).(HeartbeatCheckAlertSettingsOutput)
}

func (o HeartbeatCheckOutput) Heartbeat() HeartbeatCheckHeartbeatOutput {
	return o.ApplyT(func(v *HeartbeatCheck) HeartbeatCheckHeartbeatOutput { return v.Heartbeat }).(HeartbeatCheckHeartbeatOutput)
}

// Determines if any notifications will be sent out when a check fails/degrades/recovers.
func (o HeartbeatCheckOutput) Muted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheck) pulumi.BoolPtrOutput { return v.Muted }).(pulumi.BoolPtrOutput)
}

// The name of the check.
func (o HeartbeatCheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HeartbeatCheck) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of tags for organizing and filtering checks.
func (o HeartbeatCheckOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HeartbeatCheck) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// When true, the account level alert settings will be used, not the alert setting defined on this check.
func (o HeartbeatCheckOutput) UseGlobalAlertSettings() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HeartbeatCheck) pulumi.BoolPtrOutput { return v.UseGlobalAlertSettings }).(pulumi.BoolPtrOutput)
}

type HeartbeatCheckArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HeartbeatCheck)(nil)).Elem()
}

func (o HeartbeatCheckArrayOutput) ToHeartbeatCheckArrayOutput() HeartbeatCheckArrayOutput {
	return o
}

func (o HeartbeatCheckArrayOutput) ToHeartbeatCheckArrayOutputWithContext(ctx context.Context) HeartbeatCheckArrayOutput {
	return o
}

func (o HeartbeatCheckArrayOutput) Index(i pulumi.IntInput) HeartbeatCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HeartbeatCheck {
		return vs[0].([]*HeartbeatCheck)[vs[1].(int)]
	}).(HeartbeatCheckOutput)
}

type HeartbeatCheckMapOutput struct{ *pulumi.OutputState }

func (HeartbeatCheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HeartbeatCheck)(nil)).Elem()
}

func (o HeartbeatCheckMapOutput) ToHeartbeatCheckMapOutput() HeartbeatCheckMapOutput {
	return o
}

func (o HeartbeatCheckMapOutput) ToHeartbeatCheckMapOutputWithContext(ctx context.Context) HeartbeatCheckMapOutput {
	return o
}

func (o HeartbeatCheckMapOutput) MapIndex(k pulumi.StringInput) HeartbeatCheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HeartbeatCheck {
		return vs[0].(map[string]*HeartbeatCheck)[vs[1].(string)]
	}).(HeartbeatCheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckInput)(nil)).Elem(), &HeartbeatCheck{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckArrayInput)(nil)).Elem(), HeartbeatCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatCheckMapInput)(nil)).Elem(), HeartbeatCheckMap{})
	pulumi.RegisterOutputType(HeartbeatCheckOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatCheckMapOutput{})
}
