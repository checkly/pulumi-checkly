// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package checkly

import (
	"context"
	"reflect"

	"errors"
	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/checkly/pulumi-checkly/sdk/v2/go/checkly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testTriggerGroup, err := checkly.NewTriggerCheckGroup(ctx, "test_trigger_group", &checkly.TriggerCheckGroupArgs{
//				GroupId: pulumi.Int(215),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("testTriggerGroupUrl", testTriggerGroup.Url)
//			return nil
//		})
//	}
//
// ```
type TriggerCheckGroup struct {
	pulumi.CustomResourceState

	// The id of the group that you want to attach the trigger to.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
	// The token value created to trigger the group
	Token pulumi.StringOutput `pulumi:"token"`
	// The request URL to trigger the group run.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewTriggerCheckGroup registers a new resource with the given unique name, arguments, and options.
func NewTriggerCheckGroup(ctx *pulumi.Context,
	name string, args *TriggerCheckGroupArgs, opts ...pulumi.ResourceOption) (*TriggerCheckGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TriggerCheckGroup
	err := ctx.RegisterResource("checkly:index/triggerCheckGroup:TriggerCheckGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTriggerCheckGroup gets an existing TriggerCheckGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTriggerCheckGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerCheckGroupState, opts ...pulumi.ResourceOption) (*TriggerCheckGroup, error) {
	var resource TriggerCheckGroup
	err := ctx.ReadResource("checkly:index/triggerCheckGroup:TriggerCheckGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TriggerCheckGroup resources.
type triggerCheckGroupState struct {
	// The id of the group that you want to attach the trigger to.
	GroupId *int `pulumi:"groupId"`
	// The token value created to trigger the group
	Token *string `pulumi:"token"`
	// The request URL to trigger the group run.
	Url *string `pulumi:"url"`
}

type TriggerCheckGroupState struct {
	// The id of the group that you want to attach the trigger to.
	GroupId pulumi.IntPtrInput
	// The token value created to trigger the group
	Token pulumi.StringPtrInput
	// The request URL to trigger the group run.
	Url pulumi.StringPtrInput
}

func (TriggerCheckGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerCheckGroupState)(nil)).Elem()
}

type triggerCheckGroupArgs struct {
	// The id of the group that you want to attach the trigger to.
	GroupId int `pulumi:"groupId"`
	// The token value created to trigger the group
	Token *string `pulumi:"token"`
	// The request URL to trigger the group run.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a TriggerCheckGroup resource.
type TriggerCheckGroupArgs struct {
	// The id of the group that you want to attach the trigger to.
	GroupId pulumi.IntInput
	// The token value created to trigger the group
	Token pulumi.StringPtrInput
	// The request URL to trigger the group run.
	Url pulumi.StringPtrInput
}

func (TriggerCheckGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerCheckGroupArgs)(nil)).Elem()
}

type TriggerCheckGroupInput interface {
	pulumi.Input

	ToTriggerCheckGroupOutput() TriggerCheckGroupOutput
	ToTriggerCheckGroupOutputWithContext(ctx context.Context) TriggerCheckGroupOutput
}

func (*TriggerCheckGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerCheckGroup)(nil)).Elem()
}

func (i *TriggerCheckGroup) ToTriggerCheckGroupOutput() TriggerCheckGroupOutput {
	return i.ToTriggerCheckGroupOutputWithContext(context.Background())
}

func (i *TriggerCheckGroup) ToTriggerCheckGroupOutputWithContext(ctx context.Context) TriggerCheckGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerCheckGroupOutput)
}

// TriggerCheckGroupArrayInput is an input type that accepts TriggerCheckGroupArray and TriggerCheckGroupArrayOutput values.
// You can construct a concrete instance of `TriggerCheckGroupArrayInput` via:
//
//	TriggerCheckGroupArray{ TriggerCheckGroupArgs{...} }
type TriggerCheckGroupArrayInput interface {
	pulumi.Input

	ToTriggerCheckGroupArrayOutput() TriggerCheckGroupArrayOutput
	ToTriggerCheckGroupArrayOutputWithContext(context.Context) TriggerCheckGroupArrayOutput
}

type TriggerCheckGroupArray []TriggerCheckGroupInput

func (TriggerCheckGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerCheckGroup)(nil)).Elem()
}

func (i TriggerCheckGroupArray) ToTriggerCheckGroupArrayOutput() TriggerCheckGroupArrayOutput {
	return i.ToTriggerCheckGroupArrayOutputWithContext(context.Background())
}

func (i TriggerCheckGroupArray) ToTriggerCheckGroupArrayOutputWithContext(ctx context.Context) TriggerCheckGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerCheckGroupArrayOutput)
}

// TriggerCheckGroupMapInput is an input type that accepts TriggerCheckGroupMap and TriggerCheckGroupMapOutput values.
// You can construct a concrete instance of `TriggerCheckGroupMapInput` via:
//
//	TriggerCheckGroupMap{ "key": TriggerCheckGroupArgs{...} }
type TriggerCheckGroupMapInput interface {
	pulumi.Input

	ToTriggerCheckGroupMapOutput() TriggerCheckGroupMapOutput
	ToTriggerCheckGroupMapOutputWithContext(context.Context) TriggerCheckGroupMapOutput
}

type TriggerCheckGroupMap map[string]TriggerCheckGroupInput

func (TriggerCheckGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerCheckGroup)(nil)).Elem()
}

func (i TriggerCheckGroupMap) ToTriggerCheckGroupMapOutput() TriggerCheckGroupMapOutput {
	return i.ToTriggerCheckGroupMapOutputWithContext(context.Background())
}

func (i TriggerCheckGroupMap) ToTriggerCheckGroupMapOutputWithContext(ctx context.Context) TriggerCheckGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerCheckGroupMapOutput)
}

type TriggerCheckGroupOutput struct{ *pulumi.OutputState }

func (TriggerCheckGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerCheckGroup)(nil)).Elem()
}

func (o TriggerCheckGroupOutput) ToTriggerCheckGroupOutput() TriggerCheckGroupOutput {
	return o
}

func (o TriggerCheckGroupOutput) ToTriggerCheckGroupOutputWithContext(ctx context.Context) TriggerCheckGroupOutput {
	return o
}

// The id of the group that you want to attach the trigger to.
func (o TriggerCheckGroupOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *TriggerCheckGroup) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

// The token value created to trigger the group
func (o TriggerCheckGroupOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerCheckGroup) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The request URL to trigger the group run.
func (o TriggerCheckGroupOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *TriggerCheckGroup) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type TriggerCheckGroupArrayOutput struct{ *pulumi.OutputState }

func (TriggerCheckGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TriggerCheckGroup)(nil)).Elem()
}

func (o TriggerCheckGroupArrayOutput) ToTriggerCheckGroupArrayOutput() TriggerCheckGroupArrayOutput {
	return o
}

func (o TriggerCheckGroupArrayOutput) ToTriggerCheckGroupArrayOutputWithContext(ctx context.Context) TriggerCheckGroupArrayOutput {
	return o
}

func (o TriggerCheckGroupArrayOutput) Index(i pulumi.IntInput) TriggerCheckGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TriggerCheckGroup {
		return vs[0].([]*TriggerCheckGroup)[vs[1].(int)]
	}).(TriggerCheckGroupOutput)
}

type TriggerCheckGroupMapOutput struct{ *pulumi.OutputState }

func (TriggerCheckGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TriggerCheckGroup)(nil)).Elem()
}

func (o TriggerCheckGroupMapOutput) ToTriggerCheckGroupMapOutput() TriggerCheckGroupMapOutput {
	return o
}

func (o TriggerCheckGroupMapOutput) ToTriggerCheckGroupMapOutputWithContext(ctx context.Context) TriggerCheckGroupMapOutput {
	return o
}

func (o TriggerCheckGroupMapOutput) MapIndex(k pulumi.StringInput) TriggerCheckGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TriggerCheckGroup {
		return vs[0].(map[string]*TriggerCheckGroup)[vs[1].(string)]
	}).(TriggerCheckGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerCheckGroupInput)(nil)).Elem(), &TriggerCheckGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerCheckGroupArrayInput)(nil)).Elem(), TriggerCheckGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerCheckGroupMapInput)(nil)).Elem(), TriggerCheckGroupMap{})
	pulumi.RegisterOutputType(TriggerCheckGroupOutput{})
	pulumi.RegisterOutputType(TriggerCheckGroupArrayOutput{})
	pulumi.RegisterOutputType(TriggerCheckGroupMapOutput{})
}
