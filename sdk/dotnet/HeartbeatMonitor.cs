// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly
{
    /// <summary>
    /// Heartbeats allows you to monitor your cron jobs and set up alerting, so you get a notification when things break or slow down.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Checkly = Pulumi.Checkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example_heartbeat_monitor = new Checkly.HeartbeatMonitor("example-heartbeat-monitor", new()
    ///     {
    ///         Name = "Example heartbeat monitor",
    ///         Activated = true,
    ///         Heartbeat = new Checkly.Inputs.HeartbeatMonitorHeartbeatArgs
    ///         {
    ///             Period = 7,
    ///             PeriodUnit = "days",
    ///             Grace = 1,
    ///             GraceUnit = "days",
    ///         },
    ///         UseGlobalAlertSettings = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ChecklyResourceType("checkly:index/heartbeatMonitor:HeartbeatMonitor")]
    public partial class HeartbeatMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines if the check is running or not. Possible values `true`, and `false`.
        /// </summary>
        [Output("activated")]
        public Output<bool> Activated { get; private set; } = null!;

        [Output("alertChannelSubscriptions")]
        public Output<ImmutableArray<Outputs.HeartbeatMonitorAlertChannelSubscription>> AlertChannelSubscriptions { get; private set; } = null!;

        [Output("alertSettings")]
        public Output<Outputs.HeartbeatMonitorAlertSettings> AlertSettings { get; private set; } = null!;

        [Output("heartbeat")]
        public Output<Outputs.HeartbeatMonitorHeartbeat> Heartbeat { get; private set; } = null!;

        /// <summary>
        /// Determines if any notifications will be sent out when a check fails/degrades/recovers.
        /// </summary>
        [Output("muted")]
        public Output<bool?> Muted { get; private set; } = null!;

        /// <summary>
        /// The name of the check.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of tags for organizing and filtering checks.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Create and resolve an incident based on the alert configuration. Useful for status page automation.
        /// </summary>
        [Output("triggerIncident")]
        public Output<Outputs.HeartbeatMonitorTriggerIncident?> TriggerIncident { get; private set; } = null!;

        /// <summary>
        /// When true, the account level alert settings will be used, not the alert setting defined on this check.
        /// </summary>
        [Output("useGlobalAlertSettings")]
        public Output<bool?> UseGlobalAlertSettings { get; private set; } = null!;


        /// <summary>
        /// Create a HeartbeatMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HeartbeatMonitor(string name, HeartbeatMonitorArgs args, CustomResourceOptions? options = null)
            : base("checkly:index/heartbeatMonitor:HeartbeatMonitor", name, args ?? new HeartbeatMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HeartbeatMonitor(string name, Input<string> id, HeartbeatMonitorState? state = null, CustomResourceOptions? options = null)
            : base("checkly:index/heartbeatMonitor:HeartbeatMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/checkly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HeartbeatMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HeartbeatMonitor Get(string name, Input<string> id, HeartbeatMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new HeartbeatMonitor(name, id, state, options);
        }
    }

    public sealed class HeartbeatMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if the check is running or not. Possible values `true`, and `false`.
        /// </summary>
        [Input("activated", required: true)]
        public Input<bool> Activated { get; set; } = null!;

        [Input("alertChannelSubscriptions")]
        private InputList<Inputs.HeartbeatMonitorAlertChannelSubscriptionArgs>? _alertChannelSubscriptions;
        public InputList<Inputs.HeartbeatMonitorAlertChannelSubscriptionArgs> AlertChannelSubscriptions
        {
            get => _alertChannelSubscriptions ?? (_alertChannelSubscriptions = new InputList<Inputs.HeartbeatMonitorAlertChannelSubscriptionArgs>());
            set => _alertChannelSubscriptions = value;
        }

        [Input("alertSettings")]
        public Input<Inputs.HeartbeatMonitorAlertSettingsArgs>? AlertSettings { get; set; }

        [Input("heartbeat", required: true)]
        public Input<Inputs.HeartbeatMonitorHeartbeatArgs> Heartbeat { get; set; } = null!;

        /// <summary>
        /// Determines if any notifications will be sent out when a check fails/degrades/recovers.
        /// </summary>
        [Input("muted")]
        public Input<bool>? Muted { get; set; }

        /// <summary>
        /// The name of the check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags for organizing and filtering checks.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Create and resolve an incident based on the alert configuration. Useful for status page automation.
        /// </summary>
        [Input("triggerIncident")]
        public Input<Inputs.HeartbeatMonitorTriggerIncidentArgs>? TriggerIncident { get; set; }

        /// <summary>
        /// When true, the account level alert settings will be used, not the alert setting defined on this check.
        /// </summary>
        [Input("useGlobalAlertSettings")]
        public Input<bool>? UseGlobalAlertSettings { get; set; }

        public HeartbeatMonitorArgs()
        {
        }
        public static new HeartbeatMonitorArgs Empty => new HeartbeatMonitorArgs();
    }

    public sealed class HeartbeatMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if the check is running or not. Possible values `true`, and `false`.
        /// </summary>
        [Input("activated")]
        public Input<bool>? Activated { get; set; }

        [Input("alertChannelSubscriptions")]
        private InputList<Inputs.HeartbeatMonitorAlertChannelSubscriptionGetArgs>? _alertChannelSubscriptions;
        public InputList<Inputs.HeartbeatMonitorAlertChannelSubscriptionGetArgs> AlertChannelSubscriptions
        {
            get => _alertChannelSubscriptions ?? (_alertChannelSubscriptions = new InputList<Inputs.HeartbeatMonitorAlertChannelSubscriptionGetArgs>());
            set => _alertChannelSubscriptions = value;
        }

        [Input("alertSettings")]
        public Input<Inputs.HeartbeatMonitorAlertSettingsGetArgs>? AlertSettings { get; set; }

        [Input("heartbeat")]
        public Input<Inputs.HeartbeatMonitorHeartbeatGetArgs>? Heartbeat { get; set; }

        /// <summary>
        /// Determines if any notifications will be sent out when a check fails/degrades/recovers.
        /// </summary>
        [Input("muted")]
        public Input<bool>? Muted { get; set; }

        /// <summary>
        /// The name of the check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags for organizing and filtering checks.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Create and resolve an incident based on the alert configuration. Useful for status page automation.
        /// </summary>
        [Input("triggerIncident")]
        public Input<Inputs.HeartbeatMonitorTriggerIncidentGetArgs>? TriggerIncident { get; set; }

        /// <summary>
        /// When true, the account level alert settings will be used, not the alert setting defined on this check.
        /// </summary>
        [Input("useGlobalAlertSettings")]
        public Input<bool>? UseGlobalAlertSettings { get; set; }

        public HeartbeatMonitorState()
        {
        }
        public static new HeartbeatMonitorState Empty => new HeartbeatMonitorState();
    }
}
