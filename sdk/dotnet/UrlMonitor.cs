// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly
{
    /// <summary>
    /// Creates a URL Monitor to check HTTP endpoint availability and response times.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Checkly = Pulumi.Checkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example_url_monitor = new Checkly.UrlMonitor("example-url-monitor", new()
    ///     {
    ///         Name = "Example URL monitor",
    ///         Activated = true,
    ///         Frequency = 2,
    ///         UseGlobalAlertSettings = true,
    ///         Locations = new[]
    ///         {
    ///             "eu-west-1",
    ///         },
    ///         Request = new Checkly.Inputs.UrlMonitorRequestArgs
    ///         {
    ///             Url = "https://welcome.checklyhq.com",
    ///             Assertions = new[]
    ///             {
    ///                 new Checkly.Inputs.UrlMonitorRequestAssertionArgs
    ///                 {
    ///                     Source = "STATUS_CODE",
    ///                     Comparison = "EQUALS",
    ///                     Target = "200",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ChecklyResourceType("checkly:index/urlMonitor:UrlMonitor")]
    public partial class UrlMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines whether the monitor will run periodically or not after being deployed.
        /// </summary>
        [Output("activated")]
        public Output<bool> Activated { get; private set; } = null!;

        /// <summary>
        /// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        /// </summary>
        [Output("alertChannelSubscriptions")]
        public Output<ImmutableArray<Outputs.UrlMonitorAlertChannelSubscription>> AlertChannelSubscriptions { get; private set; } = null!;

        /// <summary>
        /// Determines the alert escalation policy for the monitor.
        /// </summary>
        [Output("alertSettings")]
        public Output<Outputs.UrlMonitorAlertSettings> AlertSettings { get; private set; } = null!;

        /// <summary>
        /// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        /// </summary>
        [Output("degradedResponseTime")]
        public Output<int?> DegradedResponseTime { get; private set; } = null!;

        /// <summary>
        /// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        /// </summary>
        [Output("frequency")]
        public Output<int> Frequency { get; private set; } = null!;

        /// <summary>
        /// To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        /// </summary>
        [Output("frequencyOffset")]
        public Output<int?> FrequencyOffset { get; private set; } = null!;

        /// <summary>
        /// The ID of the check group that this monitor is part of.
        /// </summary>
        [Output("groupId")]
        public Output<int?> GroupId { get; private set; } = null!;

        /// <summary>
        /// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        /// </summary>
        [Output("groupOrder")]
        public Output<int?> GroupOrder { get; private set; } = null!;

        /// <summary>
        /// An array of one or more data center locations where to run the this monitor.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        /// </summary>
        [Output("maxResponseTime")]
        public Output<int?> MaxResponseTime { get; private set; } = null!;

        /// <summary>
        /// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        /// </summary>
        [Output("muted")]
        public Output<bool?> Muted { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of one or more private locations slugs.
        /// </summary>
        [Output("privateLocations")]
        public Output<ImmutableArray<string>> PrivateLocations { get; private set; } = null!;

        /// <summary>
        /// The parameters of the HTTP request.
        /// </summary>
        [Output("request")]
        public Output<Outputs.UrlMonitorRequest> Request { get; private set; } = null!;

        /// <summary>
        /// A strategy for retrying failed monitor runs.
        /// </summary>
        [Output("retryStrategy")]
        public Output<Outputs.UrlMonitorRetryStrategy> RetryStrategy { get; private set; } = null!;

        /// <summary>
        /// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        /// </summary>
        [Output("runParallel")]
        public Output<bool?> RunParallel { get; private set; } = null!;

        /// <summary>
        /// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        /// </summary>
        [Output("shouldFail")]
        public Output<bool?> ShouldFail { get; private set; } = null!;

        /// <summary>
        /// A list of tags for organizing and filtering checks and monitors.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Create and resolve an incident based on the alert configuration. Useful for status page automation.
        /// </summary>
        [Output("triggerIncident")]
        public Output<Outputs.UrlMonitorTriggerIncident?> TriggerIncident { get; private set; } = null!;

        /// <summary>
        /// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        /// </summary>
        [Output("useGlobalAlertSettings")]
        public Output<bool?> UseGlobalAlertSettings { get; private set; } = null!;


        /// <summary>
        /// Create a UrlMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UrlMonitor(string name, UrlMonitorArgs args, CustomResourceOptions? options = null)
            : base("checkly:index/urlMonitor:UrlMonitor", name, args ?? new UrlMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UrlMonitor(string name, Input<string> id, UrlMonitorState? state = null, CustomResourceOptions? options = null)
            : base("checkly:index/urlMonitor:UrlMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/checkly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UrlMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UrlMonitor Get(string name, Input<string> id, UrlMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new UrlMonitor(name, id, state, options);
        }
    }

    public sealed class UrlMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines whether the monitor will run periodically or not after being deployed.
        /// </summary>
        [Input("activated", required: true)]
        public Input<bool> Activated { get; set; } = null!;

        [Input("alertChannelSubscriptions")]
        private InputList<Inputs.UrlMonitorAlertChannelSubscriptionArgs>? _alertChannelSubscriptions;

        /// <summary>
        /// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        /// </summary>
        public InputList<Inputs.UrlMonitorAlertChannelSubscriptionArgs> AlertChannelSubscriptions
        {
            get => _alertChannelSubscriptions ?? (_alertChannelSubscriptions = new InputList<Inputs.UrlMonitorAlertChannelSubscriptionArgs>());
            set => _alertChannelSubscriptions = value;
        }

        /// <summary>
        /// Determines the alert escalation policy for the monitor.
        /// </summary>
        [Input("alertSettings")]
        public Input<Inputs.UrlMonitorAlertSettingsArgs>? AlertSettings { get; set; }

        /// <summary>
        /// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        /// </summary>
        [Input("degradedResponseTime")]
        public Input<int>? DegradedResponseTime { get; set; }

        /// <summary>
        /// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        /// </summary>
        [Input("frequency", required: true)]
        public Input<int> Frequency { get; set; } = null!;

        /// <summary>
        /// To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        /// </summary>
        [Input("frequencyOffset")]
        public Input<int>? FrequencyOffset { get; set; }

        /// <summary>
        /// The ID of the check group that this monitor is part of.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        /// </summary>
        [Input("groupOrder")]
        public Input<int>? GroupOrder { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// An array of one or more data center locations where to run the this monitor.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        /// </summary>
        [Input("maxResponseTime")]
        public Input<int>? MaxResponseTime { get; set; }

        /// <summary>
        /// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        /// </summary>
        [Input("muted")]
        public Input<bool>? Muted { get; set; }

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateLocations")]
        private InputList<string>? _privateLocations;

        /// <summary>
        /// An array of one or more private locations slugs.
        /// </summary>
        public InputList<string> PrivateLocations
        {
            get => _privateLocations ?? (_privateLocations = new InputList<string>());
            set => _privateLocations = value;
        }

        /// <summary>
        /// The parameters of the HTTP request.
        /// </summary>
        [Input("request", required: true)]
        public Input<Inputs.UrlMonitorRequestArgs> Request { get; set; } = null!;

        /// <summary>
        /// A strategy for retrying failed monitor runs.
        /// </summary>
        [Input("retryStrategy")]
        public Input<Inputs.UrlMonitorRetryStrategyArgs>? RetryStrategy { get; set; }

        /// <summary>
        /// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        /// </summary>
        [Input("runParallel")]
        public Input<bool>? RunParallel { get; set; }

        /// <summary>
        /// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        /// </summary>
        [Input("shouldFail")]
        public Input<bool>? ShouldFail { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags for organizing and filtering checks and monitors.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Create and resolve an incident based on the alert configuration. Useful for status page automation.
        /// </summary>
        [Input("triggerIncident")]
        public Input<Inputs.UrlMonitorTriggerIncidentArgs>? TriggerIncident { get; set; }

        /// <summary>
        /// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        /// </summary>
        [Input("useGlobalAlertSettings")]
        public Input<bool>? UseGlobalAlertSettings { get; set; }

        public UrlMonitorArgs()
        {
        }
        public static new UrlMonitorArgs Empty => new UrlMonitorArgs();
    }

    public sealed class UrlMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines whether the monitor will run periodically or not after being deployed.
        /// </summary>
        [Input("activated")]
        public Input<bool>? Activated { get; set; }

        [Input("alertChannelSubscriptions")]
        private InputList<Inputs.UrlMonitorAlertChannelSubscriptionGetArgs>? _alertChannelSubscriptions;

        /// <summary>
        /// An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        /// </summary>
        public InputList<Inputs.UrlMonitorAlertChannelSubscriptionGetArgs> AlertChannelSubscriptions
        {
            get => _alertChannelSubscriptions ?? (_alertChannelSubscriptions = new InputList<Inputs.UrlMonitorAlertChannelSubscriptionGetArgs>());
            set => _alertChannelSubscriptions = value;
        }

        /// <summary>
        /// Determines the alert escalation policy for the monitor.
        /// </summary>
        [Input("alertSettings")]
        public Input<Inputs.UrlMonitorAlertSettingsGetArgs>? AlertSettings { get; set; }

        /// <summary>
        /// The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        /// </summary>
        [Input("degradedResponseTime")]
        public Input<int>? DegradedResponseTime { get; set; }

        /// <summary>
        /// How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        /// </summary>
        [Input("frequency")]
        public Input<int>? Frequency { get; set; }

        /// <summary>
        /// To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        /// </summary>
        [Input("frequencyOffset")]
        public Input<int>? FrequencyOffset { get; set; }

        /// <summary>
        /// The ID of the check group that this monitor is part of.
        /// </summary>
        [Input("groupId")]
        public Input<int>? GroupId { get; set; }

        /// <summary>
        /// The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        /// </summary>
        [Input("groupOrder")]
        public Input<int>? GroupOrder { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// An array of one or more data center locations where to run the this monitor.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        /// </summary>
        [Input("maxResponseTime")]
        public Input<int>? MaxResponseTime { get; set; }

        /// <summary>
        /// Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        /// </summary>
        [Input("muted")]
        public Input<bool>? Muted { get; set; }

        /// <summary>
        /// The name of the monitor.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateLocations")]
        private InputList<string>? _privateLocations;

        /// <summary>
        /// An array of one or more private locations slugs.
        /// </summary>
        public InputList<string> PrivateLocations
        {
            get => _privateLocations ?? (_privateLocations = new InputList<string>());
            set => _privateLocations = value;
        }

        /// <summary>
        /// The parameters of the HTTP request.
        /// </summary>
        [Input("request")]
        public Input<Inputs.UrlMonitorRequestGetArgs>? Request { get; set; }

        /// <summary>
        /// A strategy for retrying failed monitor runs.
        /// </summary>
        [Input("retryStrategy")]
        public Input<Inputs.UrlMonitorRetryStrategyGetArgs>? RetryStrategy { get; set; }

        /// <summary>
        /// Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        /// </summary>
        [Input("runParallel")]
        public Input<bool>? RunParallel { get; set; }

        /// <summary>
        /// Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        /// </summary>
        [Input("shouldFail")]
        public Input<bool>? ShouldFail { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags for organizing and filtering checks and monitors.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Create and resolve an incident based on the alert configuration. Useful for status page automation.
        /// </summary>
        [Input("triggerIncident")]
        public Input<Inputs.UrlMonitorTriggerIncidentGetArgs>? TriggerIncident { get; set; }

        /// <summary>
        /// When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        /// </summary>
        [Input("useGlobalAlertSettings")]
        public Input<bool>? UseGlobalAlertSettings { get; set; }

        public UrlMonitorState()
        {
        }
        public static new UrlMonitorState Empty => new UrlMonitorState();
    }
}
