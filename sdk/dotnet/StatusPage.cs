// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly
{
    /// <summary>
    /// Checkly status pages allow you to easily communicate the uptime and health of your applications and services to your customers.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Checkly = Pulumi.Checkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var api = new Checkly.StatusPageService("api", new()
    ///     {
    ///         Name = "API",
    ///     });
    /// 
    ///     var database = new Checkly.StatusPageService("database", new()
    ///     {
    ///         Name = "Database",
    ///     });
    /// 
    ///     var example = new Checkly.StatusPage("example", new()
    ///     {
    ///         Name = "Example Application",
    ///         Url = "my-example-status-page",
    ///         DefaultTheme = "DARK",
    ///         Cards = new[]
    ///         {
    ///             new Checkly.Inputs.StatusPageCardArgs
    ///             {
    ///                 Name = "Services",
    ///                 ServiceAttachments = new[]
    ///                 {
    ///                     new Checkly.Inputs.StatusPageCardServiceAttachmentArgs
    ///                     {
    ///                         ServiceId = api.Id,
    ///                     },
    ///                     new Checkly.Inputs.StatusPageCardServiceAttachmentArgs
    ///                     {
    ///                         ServiceId = database.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ChecklyResourceType("checkly:index/statusPage:StatusPage")]
    public partial class StatusPage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of cards to include on the status page.
        /// </summary>
        [Output("cards")]
        public Output<ImmutableArray<Outputs.StatusPageCard>> Cards { get; private set; } = null!;

        /// <summary>
        /// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        /// </summary>
        [Output("customDomain")]
        public Output<string?> CustomDomain { get; private set; } = null!;

        /// <summary>
        /// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        /// </summary>
        [Output("defaultTheme")]
        public Output<string?> DefaultTheme { get; private set; } = null!;

        /// <summary>
        /// A URL to an image file to use as the favicon of the status page.
        /// </summary>
        [Output("favicon")]
        public Output<string?> Favicon { get; private set; } = null!;

        /// <summary>
        /// A URL to an image file to use as the logo for the status page.
        /// </summary>
        [Output("logo")]
        public Output<string?> Logo { get; private set; } = null!;

        /// <summary>
        /// The name of the status page.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The URL the user should be redirected to when clicking the logo.
        /// </summary>
        [Output("redirectTo")]
        public Output<string?> RedirectTo { get; private set; } = null!;

        /// <summary>
        /// The URL of the status page.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a StatusPage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StatusPage(string name, StatusPageArgs args, CustomResourceOptions? options = null)
            : base("checkly:index/statusPage:StatusPage", name, args ?? new StatusPageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StatusPage(string name, Input<string> id, StatusPageState? state = null, CustomResourceOptions? options = null)
            : base("checkly:index/statusPage:StatusPage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/checkly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StatusPage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StatusPage Get(string name, Input<string> id, StatusPageState? state = null, CustomResourceOptions? options = null)
        {
            return new StatusPage(name, id, state, options);
        }
    }

    public sealed class StatusPageArgs : global::Pulumi.ResourceArgs
    {
        [Input("cards", required: true)]
        private InputList<Inputs.StatusPageCardArgs>? _cards;

        /// <summary>
        /// A list of cards to include on the status page.
        /// </summary>
        public InputList<Inputs.StatusPageCardArgs> Cards
        {
            get => _cards ?? (_cards = new InputList<Inputs.StatusPageCardArgs>());
            set => _cards = value;
        }

        /// <summary>
        /// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        /// </summary>
        [Input("defaultTheme")]
        public Input<string>? DefaultTheme { get; set; }

        /// <summary>
        /// A URL to an image file to use as the favicon of the status page.
        /// </summary>
        [Input("favicon")]
        public Input<string>? Favicon { get; set; }

        /// <summary>
        /// A URL to an image file to use as the logo for the status page.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// The name of the status page.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URL the user should be redirected to when clicking the logo.
        /// </summary>
        [Input("redirectTo")]
        public Input<string>? RedirectTo { get; set; }

        /// <summary>
        /// The URL of the status page.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public StatusPageArgs()
        {
        }
        public static new StatusPageArgs Empty => new StatusPageArgs();
    }

    public sealed class StatusPageState : global::Pulumi.ResourceArgs
    {
        [Input("cards")]
        private InputList<Inputs.StatusPageCardGetArgs>? _cards;

        /// <summary>
        /// A list of cards to include on the status page.
        /// </summary>
        public InputList<Inputs.StatusPageCardGetArgs> Cards
        {
            get => _cards ?? (_cards = new InputList<Inputs.StatusPageCardGetArgs>());
            set => _cards = value;
        }

        /// <summary>
        /// A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        /// </summary>
        [Input("defaultTheme")]
        public Input<string>? DefaultTheme { get; set; }

        /// <summary>
        /// A URL to an image file to use as the favicon of the status page.
        /// </summary>
        [Input("favicon")]
        public Input<string>? Favicon { get; set; }

        /// <summary>
        /// A URL to an image file to use as the logo for the status page.
        /// </summary>
        [Input("logo")]
        public Input<string>? Logo { get; set; }

        /// <summary>
        /// The name of the status page.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The URL the user should be redirected to when clicking the logo.
        /// </summary>
        [Input("redirectTo")]
        public Input<string>? RedirectTo { get; set; }

        /// <summary>
        /// The URL of the status page.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public StatusPageState()
        {
        }
        public static new StatusPageState Empty => new StatusPageState();
    }
}
