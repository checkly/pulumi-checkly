// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Checkly = Pulumi.Checkly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Simple Private Location example
    ///         var location = new Checkly.PrivateLocation("location", new Checkly.PrivateLocationArgs
    ///         {
    ///             Icon = "location",
    ///             SlugName = "new-private-location",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [ChecklyResourceType("checkly:index/privateLocation:PrivateLocation")]
    public partial class PrivateLocation : Pulumi.CustomResource
    {
        /// <summary>
        /// Icon assigned to the private location.
        /// </summary>
        [Output("icon")]
        public Output<string?> Icon { get; private set; } = null!;

        /// <summary>
        /// Private location API keys.
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<string>> Keys { get; private set; } = null!;

        /// <summary>
        /// The private location name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Valid slug name.
        /// </summary>
        [Output("slugName")]
        public Output<string> SlugName { get; private set; } = null!;


        /// <summary>
        /// Create a PrivateLocation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrivateLocation(string name, PrivateLocationArgs args, CustomResourceOptions? options = null)
            : base("checkly:index/privateLocation:PrivateLocation", name, args ?? new PrivateLocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrivateLocation(string name, Input<string> id, PrivateLocationState? state = null, CustomResourceOptions? options = null)
            : base("checkly:index/privateLocation:PrivateLocation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/checkly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrivateLocation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrivateLocation Get(string name, Input<string> id, PrivateLocationState? state = null, CustomResourceOptions? options = null)
        {
            return new PrivateLocation(name, id, state, options);
        }
    }

    public sealed class PrivateLocationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Icon assigned to the private location.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The private location name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Valid slug name.
        /// </summary>
        [Input("slugName", required: true)]
        public Input<string> SlugName { get; set; } = null!;

        public PrivateLocationArgs()
        {
        }
    }

    public sealed class PrivateLocationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Icon assigned to the private location.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        [Input("keys")]
        private InputList<string>? _keys;

        /// <summary>
        /// Private location API keys.
        /// </summary>
        public InputList<string> Keys
        {
            get => _keys ?? (_keys = new InputList<string>());
            set => _keys = value;
        }

        /// <summary>
        /// The private location name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Valid slug name.
        /// </summary>
        [Input("slugName")]
        public Input<string>? SlugName { get; set; }

        public PrivateLocationState()
        {
        }
    }
}
