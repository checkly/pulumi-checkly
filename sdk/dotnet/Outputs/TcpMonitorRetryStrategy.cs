// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly.Outputs
{

    [OutputType]
    public sealed class TcpMonitorRetryStrategy
    {
        /// <summary>
        /// The number of seconds to wait before the first retry attempt. (Default `60`).
        /// </summary>
        public readonly int? BaseBackoffSeconds;
        /// <summary>
        /// The total amount of time to continue retrying the check/monitor (maximum 600 seconds). Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `600`).
        /// </summary>
        public readonly int? MaxDurationSeconds;
        /// <summary>
        /// The maximum number of times to retry the check/monitor. Value must be between `1` and `10`. Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `2`).
        /// </summary>
        public readonly int? MaxRetries;
        /// <summary>
        /// Apply the retry strategy only if the defined conditions match.
        /// </summary>
        public readonly Outputs.TcpMonitorRetryStrategyOnlyOn? OnlyOn;
        /// <summary>
        /// Whether retries should be run in the same region as the initial check/monitor run. (Default `true`).
        /// </summary>
        public readonly bool? SameRegion;
        /// <summary>
        /// Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, `EXPONENTIAL`, `SINGLE_RETRY`, and `NO_RETRIES`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private TcpMonitorRetryStrategy(
            int? baseBackoffSeconds,

            int? maxDurationSeconds,

            int? maxRetries,

            Outputs.TcpMonitorRetryStrategyOnlyOn? onlyOn,

            bool? sameRegion,

            string type)
        {
            BaseBackoffSeconds = baseBackoffSeconds;
            MaxDurationSeconds = maxDurationSeconds;
            MaxRetries = maxRetries;
            OnlyOn = onlyOn;
            SameRegion = sameRegion;
            Type = type;
        }
    }
}
