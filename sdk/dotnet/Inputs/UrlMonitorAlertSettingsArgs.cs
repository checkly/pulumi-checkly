// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly.Inputs
{

    public sealed class UrlMonitorAlertSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines what type of escalation to use. Possible values are `RUN_BASED` and `TIME_BASED`.
        /// </summary>
        [Input("escalationType", required: true)]
        public Input<string> EscalationType { get; set; } = null!;

        [Input("parallelRunFailureThresholds")]
        private InputList<Inputs.UrlMonitorAlertSettingsParallelRunFailureThresholdArgs>? _parallelRunFailureThresholds;

        /// <summary>
        /// Configuration for parallel run failure threshold.
        /// </summary>
        public InputList<Inputs.UrlMonitorAlertSettingsParallelRunFailureThresholdArgs> ParallelRunFailureThresholds
        {
            get => _parallelRunFailureThresholds ?? (_parallelRunFailureThresholds = new InputList<Inputs.UrlMonitorAlertSettingsParallelRunFailureThresholdArgs>());
            set => _parallelRunFailureThresholds = value;
        }

        [Input("reminders")]
        private InputList<Inputs.UrlMonitorAlertSettingsReminderArgs>? _reminders;

        /// <summary>
        /// Defines how often to send reminder notifications after initial alert.
        /// </summary>
        public InputList<Inputs.UrlMonitorAlertSettingsReminderArgs> Reminders
        {
            get => _reminders ?? (_reminders = new InputList<Inputs.UrlMonitorAlertSettingsReminderArgs>());
            set => _reminders = value;
        }

        [Input("runBasedEscalations")]
        private InputList<Inputs.UrlMonitorAlertSettingsRunBasedEscalationArgs>? _runBasedEscalations;

        /// <summary>
        /// Configuration for run-based escalation.
        /// </summary>
        public InputList<Inputs.UrlMonitorAlertSettingsRunBasedEscalationArgs> RunBasedEscalations
        {
            get => _runBasedEscalations ?? (_runBasedEscalations = new InputList<Inputs.UrlMonitorAlertSettingsRunBasedEscalationArgs>());
            set => _runBasedEscalations = value;
        }

        [Input("timeBasedEscalations")]
        private InputList<Inputs.UrlMonitorAlertSettingsTimeBasedEscalationArgs>? _timeBasedEscalations;

        /// <summary>
        /// Configuration for time-based escalation.
        /// </summary>
        public InputList<Inputs.UrlMonitorAlertSettingsTimeBasedEscalationArgs> TimeBasedEscalations
        {
            get => _timeBasedEscalations ?? (_timeBasedEscalations = new InputList<Inputs.UrlMonitorAlertSettingsTimeBasedEscalationArgs>());
            set => _timeBasedEscalations = value;
        }

        public UrlMonitorAlertSettingsArgs()
        {
        }
        public static new UrlMonitorAlertSettingsArgs Empty => new UrlMonitorAlertSettingsArgs();
    }
}
