// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly
{
    /// <summary>
    /// Use client certificates to authenticate your API checks to APIs that require mutual TLS (mTLS) authentication, or any other authentication scheme where the requester needs to provide a certificate.
    /// 
    /// Each client certificate is specific to a domain name, e.g. `acme.com` and will be used automatically by any API checks targeting that domain.
    /// 
    /// Changing the value of any attribute forces a new resource to be created.
    /// </summary>
    [ChecklyResourceType("checkly:index/clientCertificate:ClientCertificate")]
    public partial class ClientCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The client certificate in PEM format.
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// The host domain that the certificate should be used for.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Passphrase for the private key.
        /// </summary>
        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;

        /// <summary>
        /// The private key for the certificate in PEM format.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        /// </summary>
        [Output("trustedCa")]
        public Output<string?> TrustedCa { get; private set; } = null!;


        /// <summary>
        /// Create a ClientCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClientCertificate(string name, ClientCertificateArgs args, CustomResourceOptions? options = null)
            : base("checkly:index/clientCertificate:ClientCertificate", name, args ?? new ClientCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClientCertificate(string name, Input<string> id, ClientCertificateState? state = null, CustomResourceOptions? options = null)
            : base("checkly:index/clientCertificate:ClientCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/checkly",
                AdditionalSecretOutputs =
                {
                    "passphrase",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClientCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClientCertificate Get(string name, Input<string> id, ClientCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new ClientCertificate(name, id, state, options);
        }
    }

    public sealed class ClientCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The client certificate in PEM format.
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// The host domain that the certificate should be used for.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Passphrase for the private key.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The private key for the certificate in PEM format.
        /// </summary>
        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        /// <summary>
        /// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        /// </summary>
        [Input("trustedCa")]
        public Input<string>? TrustedCa { get; set; }

        public ClientCertificateArgs()
        {
        }
        public static new ClientCertificateArgs Empty => new ClientCertificateArgs();
    }

    public sealed class ClientCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The client certificate in PEM format.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// The host domain that the certificate should be used for.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Passphrase for the private key.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The private key for the certificate in PEM format.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        /// </summary>
        [Input("trustedCa")]
        public Input<string>? TrustedCa { get; set; }

        public ClientCertificateState()
        {
        }
        public static new ClientCertificateState Empty => new ClientCertificateState();
    }
}
