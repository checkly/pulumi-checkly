// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Checkly
{
    /// <summary>
    /// Allows you to define alerting channels for the checks and groups in your account
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Checkly = Pulumi.Checkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // An Email alert channel
    ///     var emailAc = new Checkly.AlertChannel("email_ac", new()
    ///     {
    ///         Email = new Checkly.Inputs.AlertChannelEmailArgs
    ///         {
    ///             Address = "john@example.com",
    ///         },
    ///         SendRecovery = true,
    ///         SendFailure = false,
    ///         SendDegraded = true,
    ///         SslExpiry = true,
    ///         SslExpiryThreshold = 22,
    ///     });
    /// 
    ///     // A SMS alert channel
    ///     var smsAc = new Checkly.AlertChannel("sms_ac", new()
    ///     {
    ///         Sms = new Checkly.Inputs.AlertChannelSmsArgs
    ///         {
    ///             Name = "john",
    ///             Number = "+5491100001111",
    ///         },
    ///         SendRecovery = true,
    ///         SendFailure = true,
    ///     });
    /// 
    ///     // A Slack alert channel
    ///     var slackAc = new Checkly.AlertChannel("slack_ac", new()
    ///     {
    ///         Slack = new Checkly.Inputs.AlertChannelSlackArgs
    ///         {
    ///             Channel = "#checkly-notifications",
    ///             Url = "https://hooks.slack.com/services/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",
    ///         },
    ///     });
    /// 
    ///     // An Opsgenie alert channel
    ///     var opsgenieAc = new Checkly.AlertChannel("opsgenie_ac", new()
    ///     {
    ///         Opsgenie = new Checkly.Inputs.AlertChannelOpsgenieArgs
    ///         {
    ///             Name = "opsalerts",
    ///             ApiKey = "fookey",
    ///             Region = "fooregion",
    ///             Priority = "foopriority",
    ///         },
    ///     });
    /// 
    ///     // A Pagerduty alert channel
    ///     var pagerdutyAc = new Checkly.AlertChannel("pagerduty_ac", new()
    ///     {
    ///         Pagerduty = new Checkly.Inputs.AlertChannelPagerdutyArgs
    ///         {
    ///             Account = "checkly",
    ///             ServiceKey = "key1",
    ///             ServiceName = "pdalert",
    ///         },
    ///     });
    /// 
    ///     // A Webhook alert channel
    ///     var webhookAc = new Checkly.AlertChannel("webhook_ac", new()
    ///     {
    ///         Webhook = new Checkly.Inputs.AlertChannelWebhookArgs
    ///         {
    ///             Name = "foo",
    ///             Method = "get",
    ///             Template = "footemplate",
    ///             Url = "https://example.com/foo",
    ///             WebhookSecret = "foosecret",
    ///         },
    ///     });
    /// 
    ///     // A Firehydran alert channel integration
    ///     var firehydrantAc = new Checkly.AlertChannel("firehydrant_ac", new()
    ///     {
    ///         Webhook = new Checkly.Inputs.AlertChannelWebhookArgs
    ///         {
    ///             Name = "firehydrant",
    ///             Method = "post",
    ///             Template = @"{
    ///   ""event"": ""{{ALERT_TITLE}}"",
    ///   ""link"": ""{{RESULT_LINK}}"",
    ///   ""check_id"": ""{{CHECK_ID}}"",
    ///   ""check_type"": ""{{CHECK_TYPE}}"",
    ///   ""alert_type"": ""{{ALERT_TYPE}}"",
    ///   ""started_at"": ""{{STARTED_AT}}"",
    ///   ""check_result_id"": ""{{CHECK_RESULT_ID}}""
    /// },
    /// ",
    ///             Url = "https://app.firehydrant.io/integrations/alerting/webhooks/2/checkly",
    ///             WebhookType = "WEBHOOK_FIREHYDRANT",
    ///         },
    ///     });
    /// 
    ///     // Connecting the alert channel to a check
    ///     var exampleCheck = new Checkly.Check("example_check", new()
    ///     {
    ///         Name = "Example check",
    ///         AlertChannelSubscriptions = new[]
    ///         {
    ///             new Checkly.Inputs.CheckAlertChannelSubscriptionArgs
    ///             {
    ///                 ChannelId = emailAc.Id,
    ///                 Activated = true,
    ///             },
    ///             new Checkly.Inputs.CheckAlertChannelSubscriptionArgs
    ///             {
    ///                 ChannelId = smsAc.Id,
    ///                 Activated = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ChecklyResourceType("checkly:index/alertChannel:AlertChannel")]
    public partial class AlertChannel : global::Pulumi.CustomResource
    {
        [Output("call")]
        public Output<Outputs.AlertChannelCall?> Call { get; private set; } = null!;

        [Output("email")]
        public Output<Outputs.AlertChannelEmail?> Email { get; private set; } = null!;

        [Output("opsgenie")]
        public Output<Outputs.AlertChannelOpsgenie?> Opsgenie { get; private set; } = null!;

        [Output("pagerduty")]
        public Output<Outputs.AlertChannelPagerduty?> Pagerduty { get; private set; } = null!;

        /// <summary>
        /// (Default `false`)
        /// </summary>
        [Output("sendDegraded")]
        public Output<bool?> SendDegraded { get; private set; } = null!;

        /// <summary>
        /// (Default `true`)
        /// </summary>
        [Output("sendFailure")]
        public Output<bool?> SendFailure { get; private set; } = null!;

        /// <summary>
        /// (Default `true`)
        /// </summary>
        [Output("sendRecovery")]
        public Output<bool?> SendRecovery { get; private set; } = null!;

        [Output("slack")]
        public Output<Outputs.AlertChannelSlack?> Slack { get; private set; } = null!;

        [Output("sms")]
        public Output<Outputs.AlertChannelSms?> Sms { get; private set; } = null!;

        /// <summary>
        /// (Default `false`)
        /// </summary>
        [Output("sslExpiry")]
        public Output<bool?> SslExpiry { get; private set; } = null!;

        /// <summary>
        /// Value must be between 1 and 30 (Default `30`)
        /// </summary>
        [Output("sslExpiryThreshold")]
        public Output<int?> SslExpiryThreshold { get; private set; } = null!;

        [Output("webhook")]
        public Output<Outputs.AlertChannelWebhook?> Webhook { get; private set; } = null!;


        /// <summary>
        /// Create a AlertChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertChannel(string name, AlertChannelArgs? args = null, CustomResourceOptions? options = null)
            : base("checkly:index/alertChannel:AlertChannel", name, args ?? new AlertChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertChannel(string name, Input<string> id, AlertChannelState? state = null, CustomResourceOptions? options = null)
            : base("checkly:index/alertChannel:AlertChannel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/checkly",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertChannel Get(string name, Input<string> id, AlertChannelState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertChannel(name, id, state, options);
        }
    }

    public sealed class AlertChannelArgs : global::Pulumi.ResourceArgs
    {
        [Input("call")]
        public Input<Inputs.AlertChannelCallArgs>? Call { get; set; }

        [Input("email")]
        public Input<Inputs.AlertChannelEmailArgs>? Email { get; set; }

        [Input("opsgenie")]
        public Input<Inputs.AlertChannelOpsgenieArgs>? Opsgenie { get; set; }

        [Input("pagerduty")]
        public Input<Inputs.AlertChannelPagerdutyArgs>? Pagerduty { get; set; }

        /// <summary>
        /// (Default `false`)
        /// </summary>
        [Input("sendDegraded")]
        public Input<bool>? SendDegraded { get; set; }

        /// <summary>
        /// (Default `true`)
        /// </summary>
        [Input("sendFailure")]
        public Input<bool>? SendFailure { get; set; }

        /// <summary>
        /// (Default `true`)
        /// </summary>
        [Input("sendRecovery")]
        public Input<bool>? SendRecovery { get; set; }

        [Input("slack")]
        public Input<Inputs.AlertChannelSlackArgs>? Slack { get; set; }

        [Input("sms")]
        public Input<Inputs.AlertChannelSmsArgs>? Sms { get; set; }

        /// <summary>
        /// (Default `false`)
        /// </summary>
        [Input("sslExpiry")]
        public Input<bool>? SslExpiry { get; set; }

        /// <summary>
        /// Value must be between 1 and 30 (Default `30`)
        /// </summary>
        [Input("sslExpiryThreshold")]
        public Input<int>? SslExpiryThreshold { get; set; }

        [Input("webhook")]
        public Input<Inputs.AlertChannelWebhookArgs>? Webhook { get; set; }

        public AlertChannelArgs()
        {
        }
        public static new AlertChannelArgs Empty => new AlertChannelArgs();
    }

    public sealed class AlertChannelState : global::Pulumi.ResourceArgs
    {
        [Input("call")]
        public Input<Inputs.AlertChannelCallGetArgs>? Call { get; set; }

        [Input("email")]
        public Input<Inputs.AlertChannelEmailGetArgs>? Email { get; set; }

        [Input("opsgenie")]
        public Input<Inputs.AlertChannelOpsgenieGetArgs>? Opsgenie { get; set; }

        [Input("pagerduty")]
        public Input<Inputs.AlertChannelPagerdutyGetArgs>? Pagerduty { get; set; }

        /// <summary>
        /// (Default `false`)
        /// </summary>
        [Input("sendDegraded")]
        public Input<bool>? SendDegraded { get; set; }

        /// <summary>
        /// (Default `true`)
        /// </summary>
        [Input("sendFailure")]
        public Input<bool>? SendFailure { get; set; }

        /// <summary>
        /// (Default `true`)
        /// </summary>
        [Input("sendRecovery")]
        public Input<bool>? SendRecovery { get; set; }

        [Input("slack")]
        public Input<Inputs.AlertChannelSlackGetArgs>? Slack { get; set; }

        [Input("sms")]
        public Input<Inputs.AlertChannelSmsGetArgs>? Sms { get; set; }

        /// <summary>
        /// (Default `false`)
        /// </summary>
        [Input("sslExpiry")]
        public Input<bool>? SslExpiry { get; set; }

        /// <summary>
        /// Value must be between 1 and 30 (Default `30`)
        /// </summary>
        [Input("sslExpiryThreshold")]
        public Input<int>? SslExpiryThreshold { get; set; }

        [Input("webhook")]
        public Input<Inputs.AlertChannelWebhookGetArgs>? Webhook { get; set; }

        public AlertChannelState()
        {
        }
        public static new AlertChannelState Empty => new AlertChannelState();
    }
}
