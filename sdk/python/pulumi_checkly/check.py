# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CheckArgs', 'Check']

@pulumi.input_type
class CheckArgs:
    def __init__(__self__, *,
                 activated: pulumi.Input[bool],
                 frequency: pulumi.Input[int],
                 type: pulumi.Input[str],
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input['CheckAlertChannelSubscriptionArgs']]]] = None,
                 alert_settings: Optional[pulumi.Input['CheckAlertSettingsArgs']] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 double_check: Optional[pulumi.Input[bool]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 local_setup_script: Optional[pulumi.Input[str]] = None,
                 local_teardown_script: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['CheckRequestArgs']] = None,
                 runtime_id: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 setup_snippet_id: Optional[pulumi.Input[int]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 ssl_check: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teardown_snippet_id: Optional[pulumi.Input[int]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Check resource.
        """
        pulumi.set(__self__, "activated", activated)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "type", type)
        if alert_channel_subscriptions is not None:
            pulumi.set(__self__, "alert_channel_subscriptions", alert_channel_subscriptions)
        if alert_settings is not None:
            pulumi.set(__self__, "alert_settings", alert_settings)
        if degraded_response_time is not None:
            pulumi.set(__self__, "degraded_response_time", degraded_response_time)
        if double_check is not None:
            pulumi.set(__self__, "double_check", double_check)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if frequency_offset is not None:
            pulumi.set(__self__, "frequency_offset", frequency_offset)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_order is not None:
            pulumi.set(__self__, "group_order", group_order)
        if local_setup_script is not None:
            pulumi.set(__self__, "local_setup_script", local_setup_script)
        if local_teardown_script is not None:
            pulumi.set(__self__, "local_teardown_script", local_teardown_script)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if max_response_time is not None:
            pulumi.set(__self__, "max_response_time", max_response_time)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if runtime_id is not None:
            pulumi.set(__self__, "runtime_id", runtime_id)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if setup_snippet_id is not None:
            pulumi.set(__self__, "setup_snippet_id", setup_snippet_id)
        if should_fail is not None:
            pulumi.set(__self__, "should_fail", should_fail)
        if ssl_check is not None:
            pulumi.set(__self__, "ssl_check", ssl_check)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teardown_snippet_id is not None:
            pulumi.set(__self__, "teardown_snippet_id", teardown_snippet_id)
        if use_global_alert_settings is not None:
            pulumi.set(__self__, "use_global_alert_settings", use_global_alert_settings)

    @property
    @pulumi.getter
    def activated(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "activated")

    @activated.setter
    def activated(self, value: pulumi.Input[bool]):
        pulumi.set(self, "activated", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="alertChannelSubscriptions")
    def alert_channel_subscriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CheckAlertChannelSubscriptionArgs']]]]:
        return pulumi.get(self, "alert_channel_subscriptions")

    @alert_channel_subscriptions.setter
    def alert_channel_subscriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CheckAlertChannelSubscriptionArgs']]]]):
        pulumi.set(self, "alert_channel_subscriptions", value)

    @property
    @pulumi.getter(name="alertSettings")
    def alert_settings(self) -> Optional[pulumi.Input['CheckAlertSettingsArgs']]:
        return pulumi.get(self, "alert_settings")

    @alert_settings.setter
    def alert_settings(self, value: Optional[pulumi.Input['CheckAlertSettingsArgs']]):
        pulumi.set(self, "alert_settings", value)

    @property
    @pulumi.getter(name="degradedResponseTime")
    def degraded_response_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "degraded_response_time")

    @degraded_response_time.setter
    def degraded_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "degraded_response_time", value)

    @property
    @pulumi.getter(name="doubleCheck")
    def double_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "double_check")

    @double_check.setter
    def double_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "double_check", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter(name="frequencyOffset")
    def frequency_offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frequency_offset")

    @frequency_offset.setter
    def frequency_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency_offset", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupOrder")
    def group_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_order")

    @group_order.setter
    def group_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_order", value)

    @property
    @pulumi.getter(name="localSetupScript")
    def local_setup_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_setup_script")

    @local_setup_script.setter
    def local_setup_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_setup_script", value)

    @property
    @pulumi.getter(name="localTeardownScript")
    def local_teardown_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_teardown_script")

    @local_teardown_script.setter
    def local_teardown_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_teardown_script", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="maxResponseTime")
    def max_response_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_response_time")

    @max_response_time.setter
    def max_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_response_time", value)

    @property
    @pulumi.getter
    def muted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "muted")

    @muted.setter
    def muted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "muted", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['CheckRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['CheckRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="runtimeId")
    def runtime_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_id")

    @runtime_id.setter
    def runtime_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_id", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="setupSnippetId")
    def setup_snippet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "setup_snippet_id")

    @setup_snippet_id.setter
    def setup_snippet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "setup_snippet_id", value)

    @property
    @pulumi.getter(name="shouldFail")
    def should_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_fail")

    @should_fail.setter
    def should_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_fail", value)

    @property
    @pulumi.getter(name="sslCheck")
    def ssl_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl_check")

    @ssl_check.setter
    def ssl_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_check", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="teardownSnippetId")
    def teardown_snippet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "teardown_snippet_id")

    @teardown_snippet_id.setter
    def teardown_snippet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "teardown_snippet_id", value)

    @property
    @pulumi.getter(name="useGlobalAlertSettings")
    def use_global_alert_settings(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_global_alert_settings")

    @use_global_alert_settings.setter
    def use_global_alert_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_global_alert_settings", value)


@pulumi.input_type
class _CheckState:
    def __init__(__self__, *,
                 activated: Optional[pulumi.Input[bool]] = None,
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input['CheckAlertChannelSubscriptionArgs']]]] = None,
                 alert_settings: Optional[pulumi.Input['CheckAlertSettingsArgs']] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 double_check: Optional[pulumi.Input[bool]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 local_setup_script: Optional[pulumi.Input[str]] = None,
                 local_teardown_script: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['CheckRequestArgs']] = None,
                 runtime_id: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 setup_snippet_id: Optional[pulumi.Input[int]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 ssl_check: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teardown_snippet_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Check resources.
        """
        if activated is not None:
            pulumi.set(__self__, "activated", activated)
        if alert_channel_subscriptions is not None:
            pulumi.set(__self__, "alert_channel_subscriptions", alert_channel_subscriptions)
        if alert_settings is not None:
            pulumi.set(__self__, "alert_settings", alert_settings)
        if degraded_response_time is not None:
            pulumi.set(__self__, "degraded_response_time", degraded_response_time)
        if double_check is not None:
            pulumi.set(__self__, "double_check", double_check)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if frequency_offset is not None:
            pulumi.set(__self__, "frequency_offset", frequency_offset)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_order is not None:
            pulumi.set(__self__, "group_order", group_order)
        if local_setup_script is not None:
            pulumi.set(__self__, "local_setup_script", local_setup_script)
        if local_teardown_script is not None:
            pulumi.set(__self__, "local_teardown_script", local_teardown_script)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if max_response_time is not None:
            pulumi.set(__self__, "max_response_time", max_response_time)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if runtime_id is not None:
            pulumi.set(__self__, "runtime_id", runtime_id)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if setup_snippet_id is not None:
            pulumi.set(__self__, "setup_snippet_id", setup_snippet_id)
        if should_fail is not None:
            pulumi.set(__self__, "should_fail", should_fail)
        if ssl_check is not None:
            pulumi.set(__self__, "ssl_check", ssl_check)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teardown_snippet_id is not None:
            pulumi.set(__self__, "teardown_snippet_id", teardown_snippet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if use_global_alert_settings is not None:
            pulumi.set(__self__, "use_global_alert_settings", use_global_alert_settings)

    @property
    @pulumi.getter
    def activated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "activated")

    @activated.setter
    def activated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activated", value)

    @property
    @pulumi.getter(name="alertChannelSubscriptions")
    def alert_channel_subscriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CheckAlertChannelSubscriptionArgs']]]]:
        return pulumi.get(self, "alert_channel_subscriptions")

    @alert_channel_subscriptions.setter
    def alert_channel_subscriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CheckAlertChannelSubscriptionArgs']]]]):
        pulumi.set(self, "alert_channel_subscriptions", value)

    @property
    @pulumi.getter(name="alertSettings")
    def alert_settings(self) -> Optional[pulumi.Input['CheckAlertSettingsArgs']]:
        return pulumi.get(self, "alert_settings")

    @alert_settings.setter
    def alert_settings(self, value: Optional[pulumi.Input['CheckAlertSettingsArgs']]):
        pulumi.set(self, "alert_settings", value)

    @property
    @pulumi.getter(name="degradedResponseTime")
    def degraded_response_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "degraded_response_time")

    @degraded_response_time.setter
    def degraded_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "degraded_response_time", value)

    @property
    @pulumi.getter(name="doubleCheck")
    def double_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "double_check")

    @double_check.setter
    def double_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "double_check", value)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="frequencyOffset")
    def frequency_offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "frequency_offset")

    @frequency_offset.setter
    def frequency_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency_offset", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupOrder")
    def group_order(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_order")

    @group_order.setter
    def group_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_order", value)

    @property
    @pulumi.getter(name="localSetupScript")
    def local_setup_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_setup_script")

    @local_setup_script.setter
    def local_setup_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_setup_script", value)

    @property
    @pulumi.getter(name="localTeardownScript")
    def local_teardown_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_teardown_script")

    @local_teardown_script.setter
    def local_teardown_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_teardown_script", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="maxResponseTime")
    def max_response_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_response_time")

    @max_response_time.setter
    def max_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_response_time", value)

    @property
    @pulumi.getter
    def muted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "muted")

    @muted.setter
    def muted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "muted", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['CheckRequestArgs']]:
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['CheckRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="runtimeId")
    def runtime_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_id")

    @runtime_id.setter
    def runtime_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_id", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter(name="setupSnippetId")
    def setup_snippet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "setup_snippet_id")

    @setup_snippet_id.setter
    def setup_snippet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "setup_snippet_id", value)

    @property
    @pulumi.getter(name="shouldFail")
    def should_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "should_fail")

    @should_fail.setter
    def should_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_fail", value)

    @property
    @pulumi.getter(name="sslCheck")
    def ssl_check(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl_check")

    @ssl_check.setter
    def ssl_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_check", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="teardownSnippetId")
    def teardown_snippet_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "teardown_snippet_id")

    @teardown_snippet_id.setter
    def teardown_snippet_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "teardown_snippet_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="useGlobalAlertSettings")
    def use_global_alert_settings(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_global_alert_settings")

    @use_global_alert_settings.setter
    def use_global_alert_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_global_alert_settings", value)


class Check(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activated: Optional[pulumi.Input[bool]] = None,
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CheckAlertChannelSubscriptionArgs']]]]] = None,
                 alert_settings: Optional[pulumi.Input[pulumi.InputType['CheckAlertSettingsArgs']]] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 double_check: Optional[pulumi.Input[bool]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 local_setup_script: Optional[pulumi.Input[str]] = None,
                 local_teardown_script: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[pulumi.InputType['CheckRequestArgs']]] = None,
                 runtime_id: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 setup_snippet_id: Optional[pulumi.Input[int]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 ssl_check: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teardown_snippet_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Check resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CheckArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Check resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CheckArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CheckArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activated: Optional[pulumi.Input[bool]] = None,
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CheckAlertChannelSubscriptionArgs']]]]] = None,
                 alert_settings: Optional[pulumi.Input[pulumi.InputType['CheckAlertSettingsArgs']]] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 double_check: Optional[pulumi.Input[bool]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 local_setup_script: Optional[pulumi.Input[str]] = None,
                 local_teardown_script: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[pulumi.InputType['CheckRequestArgs']]] = None,
                 runtime_id: Optional[pulumi.Input[str]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 setup_snippet_id: Optional[pulumi.Input[int]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 ssl_check: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 teardown_snippet_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CheckArgs.__new__(CheckArgs)

            if activated is None and not opts.urn:
                raise TypeError("Missing required property 'activated'")
            __props__.__dict__["activated"] = activated
            __props__.__dict__["alert_channel_subscriptions"] = alert_channel_subscriptions
            __props__.__dict__["alert_settings"] = alert_settings
            __props__.__dict__["degraded_response_time"] = degraded_response_time
            __props__.__dict__["double_check"] = double_check
            __props__.__dict__["environment_variables"] = environment_variables
            if frequency is None and not opts.urn:
                raise TypeError("Missing required property 'frequency'")
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["frequency_offset"] = frequency_offset
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["group_order"] = group_order
            __props__.__dict__["local_setup_script"] = local_setup_script
            __props__.__dict__["local_teardown_script"] = local_teardown_script
            __props__.__dict__["locations"] = locations
            __props__.__dict__["max_response_time"] = max_response_time
            __props__.__dict__["muted"] = muted
            __props__.__dict__["name"] = name
            __props__.__dict__["request"] = request
            __props__.__dict__["runtime_id"] = runtime_id
            __props__.__dict__["script"] = script
            __props__.__dict__["setup_snippet_id"] = setup_snippet_id
            __props__.__dict__["should_fail"] = should_fail
            __props__.__dict__["ssl_check"] = ssl_check
            __props__.__dict__["tags"] = tags
            __props__.__dict__["teardown_snippet_id"] = teardown_snippet_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["use_global_alert_settings"] = use_global_alert_settings
        super(Check, __self__).__init__(
            'checkly:index/check:Check',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activated: Optional[pulumi.Input[bool]] = None,
            alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CheckAlertChannelSubscriptionArgs']]]]] = None,
            alert_settings: Optional[pulumi.Input[pulumi.InputType['CheckAlertSettingsArgs']]] = None,
            degraded_response_time: Optional[pulumi.Input[int]] = None,
            double_check: Optional[pulumi.Input[bool]] = None,
            environment_variables: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            frequency: Optional[pulumi.Input[int]] = None,
            frequency_offset: Optional[pulumi.Input[int]] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            group_order: Optional[pulumi.Input[int]] = None,
            local_setup_script: Optional[pulumi.Input[str]] = None,
            local_teardown_script: Optional[pulumi.Input[str]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            max_response_time: Optional[pulumi.Input[int]] = None,
            muted: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            request: Optional[pulumi.Input[pulumi.InputType['CheckRequestArgs']]] = None,
            runtime_id: Optional[pulumi.Input[str]] = None,
            script: Optional[pulumi.Input[str]] = None,
            setup_snippet_id: Optional[pulumi.Input[int]] = None,
            should_fail: Optional[pulumi.Input[bool]] = None,
            ssl_check: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            teardown_snippet_id: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            use_global_alert_settings: Optional[pulumi.Input[bool]] = None) -> 'Check':
        """
        Get an existing Check resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CheckState.__new__(_CheckState)

        __props__.__dict__["activated"] = activated
        __props__.__dict__["alert_channel_subscriptions"] = alert_channel_subscriptions
        __props__.__dict__["alert_settings"] = alert_settings
        __props__.__dict__["degraded_response_time"] = degraded_response_time
        __props__.__dict__["double_check"] = double_check
        __props__.__dict__["environment_variables"] = environment_variables
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["frequency_offset"] = frequency_offset
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_order"] = group_order
        __props__.__dict__["local_setup_script"] = local_setup_script
        __props__.__dict__["local_teardown_script"] = local_teardown_script
        __props__.__dict__["locations"] = locations
        __props__.__dict__["max_response_time"] = max_response_time
        __props__.__dict__["muted"] = muted
        __props__.__dict__["name"] = name
        __props__.__dict__["request"] = request
        __props__.__dict__["runtime_id"] = runtime_id
        __props__.__dict__["script"] = script
        __props__.__dict__["setup_snippet_id"] = setup_snippet_id
        __props__.__dict__["should_fail"] = should_fail
        __props__.__dict__["ssl_check"] = ssl_check
        __props__.__dict__["tags"] = tags
        __props__.__dict__["teardown_snippet_id"] = teardown_snippet_id
        __props__.__dict__["type"] = type
        __props__.__dict__["use_global_alert_settings"] = use_global_alert_settings
        return Check(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activated(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "activated")

    @property
    @pulumi.getter(name="alertChannelSubscriptions")
    def alert_channel_subscriptions(self) -> pulumi.Output[Optional[Sequence['outputs.CheckAlertChannelSubscription']]]:
        return pulumi.get(self, "alert_channel_subscriptions")

    @property
    @pulumi.getter(name="alertSettings")
    def alert_settings(self) -> pulumi.Output['outputs.CheckAlertSettings']:
        return pulumi.get(self, "alert_settings")

    @property
    @pulumi.getter(name="degradedResponseTime")
    def degraded_response_time(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "degraded_response_time")

    @property
    @pulumi.getter(name="doubleCheck")
    def double_check(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "double_check")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[int]:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="frequencyOffset")
    def frequency_offset(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "frequency_offset")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupOrder")
    def group_order(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "group_order")

    @property
    @pulumi.getter(name="localSetupScript")
    def local_setup_script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "local_setup_script")

    @property
    @pulumi.getter(name="localTeardownScript")
    def local_teardown_script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "local_teardown_script")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="maxResponseTime")
    def max_response_time(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_response_time")

    @property
    @pulumi.getter
    def muted(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "muted")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def request(self) -> pulumi.Output[Optional['outputs.CheckRequest']]:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="runtimeId")
    def runtime_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "runtime_id")

    @property
    @pulumi.getter
    def script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "script")

    @property
    @pulumi.getter(name="setupSnippetId")
    def setup_snippet_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "setup_snippet_id")

    @property
    @pulumi.getter(name="shouldFail")
    def should_fail(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "should_fail")

    @property
    @pulumi.getter(name="sslCheck")
    def ssl_check(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "ssl_check")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="teardownSnippetId")
    def teardown_snippet_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "teardown_snippet_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="useGlobalAlertSettings")
    def use_global_alert_settings(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "use_global_alert_settings")

