# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UrlMonitorArgs', 'UrlMonitor']

@pulumi.input_type
class UrlMonitorArgs:
    def __init__(__self__, *,
                 activated: pulumi.Input[bool],
                 frequency: pulumi.Input[int],
                 request: pulumi.Input['UrlMonitorRequestArgs'],
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]]] = None,
                 alert_settings: Optional[pulumi.Input['UrlMonitorAlertSettingsArgs']] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retry_strategy: Optional[pulumi.Input['UrlMonitorRetryStrategyArgs']] = None,
                 run_parallel: Optional[pulumi.Input[bool]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a UrlMonitor resource.
        :param pulumi.Input[bool] activated: Determines whether the monitor will run periodically or not after being deployed.
        :param pulumi.Input[int] frequency: How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        :param pulumi.Input['UrlMonitorRequestArgs'] request: The parameters of the HTTP request.
        :param pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]] alert_channel_subscriptions: An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        :param pulumi.Input['UrlMonitorAlertSettingsArgs'] alert_settings: Determines the alert escalation policy for the monitor.
        :param pulumi.Input[int] degraded_response_time: The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        :param pulumi.Input[int] frequency_offset: To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        :param pulumi.Input[int] group_id: The ID of the check group that this monitor is part of.
        :param pulumi.Input[int] group_order: The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: An array of one or more data center locations where to run the this monitor.
        :param pulumi.Input[int] max_response_time: The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        :param pulumi.Input[bool] muted: Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        :param pulumi.Input[str] name: The name of the monitor.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_locations: An array of one or more private locations slugs.
        :param pulumi.Input['UrlMonitorRetryStrategyArgs'] retry_strategy: A strategy for retrying failed monitor runs.
        :param pulumi.Input[bool] run_parallel: Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        :param pulumi.Input[bool] should_fail: Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags for organizing and filtering checks and monitors.
        :param pulumi.Input[bool] use_global_alert_settings: When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        pulumi.set(__self__, "activated", activated)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "request", request)
        if alert_channel_subscriptions is not None:
            pulumi.set(__self__, "alert_channel_subscriptions", alert_channel_subscriptions)
        if alert_settings is not None:
            pulumi.set(__self__, "alert_settings", alert_settings)
        if degraded_response_time is not None:
            pulumi.set(__self__, "degraded_response_time", degraded_response_time)
        if frequency_offset is not None:
            pulumi.set(__self__, "frequency_offset", frequency_offset)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_order is not None:
            pulumi.set(__self__, "group_order", group_order)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if max_response_time is not None:
            pulumi.set(__self__, "max_response_time", max_response_time)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_locations is not None:
            pulumi.set(__self__, "private_locations", private_locations)
        if retry_strategy is not None:
            pulumi.set(__self__, "retry_strategy", retry_strategy)
        if run_parallel is not None:
            pulumi.set(__self__, "run_parallel", run_parallel)
        if should_fail is not None:
            pulumi.set(__self__, "should_fail", should_fail)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_global_alert_settings is not None:
            pulumi.set(__self__, "use_global_alert_settings", use_global_alert_settings)

    @property
    @pulumi.getter
    def activated(self) -> pulumi.Input[bool]:
        """
        Determines whether the monitor will run periodically or not after being deployed.
        """
        return pulumi.get(self, "activated")

    @activated.setter
    def activated(self, value: pulumi.Input[bool]):
        pulumi.set(self, "activated", value)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[int]:
        """
        How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def request(self) -> pulumi.Input['UrlMonitorRequestArgs']:
        """
        The parameters of the HTTP request.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: pulumi.Input['UrlMonitorRequestArgs']):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="alertChannelSubscriptions")
    def alert_channel_subscriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]]]:
        """
        An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        """
        return pulumi.get(self, "alert_channel_subscriptions")

    @alert_channel_subscriptions.setter
    def alert_channel_subscriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]]]):
        pulumi.set(self, "alert_channel_subscriptions", value)

    @property
    @pulumi.getter(name="alertSettings")
    def alert_settings(self) -> Optional[pulumi.Input['UrlMonitorAlertSettingsArgs']]:
        """
        Determines the alert escalation policy for the monitor.
        """
        return pulumi.get(self, "alert_settings")

    @alert_settings.setter
    def alert_settings(self, value: Optional[pulumi.Input['UrlMonitorAlertSettingsArgs']]):
        pulumi.set(self, "alert_settings", value)

    @property
    @pulumi.getter(name="degradedResponseTime")
    def degraded_response_time(self) -> Optional[pulumi.Input[int]]:
        """
        The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        """
        return pulumi.get(self, "degraded_response_time")

    @degraded_response_time.setter
    def degraded_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "degraded_response_time", value)

    @property
    @pulumi.getter(name="frequencyOffset")
    def frequency_offset(self) -> Optional[pulumi.Input[int]]:
        """
        To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        """
        return pulumi.get(self, "frequency_offset")

    @frequency_offset.setter
    def frequency_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency_offset", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the check group that this monitor is part of.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupOrder")
    def group_order(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        """
        return pulumi.get(self, "group_order")

    @group_order.setter
    def group_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_order", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of one or more data center locations where to run the this monitor.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="maxResponseTime")
    def max_response_time(self) -> Optional[pulumi.Input[int]]:
        """
        The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        """
        return pulumi.get(self, "max_response_time")

    @max_response_time.setter
    def max_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_response_time", value)

    @property
    @pulumi.getter
    def muted(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        """
        return pulumi.get(self, "muted")

    @muted.setter
    def muted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "muted", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the monitor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateLocations")
    def private_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of one or more private locations slugs.
        """
        return pulumi.get(self, "private_locations")

    @private_locations.setter
    def private_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_locations", value)

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> Optional[pulumi.Input['UrlMonitorRetryStrategyArgs']]:
        """
        A strategy for retrying failed monitor runs.
        """
        return pulumi.get(self, "retry_strategy")

    @retry_strategy.setter
    def retry_strategy(self, value: Optional[pulumi.Input['UrlMonitorRetryStrategyArgs']]):
        pulumi.set(self, "retry_strategy", value)

    @property
    @pulumi.getter(name="runParallel")
    def run_parallel(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        """
        return pulumi.get(self, "run_parallel")

    @run_parallel.setter
    def run_parallel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_parallel", value)

    @property
    @pulumi.getter(name="shouldFail")
    def should_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        """
        return pulumi.get(self, "should_fail")

    @should_fail.setter
    def should_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_fail", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags for organizing and filtering checks and monitors.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useGlobalAlertSettings")
    def use_global_alert_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        return pulumi.get(self, "use_global_alert_settings")

    @use_global_alert_settings.setter
    def use_global_alert_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_global_alert_settings", value)


@pulumi.input_type
class _UrlMonitorState:
    def __init__(__self__, *,
                 activated: Optional[pulumi.Input[bool]] = None,
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]]] = None,
                 alert_settings: Optional[pulumi.Input['UrlMonitorAlertSettingsArgs']] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request: Optional[pulumi.Input['UrlMonitorRequestArgs']] = None,
                 retry_strategy: Optional[pulumi.Input['UrlMonitorRetryStrategyArgs']] = None,
                 run_parallel: Optional[pulumi.Input[bool]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering UrlMonitor resources.
        :param pulumi.Input[bool] activated: Determines whether the monitor will run periodically or not after being deployed.
        :param pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]] alert_channel_subscriptions: An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        :param pulumi.Input['UrlMonitorAlertSettingsArgs'] alert_settings: Determines the alert escalation policy for the monitor.
        :param pulumi.Input[int] degraded_response_time: The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        :param pulumi.Input[int] frequency: How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        :param pulumi.Input[int] frequency_offset: To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        :param pulumi.Input[int] group_id: The ID of the check group that this monitor is part of.
        :param pulumi.Input[int] group_order: The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: An array of one or more data center locations where to run the this monitor.
        :param pulumi.Input[int] max_response_time: The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        :param pulumi.Input[bool] muted: Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        :param pulumi.Input[str] name: The name of the monitor.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_locations: An array of one or more private locations slugs.
        :param pulumi.Input['UrlMonitorRequestArgs'] request: The parameters of the HTTP request.
        :param pulumi.Input['UrlMonitorRetryStrategyArgs'] retry_strategy: A strategy for retrying failed monitor runs.
        :param pulumi.Input[bool] run_parallel: Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        :param pulumi.Input[bool] should_fail: Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags for organizing and filtering checks and monitors.
        :param pulumi.Input[bool] use_global_alert_settings: When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        if activated is not None:
            pulumi.set(__self__, "activated", activated)
        if alert_channel_subscriptions is not None:
            pulumi.set(__self__, "alert_channel_subscriptions", alert_channel_subscriptions)
        if alert_settings is not None:
            pulumi.set(__self__, "alert_settings", alert_settings)
        if degraded_response_time is not None:
            pulumi.set(__self__, "degraded_response_time", degraded_response_time)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if frequency_offset is not None:
            pulumi.set(__self__, "frequency_offset", frequency_offset)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_order is not None:
            pulumi.set(__self__, "group_order", group_order)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if max_response_time is not None:
            pulumi.set(__self__, "max_response_time", max_response_time)
        if muted is not None:
            pulumi.set(__self__, "muted", muted)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_locations is not None:
            pulumi.set(__self__, "private_locations", private_locations)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if retry_strategy is not None:
            pulumi.set(__self__, "retry_strategy", retry_strategy)
        if run_parallel is not None:
            pulumi.set(__self__, "run_parallel", run_parallel)
        if should_fail is not None:
            pulumi.set(__self__, "should_fail", should_fail)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_global_alert_settings is not None:
            pulumi.set(__self__, "use_global_alert_settings", use_global_alert_settings)

    @property
    @pulumi.getter
    def activated(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the monitor will run periodically or not after being deployed.
        """
        return pulumi.get(self, "activated")

    @activated.setter
    def activated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activated", value)

    @property
    @pulumi.getter(name="alertChannelSubscriptions")
    def alert_channel_subscriptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]]]:
        """
        An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        """
        return pulumi.get(self, "alert_channel_subscriptions")

    @alert_channel_subscriptions.setter
    def alert_channel_subscriptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlMonitorAlertChannelSubscriptionArgs']]]]):
        pulumi.set(self, "alert_channel_subscriptions", value)

    @property
    @pulumi.getter(name="alertSettings")
    def alert_settings(self) -> Optional[pulumi.Input['UrlMonitorAlertSettingsArgs']]:
        """
        Determines the alert escalation policy for the monitor.
        """
        return pulumi.get(self, "alert_settings")

    @alert_settings.setter
    def alert_settings(self, value: Optional[pulumi.Input['UrlMonitorAlertSettingsArgs']]):
        pulumi.set(self, "alert_settings", value)

    @property
    @pulumi.getter(name="degradedResponseTime")
    def degraded_response_time(self) -> Optional[pulumi.Input[int]]:
        """
        The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        """
        return pulumi.get(self, "degraded_response_time")

    @degraded_response_time.setter
    def degraded_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "degraded_response_time", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        """
        How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="frequencyOffset")
    def frequency_offset(self) -> Optional[pulumi.Input[int]]:
        """
        To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        """
        return pulumi.get(self, "frequency_offset")

    @frequency_offset.setter
    def frequency_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency_offset", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the check group that this monitor is part of.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupOrder")
    def group_order(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        """
        return pulumi.get(self, "group_order")

    @group_order.setter
    def group_order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_order", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of one or more data center locations where to run the this monitor.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="maxResponseTime")
    def max_response_time(self) -> Optional[pulumi.Input[int]]:
        """
        The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        """
        return pulumi.get(self, "max_response_time")

    @max_response_time.setter
    def max_response_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_response_time", value)

    @property
    @pulumi.getter
    def muted(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        """
        return pulumi.get(self, "muted")

    @muted.setter
    def muted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "muted", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the monitor.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateLocations")
    def private_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of one or more private locations slugs.
        """
        return pulumi.get(self, "private_locations")

    @private_locations.setter
    def private_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_locations", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['UrlMonitorRequestArgs']]:
        """
        The parameters of the HTTP request.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['UrlMonitorRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> Optional[pulumi.Input['UrlMonitorRetryStrategyArgs']]:
        """
        A strategy for retrying failed monitor runs.
        """
        return pulumi.get(self, "retry_strategy")

    @retry_strategy.setter
    def retry_strategy(self, value: Optional[pulumi.Input['UrlMonitorRetryStrategyArgs']]):
        pulumi.set(self, "retry_strategy", value)

    @property
    @pulumi.getter(name="runParallel")
    def run_parallel(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        """
        return pulumi.get(self, "run_parallel")

    @run_parallel.setter
    def run_parallel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_parallel", value)

    @property
    @pulumi.getter(name="shouldFail")
    def should_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        """
        return pulumi.get(self, "should_fail")

    @should_fail.setter
    def should_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_fail", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags for organizing and filtering checks and monitors.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useGlobalAlertSettings")
    def use_global_alert_settings(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        return pulumi.get(self, "use_global_alert_settings")

    @use_global_alert_settings.setter
    def use_global_alert_settings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_global_alert_settings", value)


class UrlMonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activated: Optional[pulumi.Input[bool]] = None,
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UrlMonitorAlertChannelSubscriptionArgs', 'UrlMonitorAlertChannelSubscriptionArgsDict']]]]] = None,
                 alert_settings: Optional[pulumi.Input[Union['UrlMonitorAlertSettingsArgs', 'UrlMonitorAlertSettingsArgsDict']]] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request: Optional[pulumi.Input[Union['UrlMonitorRequestArgs', 'UrlMonitorRequestArgsDict']]] = None,
                 retry_strategy: Optional[pulumi.Input[Union['UrlMonitorRetryStrategyArgs', 'UrlMonitorRetryStrategyArgsDict']]] = None,
                 run_parallel: Optional[pulumi.Input[bool]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Creates a URL Monitor to check HTTP endpoint availability and response times.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_checkly as checkly

        example_url_monitor = checkly.UrlMonitor("example-url-monitor",
            name="Example URL monitor",
            activated=True,
            frequency=2,
            use_global_alert_settings=True,
            locations=["eu-west-1"],
            request={
                "url": "https://welcome.checklyhq.com",
                "assertions": [{
                    "source": "STATUS_CODE",
                    "comparison": "EQUALS",
                    "target": "200",
                }],
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activated: Determines whether the monitor will run periodically or not after being deployed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['UrlMonitorAlertChannelSubscriptionArgs', 'UrlMonitorAlertChannelSubscriptionArgsDict']]]] alert_channel_subscriptions: An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        :param pulumi.Input[Union['UrlMonitorAlertSettingsArgs', 'UrlMonitorAlertSettingsArgsDict']] alert_settings: Determines the alert escalation policy for the monitor.
        :param pulumi.Input[int] degraded_response_time: The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        :param pulumi.Input[int] frequency: How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        :param pulumi.Input[int] frequency_offset: To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        :param pulumi.Input[int] group_id: The ID of the check group that this monitor is part of.
        :param pulumi.Input[int] group_order: The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: An array of one or more data center locations where to run the this monitor.
        :param pulumi.Input[int] max_response_time: The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        :param pulumi.Input[bool] muted: Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        :param pulumi.Input[str] name: The name of the monitor.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_locations: An array of one or more private locations slugs.
        :param pulumi.Input[Union['UrlMonitorRequestArgs', 'UrlMonitorRequestArgsDict']] request: The parameters of the HTTP request.
        :param pulumi.Input[Union['UrlMonitorRetryStrategyArgs', 'UrlMonitorRetryStrategyArgsDict']] retry_strategy: A strategy for retrying failed monitor runs.
        :param pulumi.Input[bool] run_parallel: Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        :param pulumi.Input[bool] should_fail: Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags for organizing and filtering checks and monitors.
        :param pulumi.Input[bool] use_global_alert_settings: When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlMonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a URL Monitor to check HTTP endpoint availability and response times.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_checkly as checkly

        example_url_monitor = checkly.UrlMonitor("example-url-monitor",
            name="Example URL monitor",
            activated=True,
            frequency=2,
            use_global_alert_settings=True,
            locations=["eu-west-1"],
            request={
                "url": "https://welcome.checklyhq.com",
                "assertions": [{
                    "source": "STATUS_CODE",
                    "comparison": "EQUALS",
                    "target": "200",
                }],
            })
        ```

        :param str resource_name: The name of the resource.
        :param UrlMonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlMonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activated: Optional[pulumi.Input[bool]] = None,
                 alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UrlMonitorAlertChannelSubscriptionArgs', 'UrlMonitorAlertChannelSubscriptionArgsDict']]]]] = None,
                 alert_settings: Optional[pulumi.Input[Union['UrlMonitorAlertSettingsArgs', 'UrlMonitorAlertSettingsArgsDict']]] = None,
                 degraded_response_time: Optional[pulumi.Input[int]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 frequency_offset: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 group_order: Optional[pulumi.Input[int]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_response_time: Optional[pulumi.Input[int]] = None,
                 muted: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request: Optional[pulumi.Input[Union['UrlMonitorRequestArgs', 'UrlMonitorRequestArgsDict']]] = None,
                 retry_strategy: Optional[pulumi.Input[Union['UrlMonitorRetryStrategyArgs', 'UrlMonitorRetryStrategyArgsDict']]] = None,
                 run_parallel: Optional[pulumi.Input[bool]] = None,
                 should_fail: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 use_global_alert_settings: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlMonitorArgs.__new__(UrlMonitorArgs)

            if activated is None and not opts.urn:
                raise TypeError("Missing required property 'activated'")
            __props__.__dict__["activated"] = activated
            __props__.__dict__["alert_channel_subscriptions"] = alert_channel_subscriptions
            __props__.__dict__["alert_settings"] = alert_settings
            __props__.__dict__["degraded_response_time"] = degraded_response_time
            if frequency is None and not opts.urn:
                raise TypeError("Missing required property 'frequency'")
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["frequency_offset"] = frequency_offset
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["group_order"] = group_order
            __props__.__dict__["locations"] = locations
            __props__.__dict__["max_response_time"] = max_response_time
            __props__.__dict__["muted"] = muted
            __props__.__dict__["name"] = name
            __props__.__dict__["private_locations"] = private_locations
            if request is None and not opts.urn:
                raise TypeError("Missing required property 'request'")
            __props__.__dict__["request"] = request
            __props__.__dict__["retry_strategy"] = retry_strategy
            __props__.__dict__["run_parallel"] = run_parallel
            __props__.__dict__["should_fail"] = should_fail
            __props__.__dict__["tags"] = tags
            __props__.__dict__["use_global_alert_settings"] = use_global_alert_settings
        super(UrlMonitor, __self__).__init__(
            'checkly:index/urlMonitor:UrlMonitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activated: Optional[pulumi.Input[bool]] = None,
            alert_channel_subscriptions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UrlMonitorAlertChannelSubscriptionArgs', 'UrlMonitorAlertChannelSubscriptionArgsDict']]]]] = None,
            alert_settings: Optional[pulumi.Input[Union['UrlMonitorAlertSettingsArgs', 'UrlMonitorAlertSettingsArgsDict']]] = None,
            degraded_response_time: Optional[pulumi.Input[int]] = None,
            frequency: Optional[pulumi.Input[int]] = None,
            frequency_offset: Optional[pulumi.Input[int]] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            group_order: Optional[pulumi.Input[int]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            max_response_time: Optional[pulumi.Input[int]] = None,
            muted: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            request: Optional[pulumi.Input[Union['UrlMonitorRequestArgs', 'UrlMonitorRequestArgsDict']]] = None,
            retry_strategy: Optional[pulumi.Input[Union['UrlMonitorRetryStrategyArgs', 'UrlMonitorRetryStrategyArgsDict']]] = None,
            run_parallel: Optional[pulumi.Input[bool]] = None,
            should_fail: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            use_global_alert_settings: Optional[pulumi.Input[bool]] = None) -> 'UrlMonitor':
        """
        Get an existing UrlMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activated: Determines whether the monitor will run periodically or not after being deployed.
        :param pulumi.Input[Sequence[pulumi.Input[Union['UrlMonitorAlertChannelSubscriptionArgs', 'UrlMonitorAlertChannelSubscriptionArgsDict']]]] alert_channel_subscriptions: An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        :param pulumi.Input[Union['UrlMonitorAlertSettingsArgs', 'UrlMonitorAlertSettingsArgsDict']] alert_settings: Determines the alert escalation policy for the monitor.
        :param pulumi.Input[int] degraded_response_time: The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        :param pulumi.Input[int] frequency: How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        :param pulumi.Input[int] frequency_offset: To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        :param pulumi.Input[int] group_id: The ID of the check group that this monitor is part of.
        :param pulumi.Input[int] group_order: The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] locations: An array of one or more data center locations where to run the this monitor.
        :param pulumi.Input[int] max_response_time: The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        :param pulumi.Input[bool] muted: Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        :param pulumi.Input[str] name: The name of the monitor.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_locations: An array of one or more private locations slugs.
        :param pulumi.Input[Union['UrlMonitorRequestArgs', 'UrlMonitorRequestArgsDict']] request: The parameters of the HTTP request.
        :param pulumi.Input[Union['UrlMonitorRetryStrategyArgs', 'UrlMonitorRetryStrategyArgsDict']] retry_strategy: A strategy for retrying failed monitor runs.
        :param pulumi.Input[bool] run_parallel: Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        :param pulumi.Input[bool] should_fail: Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags for organizing and filtering checks and monitors.
        :param pulumi.Input[bool] use_global_alert_settings: When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlMonitorState.__new__(_UrlMonitorState)

        __props__.__dict__["activated"] = activated
        __props__.__dict__["alert_channel_subscriptions"] = alert_channel_subscriptions
        __props__.__dict__["alert_settings"] = alert_settings
        __props__.__dict__["degraded_response_time"] = degraded_response_time
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["frequency_offset"] = frequency_offset
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_order"] = group_order
        __props__.__dict__["locations"] = locations
        __props__.__dict__["max_response_time"] = max_response_time
        __props__.__dict__["muted"] = muted
        __props__.__dict__["name"] = name
        __props__.__dict__["private_locations"] = private_locations
        __props__.__dict__["request"] = request
        __props__.__dict__["retry_strategy"] = retry_strategy
        __props__.__dict__["run_parallel"] = run_parallel
        __props__.__dict__["should_fail"] = should_fail
        __props__.__dict__["tags"] = tags
        __props__.__dict__["use_global_alert_settings"] = use_global_alert_settings
        return UrlMonitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activated(self) -> pulumi.Output[bool]:
        """
        Determines whether the monitor will run periodically or not after being deployed.
        """
        return pulumi.get(self, "activated")

    @property
    @pulumi.getter(name="alertChannelSubscriptions")
    def alert_channel_subscriptions(self) -> pulumi.Output[Optional[Sequence['outputs.UrlMonitorAlertChannelSubscription']]]:
        """
        An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
        """
        return pulumi.get(self, "alert_channel_subscriptions")

    @property
    @pulumi.getter(name="alertSettings")
    def alert_settings(self) -> pulumi.Output['outputs.UrlMonitorAlertSettings']:
        """
        Determines the alert escalation policy for the monitor.
        """
        return pulumi.get(self, "alert_settings")

    @property
    @pulumi.getter(name="degradedResponseTime")
    def degraded_response_time(self) -> pulumi.Output[Optional[int]]:
        """
        The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
        """
        return pulumi.get(self, "degraded_response_time")

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[int]:
        """
        How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="frequencyOffset")
    def frequency_offset(self) -> pulumi.Output[Optional[int]]:
        """
        To create a high frequency monitor, set `frequency` to `0` and `frequency_offset` to `10`, `20`, or `30`.
        """
        return pulumi.get(self, "frequency_offset")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[int]]:
        """
        The ID of the check group that this monitor is part of.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupOrder")
    def group_order(self) -> pulumi.Output[Optional[int]]:
        """
        The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
        """
        return pulumi.get(self, "group_order")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of one or more data center locations where to run the this monitor.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="maxResponseTime")
    def max_response_time(self) -> pulumi.Output[Optional[int]]:
        """
        The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
        """
        return pulumi.get(self, "max_response_time")

    @property
    @pulumi.getter
    def muted(self) -> pulumi.Output[Optional[bool]]:
        """
        Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
        """
        return pulumi.get(self, "muted")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the monitor.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateLocations")
    def private_locations(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of one or more private locations slugs.
        """
        return pulumi.get(self, "private_locations")

    @property
    @pulumi.getter
    def request(self) -> pulumi.Output['outputs.UrlMonitorRequest']:
        """
        The parameters of the HTTP request.
        """
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> pulumi.Output['outputs.UrlMonitorRetryStrategy']:
        """
        A strategy for retrying failed monitor runs.
        """
        return pulumi.get(self, "retry_strategy")

    @property
    @pulumi.getter(name="runParallel")
    def run_parallel(self) -> pulumi.Output[Optional[bool]]:
        """
        Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
        """
        return pulumi.get(self, "run_parallel")

    @property
    @pulumi.getter(name="shouldFail")
    def should_fail(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
        """
        return pulumi.get(self, "should_fail")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of tags for organizing and filtering checks and monitors.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="useGlobalAlertSettings")
    def use_global_alert_settings(self) -> pulumi.Output[Optional[bool]]:
        """
        When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
        """
        return pulumi.get(self, "use_global_alert_settings")

