# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AlertChannelEmail',
    'AlertChannelOpsgenie',
    'AlertChannelPagerduty',
    'AlertChannelSlack',
    'AlertChannelSms',
    'AlertChannelWebhook',
    'CheckAlertChannelSubscription',
    'CheckAlertSettings',
    'CheckAlertSettingsReminder',
    'CheckAlertSettingsRunBasedEscalation',
    'CheckAlertSettingsSslCertificate',
    'CheckAlertSettingsTimeBasedEscalation',
    'CheckGroupAlertChannelSubscription',
    'CheckGroupAlertSettings',
    'CheckGroupAlertSettingsReminder',
    'CheckGroupAlertSettingsRunBasedEscalation',
    'CheckGroupAlertSettingsSslCertificate',
    'CheckGroupAlertSettingsTimeBasedEscalation',
    'CheckGroupApiCheckDefaults',
    'CheckGroupApiCheckDefaultsAssertion',
    'CheckGroupApiCheckDefaultsBasicAuth',
    'CheckRequest',
    'CheckRequestAssertion',
    'CheckRequestBasicAuth',
]

@pulumi.output_type
class AlertChannelEmail(dict):
    def __init__(__self__, *,
                 address: str):
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")


@pulumi.output_type
class AlertChannelOpsgenie(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKey":
            suggest = "api_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertChannelOpsgenie. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertChannelOpsgenie.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertChannelOpsgenie.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key: str,
                 name: str,
                 priority: str,
                 region: str):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> str:
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> str:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class AlertChannelPagerduty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceKey":
            suggest = "service_key"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertChannelPagerduty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertChannelPagerduty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertChannelPagerduty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_key: str,
                 account: Optional[str] = None,
                 service_name: Optional[str] = None):
        pulumi.set(__self__, "service_key", service_key)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceKey")
    def service_key(self) -> str:
        return pulumi.get(self, "service_key")

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class AlertChannelSlack(dict):
    def __init__(__self__, *,
                 channel: str,
                 url: str):
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def channel(self) -> str:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class AlertChannelSms(dict):
    def __init__(__self__, *,
                 name: str,
                 number: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> str:
        return pulumi.get(self, "number")


@pulumi.output_type
class AlertChannelWebhook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queryParameters":
            suggest = "query_parameters"
        elif key == "webhookSecret":
            suggest = "webhook_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertChannelWebhook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertChannelWebhook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertChannelWebhook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 url: str,
                 headers: Optional[Mapping[str, Any]] = None,
                 method: Optional[str] = None,
                 query_parameters: Optional[Mapping[str, Any]] = None,
                 template: Optional[str] = None,
                 webhook_secret: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if query_parameters is not None:
            pulumi.set(__self__, "query_parameters", query_parameters)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if webhook_secret is not None:
            pulumi.set(__self__, "webhook_secret", webhook_secret)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "query_parameters")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="webhookSecret")
    def webhook_secret(self) -> Optional[str]:
        return pulumi.get(self, "webhook_secret")


@pulumi.output_type
class CheckAlertChannelSubscription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelId":
            suggest = "channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckAlertChannelSubscription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckAlertChannelSubscription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckAlertChannelSubscription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activated: bool,
                 channel_id: int):
        pulumi.set(__self__, "activated", activated)
        pulumi.set(__self__, "channel_id", channel_id)

    @property
    @pulumi.getter
    def activated(self) -> bool:
        return pulumi.get(self, "activated")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> int:
        return pulumi.get(self, "channel_id")


@pulumi.output_type
class CheckAlertSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "escalationType":
            suggest = "escalation_type"
        elif key == "runBasedEscalations":
            suggest = "run_based_escalations"
        elif key == "sslCertificates":
            suggest = "ssl_certificates"
        elif key == "timeBasedEscalations":
            suggest = "time_based_escalations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckAlertSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckAlertSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckAlertSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 escalation_type: Optional[str] = None,
                 reminders: Optional[Sequence['outputs.CheckAlertSettingsReminder']] = None,
                 run_based_escalations: Optional[Sequence['outputs.CheckAlertSettingsRunBasedEscalation']] = None,
                 ssl_certificates: Optional[Sequence['outputs.CheckAlertSettingsSslCertificate']] = None,
                 time_based_escalations: Optional[Sequence['outputs.CheckAlertSettingsTimeBasedEscalation']] = None):
        if escalation_type is not None:
            pulumi.set(__self__, "escalation_type", escalation_type)
        if reminders is not None:
            pulumi.set(__self__, "reminders", reminders)
        if run_based_escalations is not None:
            pulumi.set(__self__, "run_based_escalations", run_based_escalations)
        if ssl_certificates is not None:
            pulumi.set(__self__, "ssl_certificates", ssl_certificates)
        if time_based_escalations is not None:
            pulumi.set(__self__, "time_based_escalations", time_based_escalations)

    @property
    @pulumi.getter(name="escalationType")
    def escalation_type(self) -> Optional[str]:
        return pulumi.get(self, "escalation_type")

    @property
    @pulumi.getter
    def reminders(self) -> Optional[Sequence['outputs.CheckAlertSettingsReminder']]:
        return pulumi.get(self, "reminders")

    @property
    @pulumi.getter(name="runBasedEscalations")
    def run_based_escalations(self) -> Optional[Sequence['outputs.CheckAlertSettingsRunBasedEscalation']]:
        return pulumi.get(self, "run_based_escalations")

    @property
    @pulumi.getter(name="sslCertificates")
    def ssl_certificates(self) -> Optional[Sequence['outputs.CheckAlertSettingsSslCertificate']]:
        return pulumi.get(self, "ssl_certificates")

    @property
    @pulumi.getter(name="timeBasedEscalations")
    def time_based_escalations(self) -> Optional[Sequence['outputs.CheckAlertSettingsTimeBasedEscalation']]:
        return pulumi.get(self, "time_based_escalations")


@pulumi.output_type
class CheckAlertSettingsReminder(dict):
    def __init__(__self__, *,
                 amount: Optional[int] = None,
                 interval: Optional[int] = None):
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def amount(self) -> Optional[int]:
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class CheckAlertSettingsRunBasedEscalation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedRunThreshold":
            suggest = "failed_run_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckAlertSettingsRunBasedEscalation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckAlertSettingsRunBasedEscalation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckAlertSettingsRunBasedEscalation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failed_run_threshold: Optional[int] = None):
        if failed_run_threshold is not None:
            pulumi.set(__self__, "failed_run_threshold", failed_run_threshold)

    @property
    @pulumi.getter(name="failedRunThreshold")
    def failed_run_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failed_run_threshold")


@pulumi.output_type
class CheckAlertSettingsSslCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertThreshold":
            suggest = "alert_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckAlertSettingsSslCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckAlertSettingsSslCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckAlertSettingsSslCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_threshold: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if alert_threshold is not None:
            pulumi.set(__self__, "alert_threshold", alert_threshold)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="alertThreshold")
    def alert_threshold(self) -> Optional[int]:
        return pulumi.get(self, "alert_threshold")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class CheckAlertSettingsTimeBasedEscalation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minutesFailingThreshold":
            suggest = "minutes_failing_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckAlertSettingsTimeBasedEscalation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckAlertSettingsTimeBasedEscalation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckAlertSettingsTimeBasedEscalation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minutes_failing_threshold: Optional[int] = None):
        if minutes_failing_threshold is not None:
            pulumi.set(__self__, "minutes_failing_threshold", minutes_failing_threshold)

    @property
    @pulumi.getter(name="minutesFailingThreshold")
    def minutes_failing_threshold(self) -> Optional[int]:
        return pulumi.get(self, "minutes_failing_threshold")


@pulumi.output_type
class CheckGroupAlertChannelSubscription(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelId":
            suggest = "channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckGroupAlertChannelSubscription. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckGroupAlertChannelSubscription.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckGroupAlertChannelSubscription.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 activated: bool,
                 channel_id: int):
        pulumi.set(__self__, "activated", activated)
        pulumi.set(__self__, "channel_id", channel_id)

    @property
    @pulumi.getter
    def activated(self) -> bool:
        return pulumi.get(self, "activated")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> int:
        return pulumi.get(self, "channel_id")


@pulumi.output_type
class CheckGroupAlertSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "escalationType":
            suggest = "escalation_type"
        elif key == "runBasedEscalations":
            suggest = "run_based_escalations"
        elif key == "sslCertificates":
            suggest = "ssl_certificates"
        elif key == "timeBasedEscalations":
            suggest = "time_based_escalations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckGroupAlertSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckGroupAlertSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckGroupAlertSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 escalation_type: Optional[str] = None,
                 reminders: Optional[Sequence['outputs.CheckGroupAlertSettingsReminder']] = None,
                 run_based_escalations: Optional[Sequence['outputs.CheckGroupAlertSettingsRunBasedEscalation']] = None,
                 ssl_certificates: Optional[Sequence['outputs.CheckGroupAlertSettingsSslCertificate']] = None,
                 time_based_escalations: Optional[Sequence['outputs.CheckGroupAlertSettingsTimeBasedEscalation']] = None):
        if escalation_type is not None:
            pulumi.set(__self__, "escalation_type", escalation_type)
        if reminders is not None:
            pulumi.set(__self__, "reminders", reminders)
        if run_based_escalations is not None:
            pulumi.set(__self__, "run_based_escalations", run_based_escalations)
        if ssl_certificates is not None:
            pulumi.set(__self__, "ssl_certificates", ssl_certificates)
        if time_based_escalations is not None:
            pulumi.set(__self__, "time_based_escalations", time_based_escalations)

    @property
    @pulumi.getter(name="escalationType")
    def escalation_type(self) -> Optional[str]:
        return pulumi.get(self, "escalation_type")

    @property
    @pulumi.getter
    def reminders(self) -> Optional[Sequence['outputs.CheckGroupAlertSettingsReminder']]:
        return pulumi.get(self, "reminders")

    @property
    @pulumi.getter(name="runBasedEscalations")
    def run_based_escalations(self) -> Optional[Sequence['outputs.CheckGroupAlertSettingsRunBasedEscalation']]:
        return pulumi.get(self, "run_based_escalations")

    @property
    @pulumi.getter(name="sslCertificates")
    def ssl_certificates(self) -> Optional[Sequence['outputs.CheckGroupAlertSettingsSslCertificate']]:
        return pulumi.get(self, "ssl_certificates")

    @property
    @pulumi.getter(name="timeBasedEscalations")
    def time_based_escalations(self) -> Optional[Sequence['outputs.CheckGroupAlertSettingsTimeBasedEscalation']]:
        return pulumi.get(self, "time_based_escalations")


@pulumi.output_type
class CheckGroupAlertSettingsReminder(dict):
    def __init__(__self__, *,
                 amount: Optional[int] = None,
                 interval: Optional[int] = None):
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def amount(self) -> Optional[int]:
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")


@pulumi.output_type
class CheckGroupAlertSettingsRunBasedEscalation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failedRunThreshold":
            suggest = "failed_run_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckGroupAlertSettingsRunBasedEscalation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckGroupAlertSettingsRunBasedEscalation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckGroupAlertSettingsRunBasedEscalation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failed_run_threshold: Optional[int] = None):
        if failed_run_threshold is not None:
            pulumi.set(__self__, "failed_run_threshold", failed_run_threshold)

    @property
    @pulumi.getter(name="failedRunThreshold")
    def failed_run_threshold(self) -> Optional[int]:
        return pulumi.get(self, "failed_run_threshold")


@pulumi.output_type
class CheckGroupAlertSettingsSslCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alertThreshold":
            suggest = "alert_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckGroupAlertSettingsSslCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckGroupAlertSettingsSslCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckGroupAlertSettingsSslCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alert_threshold: Optional[int] = None,
                 enabled: Optional[bool] = None):
        if alert_threshold is not None:
            pulumi.set(__self__, "alert_threshold", alert_threshold)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="alertThreshold")
    def alert_threshold(self) -> Optional[int]:
        return pulumi.get(self, "alert_threshold")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class CheckGroupAlertSettingsTimeBasedEscalation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minutesFailingThreshold":
            suggest = "minutes_failing_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckGroupAlertSettingsTimeBasedEscalation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckGroupAlertSettingsTimeBasedEscalation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckGroupAlertSettingsTimeBasedEscalation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minutes_failing_threshold: Optional[int] = None):
        if minutes_failing_threshold is not None:
            pulumi.set(__self__, "minutes_failing_threshold", minutes_failing_threshold)

    @property
    @pulumi.getter(name="minutesFailingThreshold")
    def minutes_failing_threshold(self) -> Optional[int]:
        return pulumi.get(self, "minutes_failing_threshold")


@pulumi.output_type
class CheckGroupApiCheckDefaults(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"
        elif key == "queryParameters":
            suggest = "query_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckGroupApiCheckDefaults. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckGroupApiCheckDefaults.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckGroupApiCheckDefaults.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assertions: Optional[Sequence['outputs.CheckGroupApiCheckDefaultsAssertion']] = None,
                 basic_auth: Optional['outputs.CheckGroupApiCheckDefaultsBasicAuth'] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 query_parameters: Optional[Mapping[str, Any]] = None,
                 url: Optional[str] = None):
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if query_parameters is not None:
            pulumi.set(__self__, "query_parameters", query_parameters)
        if url is None:
            url = ''
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def assertions(self) -> Optional[Sequence['outputs.CheckGroupApiCheckDefaultsAssertion']]:
        return pulumi.get(self, "assertions")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.CheckGroupApiCheckDefaultsBasicAuth']:
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "query_parameters")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class CheckGroupApiCheckDefaultsAssertion(dict):
    def __init__(__self__, *,
                 comparison: str,
                 source: str,
                 target: str,
                 property: Optional[str] = None):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class CheckGroupApiCheckDefaultsBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class CheckRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuth":
            suggest = "basic_auth"
        elif key == "bodyType":
            suggest = "body_type"
        elif key == "followRedirects":
            suggest = "follow_redirects"
        elif key == "queryParameters":
            suggest = "query_parameters"
        elif key == "skipSsl":
            suggest = "skip_ssl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CheckRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CheckRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CheckRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 assertions: Optional[Sequence['outputs.CheckRequestAssertion']] = None,
                 basic_auth: Optional['outputs.CheckRequestBasicAuth'] = None,
                 body: Optional[str] = None,
                 body_type: Optional[str] = None,
                 follow_redirects: Optional[bool] = None,
                 headers: Optional[Mapping[str, Any]] = None,
                 method: Optional[str] = None,
                 query_parameters: Optional[Mapping[str, Any]] = None,
                 skip_ssl: Optional[bool] = None):
        pulumi.set(__self__, "url", url)
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if basic_auth is not None:
            pulumi.set(__self__, "basic_auth", basic_auth)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if body_type is not None:
            pulumi.set(__self__, "body_type", body_type)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if query_parameters is not None:
            pulumi.set(__self__, "query_parameters", query_parameters)
        if skip_ssl is not None:
            pulumi.set(__self__, "skip_ssl", skip_ssl)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def assertions(self) -> Optional[Sequence['outputs.CheckRequestAssertion']]:
        return pulumi.get(self, "assertions")

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> Optional['outputs.CheckRequestBasicAuth']:
        return pulumi.get(self, "basic_auth")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="bodyType")
    def body_type(self) -> Optional[str]:
        return pulumi.get(self, "body_type")

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[bool]:
        return pulumi.get(self, "follow_redirects")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="queryParameters")
    def query_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "query_parameters")

    @property
    @pulumi.getter(name="skipSsl")
    def skip_ssl(self) -> Optional[bool]:
        return pulumi.get(self, "skip_ssl")


@pulumi.output_type
class CheckRequestAssertion(dict):
    def __init__(__self__, *,
                 comparison: str,
                 source: str,
                 property: Optional[str] = None,
                 target: Optional[str] = None):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "source", source)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def comparison(self) -> str:
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def property(self) -> Optional[str]:
        return pulumi.get(self, "property")


@pulumi.output_type
class CheckRequestBasicAuth(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


