# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ClientCertificateArgs', 'ClientCertificate']

@pulumi.input_type
class ClientCertificateArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input[str],
                 host: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 passphrase: Optional[pulumi.Input[str]] = None,
                 trusted_ca: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ClientCertificate resource.
        :param pulumi.Input[str] certificate: The client certificate in PEM format.
        :param pulumi.Input[str] host: The host domain that the certificate should be used for.
        :param pulumi.Input[str] private_key: The private key for the certificate in PEM format.
        :param pulumi.Input[str] passphrase: Passphrase for the private key.
        :param pulumi.Input[str] trusted_ca: PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "private_key", private_key)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if trusted_ca is not None:
            pulumi.set(__self__, "trusted_ca", trusted_ca)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input[str]:
        """
        The client certificate in PEM format.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The host domain that the certificate should be used for.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        """
        The private key for the certificate in PEM format.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for the private key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="trustedCa")
    def trusted_ca(self) -> Optional[pulumi.Input[str]]:
        """
        PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        return pulumi.get(self, "trusted_ca")

    @trusted_ca.setter
    def trusted_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted_ca", value)


@pulumi.input_type
class _ClientCertificateState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 trusted_ca: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClientCertificate resources.
        :param pulumi.Input[str] certificate: The client certificate in PEM format.
        :param pulumi.Input[str] host: The host domain that the certificate should be used for.
        :param pulumi.Input[str] passphrase: Passphrase for the private key.
        :param pulumi.Input[str] private_key: The private key for the certificate in PEM format.
        :param pulumi.Input[str] trusted_ca: PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if passphrase is not None:
            pulumi.set(__self__, "passphrase", passphrase)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if trusted_ca is not None:
            pulumi.set(__self__, "trusted_ca", trusted_ca)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The client certificate in PEM format.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host domain that the certificate should be used for.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def passphrase(self) -> Optional[pulumi.Input[str]]:
        """
        Passphrase for the private key.
        """
        return pulumi.get(self, "passphrase")

    @passphrase.setter
    def passphrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "passphrase", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        The private key for the certificate in PEM format.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="trustedCa")
    def trusted_ca(self) -> Optional[pulumi.Input[str]]:
        """
        PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        return pulumi.get(self, "trusted_ca")

    @trusted_ca.setter
    def trusted_ca(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted_ca", value)


class ClientCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 trusted_ca: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use client certificates to authenticate your API checks to APIs that require mutual TLS (mTLS) authentication, or any other authentication scheme where the requester needs to provide a certificate.

        Each client certificate is specific to a domain name, e.g. `acme.com` and will be used automatically by any API checks targeting that domain.

        Changing the value of any attribute forces a new resource to be created.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: The client certificate in PEM format.
        :param pulumi.Input[str] host: The host domain that the certificate should be used for.
        :param pulumi.Input[str] passphrase: Passphrase for the private key.
        :param pulumi.Input[str] private_key: The private key for the certificate in PEM format.
        :param pulumi.Input[str] trusted_ca: PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClientCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use client certificates to authenticate your API checks to APIs that require mutual TLS (mTLS) authentication, or any other authentication scheme where the requester needs to provide a certificate.

        Each client certificate is specific to a domain name, e.g. `acme.com` and will be used automatically by any API checks targeting that domain.

        Changing the value of any attribute forces a new resource to be created.

        :param str resource_name: The name of the resource.
        :param ClientCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClientCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 passphrase: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 trusted_ca: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClientCertificateArgs.__new__(ClientCertificateArgs)

            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = certificate
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["passphrase"] = None if passphrase is None else pulumi.Output.secret(passphrase)
            if private_key is None and not opts.urn:
                raise TypeError("Missing required property 'private_key'")
            __props__.__dict__["private_key"] = private_key
            __props__.__dict__["trusted_ca"] = trusted_ca
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["passphrase"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ClientCertificate, __self__).__init__(
            'checkly:index/clientCertificate:ClientCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            passphrase: Optional[pulumi.Input[str]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            trusted_ca: Optional[pulumi.Input[str]] = None) -> 'ClientCertificate':
        """
        Get an existing ClientCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate: The client certificate in PEM format.
        :param pulumi.Input[str] host: The host domain that the certificate should be used for.
        :param pulumi.Input[str] passphrase: Passphrase for the private key.
        :param pulumi.Input[str] private_key: The private key for the certificate in PEM format.
        :param pulumi.Input[str] trusted_ca: PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClientCertificateState.__new__(_ClientCertificateState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["host"] = host
        __props__.__dict__["passphrase"] = passphrase
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["trusted_ca"] = trusted_ca
        return ClientCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output[str]:
        """
        The client certificate in PEM format.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The host domain that the certificate should be used for.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def passphrase(self) -> pulumi.Output[Optional[str]]:
        """
        Passphrase for the private key.
        """
        return pulumi.get(self, "passphrase")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[str]:
        """
        The private key for the certificate in PEM format.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="trustedCa")
    def trusted_ca(self) -> pulumi.Output[Optional[str]]:
        """
        PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
        """
        return pulumi.get(self, "trusted_ca")

