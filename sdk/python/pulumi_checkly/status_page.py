# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StatusPageArgs', 'StatusPage']

@pulumi.input_type
class StatusPageArgs:
    def __init__(__self__, *,
                 cards: pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]],
                 url: pulumi.Input[str],
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_theme: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_to: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StatusPage resource.
        :param pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]] cards: A list of cards to include on the status page.
        :param pulumi.Input[str] url: The URL of the status page.
        :param pulumi.Input[str] custom_domain: A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        :param pulumi.Input[str] default_theme: Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        :param pulumi.Input[str] favicon: A URL to an image file to use as the favicon of the status page.
        :param pulumi.Input[str] logo: A URL to an image file to use as the logo for the status page.
        :param pulumi.Input[str] name: The name of the status page.
        :param pulumi.Input[str] redirect_to: The URL the user should be redirected to when clicking the logo.
        """
        pulumi.set(__self__, "cards", cards)
        pulumi.set(__self__, "url", url)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if default_theme is not None:
            pulumi.set(__self__, "default_theme", default_theme)
        if favicon is not None:
            pulumi.set(__self__, "favicon", favicon)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_to is not None:
            pulumi.set(__self__, "redirect_to", redirect_to)

    @property
    @pulumi.getter
    def cards(self) -> pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]]:
        """
        A list of cards to include on the status page.
        """
        return pulumi.get(self, "cards")

    @cards.setter
    def cards(self, value: pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]]):
        pulumi.set(self, "cards", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the status page.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="defaultTheme")
    def default_theme(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        """
        return pulumi.get(self, "default_theme")

    @default_theme.setter
    def default_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_theme", value)

    @property
    @pulumi.getter
    def favicon(self) -> Optional[pulumi.Input[str]]:
        """
        A URL to an image file to use as the favicon of the status page.
        """
        return pulumi.get(self, "favicon")

    @favicon.setter
    def favicon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favicon", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        A URL to an image file to use as the logo for the status page.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the status page.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectTo")
    def redirect_to(self) -> Optional[pulumi.Input[str]]:
        """
        The URL the user should be redirected to when clicking the logo.
        """
        return pulumi.get(self, "redirect_to")

    @redirect_to.setter
    def redirect_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_to", value)


@pulumi.input_type
class _StatusPageState:
    def __init__(__self__, *,
                 cards: Optional[pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_theme: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_to: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StatusPage resources.
        :param pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]] cards: A list of cards to include on the status page.
        :param pulumi.Input[str] custom_domain: A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        :param pulumi.Input[str] default_theme: Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        :param pulumi.Input[str] favicon: A URL to an image file to use as the favicon of the status page.
        :param pulumi.Input[str] logo: A URL to an image file to use as the logo for the status page.
        :param pulumi.Input[str] name: The name of the status page.
        :param pulumi.Input[str] redirect_to: The URL the user should be redirected to when clicking the logo.
        :param pulumi.Input[str] url: The URL of the status page.
        """
        if cards is not None:
            pulumi.set(__self__, "cards", cards)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if default_theme is not None:
            pulumi.set(__self__, "default_theme", default_theme)
        if favicon is not None:
            pulumi.set(__self__, "favicon", favicon)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_to is not None:
            pulumi.set(__self__, "redirect_to", redirect_to)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def cards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]]]:
        """
        A list of cards to include on the status page.
        """
        return pulumi.get(self, "cards")

    @cards.setter
    def cards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StatusPageCardArgs']]]]):
        pulumi.set(self, "cards", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="defaultTheme")
    def default_theme(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        """
        return pulumi.get(self, "default_theme")

    @default_theme.setter
    def default_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_theme", value)

    @property
    @pulumi.getter
    def favicon(self) -> Optional[pulumi.Input[str]]:
        """
        A URL to an image file to use as the favicon of the status page.
        """
        return pulumi.get(self, "favicon")

    @favicon.setter
    def favicon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "favicon", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input[str]]:
        """
        A URL to an image file to use as the logo for the status page.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logo", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the status page.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectTo")
    def redirect_to(self) -> Optional[pulumi.Input[str]]:
        """
        The URL the user should be redirected to when clicking the logo.
        """
        return pulumi.get(self, "redirect_to")

    @redirect_to.setter
    def redirect_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_to", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the status page.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class StatusPage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StatusPageCardArgs', 'StatusPageCardArgsDict']]]]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_theme: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_to: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Checkly status pages allow you to easily communicate the uptime and health of your applications and services to your customers.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_checkly as checkly

        api = checkly.StatusPageService("api", name="API")
        database = checkly.StatusPageService("database", name="Database")
        example = checkly.StatusPage("example",
            name="Example Application",
            url="my-example-status-page",
            default_theme="DARK",
            cards=[{
                "name": "Services",
                "service_attachments": [
                    {
                        "service_id": api.id,
                    },
                    {
                        "service_id": database.id,
                    },
                ],
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StatusPageCardArgs', 'StatusPageCardArgsDict']]]] cards: A list of cards to include on the status page.
        :param pulumi.Input[str] custom_domain: A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        :param pulumi.Input[str] default_theme: Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        :param pulumi.Input[str] favicon: A URL to an image file to use as the favicon of the status page.
        :param pulumi.Input[str] logo: A URL to an image file to use as the logo for the status page.
        :param pulumi.Input[str] name: The name of the status page.
        :param pulumi.Input[str] redirect_to: The URL the user should be redirected to when clicking the logo.
        :param pulumi.Input[str] url: The URL of the status page.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StatusPageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Checkly status pages allow you to easily communicate the uptime and health of your applications and services to your customers.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_checkly as checkly

        api = checkly.StatusPageService("api", name="API")
        database = checkly.StatusPageService("database", name="Database")
        example = checkly.StatusPage("example",
            name="Example Application",
            url="my-example-status-page",
            default_theme="DARK",
            cards=[{
                "name": "Services",
                "service_attachments": [
                    {
                        "service_id": api.id,
                    },
                    {
                        "service_id": database.id,
                    },
                ],
            }])
        ```

        :param str resource_name: The name of the resource.
        :param StatusPageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StatusPageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StatusPageCardArgs', 'StatusPageCardArgsDict']]]]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_theme: Optional[pulumi.Input[str]] = None,
                 favicon: Optional[pulumi.Input[str]] = None,
                 logo: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_to: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StatusPageArgs.__new__(StatusPageArgs)

            if cards is None and not opts.urn:
                raise TypeError("Missing required property 'cards'")
            __props__.__dict__["cards"] = cards
            __props__.__dict__["custom_domain"] = custom_domain
            __props__.__dict__["default_theme"] = default_theme
            __props__.__dict__["favicon"] = favicon
            __props__.__dict__["logo"] = logo
            __props__.__dict__["name"] = name
            __props__.__dict__["redirect_to"] = redirect_to
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        super(StatusPage, __self__).__init__(
            'checkly:index/statusPage:StatusPage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cards: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StatusPageCardArgs', 'StatusPageCardArgsDict']]]]] = None,
            custom_domain: Optional[pulumi.Input[str]] = None,
            default_theme: Optional[pulumi.Input[str]] = None,
            favicon: Optional[pulumi.Input[str]] = None,
            logo: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            redirect_to: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'StatusPage':
        """
        Get an existing StatusPage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['StatusPageCardArgs', 'StatusPageCardArgsDict']]]] cards: A list of cards to include on the status page.
        :param pulumi.Input[str] custom_domain: A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        :param pulumi.Input[str] default_theme: Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        :param pulumi.Input[str] favicon: A URL to an image file to use as the favicon of the status page.
        :param pulumi.Input[str] logo: A URL to an image file to use as the logo for the status page.
        :param pulumi.Input[str] name: The name of the status page.
        :param pulumi.Input[str] redirect_to: The URL the user should be redirected to when clicking the logo.
        :param pulumi.Input[str] url: The URL of the status page.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StatusPageState.__new__(_StatusPageState)

        __props__.__dict__["cards"] = cards
        __props__.__dict__["custom_domain"] = custom_domain
        __props__.__dict__["default_theme"] = default_theme
        __props__.__dict__["favicon"] = favicon
        __props__.__dict__["logo"] = logo
        __props__.__dict__["name"] = name
        __props__.__dict__["redirect_to"] = redirect_to
        __props__.__dict__["url"] = url
        return StatusPage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cards(self) -> pulumi.Output[Sequence['outputs.StatusPageCard']]:
        """
        A list of cards to include on the status page.
        """
        return pulumi.get(self, "cards")

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> pulumi.Output[Optional[str]]:
        """
        A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
        """
        return pulumi.get(self, "custom_domain")

    @property
    @pulumi.getter(name="defaultTheme")
    def default_theme(self) -> pulumi.Output[Optional[str]]:
        """
        Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
        """
        return pulumi.get(self, "default_theme")

    @property
    @pulumi.getter
    def favicon(self) -> pulumi.Output[Optional[str]]:
        """
        A URL to an image file to use as the favicon of the status page.
        """
        return pulumi.get(self, "favicon")

    @property
    @pulumi.getter
    def logo(self) -> pulumi.Output[Optional[str]]:
        """
        A URL to an image file to use as the logo for the status page.
        """
        return pulumi.get(self, "logo")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the status page.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectTo")
    def redirect_to(self) -> pulumi.Output[Optional[str]]:
        """
        The URL the user should be redirected to when clicking the logo.
        """
        return pulumi.get(self, "redirect_to")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the status page.
        """
        return pulumi.get(self, "url")

