// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a URL Monitor to check HTTP endpoint availability and response times.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const example_url_monitor = new checkly.UrlMonitor("example-url-monitor", {
 *     name: "Example URL monitor",
 *     activated: true,
 *     frequency: 2,
 *     useGlobalAlertSettings: true,
 *     locations: ["eu-west-1"],
 *     request: {
 *         url: "https://welcome.checklyhq.com",
 *         assertions: [{
 *             source: "STATUS_CODE",
 *             comparison: "EQUALS",
 *             target: "200",
 *         }],
 *     },
 * });
 * ```
 */
export class UrlMonitor extends pulumi.CustomResource {
    /**
     * Get an existing UrlMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UrlMonitorState, opts?: pulumi.CustomResourceOptions): UrlMonitor {
        return new UrlMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/urlMonitor:UrlMonitor';

    /**
     * Returns true if the given object is an instance of UrlMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UrlMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UrlMonitor.__pulumiType;
    }

    /**
     * Determines whether the monitor will run periodically or not after being deployed.
     */
    public readonly activated!: pulumi.Output<boolean>;
    /**
     * An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
     */
    public readonly alertChannelSubscriptions!: pulumi.Output<outputs.UrlMonitorAlertChannelSubscription[] | undefined>;
    /**
     * Determines the alert escalation policy for the monitor.
     */
    public readonly alertSettings!: pulumi.Output<outputs.UrlMonitorAlertSettings>;
    /**
     * The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
     */
    public readonly degradedResponseTime!: pulumi.Output<number | undefined>;
    /**
     * How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
     */
    public readonly frequency!: pulumi.Output<number>;
    /**
     * To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
     */
    public readonly frequencyOffset!: pulumi.Output<number | undefined>;
    /**
     * The ID of the check group that this monitor is part of.
     */
    public readonly groupId!: pulumi.Output<number | undefined>;
    /**
     * The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
     */
    public readonly groupOrder!: pulumi.Output<number | undefined>;
    /**
     * An array of one or more data center locations where to run the this monitor.
     */
    public readonly locations!: pulumi.Output<string[] | undefined>;
    /**
     * The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
     */
    public readonly maxResponseTime!: pulumi.Output<number | undefined>;
    /**
     * Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
     */
    public readonly muted!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the monitor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An array of one or more private locations slugs.
     */
    public readonly privateLocations!: pulumi.Output<string[] | undefined>;
    /**
     * The parameters of the HTTP request.
     */
    public readonly request!: pulumi.Output<outputs.UrlMonitorRequest>;
    /**
     * A strategy for retrying failed monitor runs.
     */
    public readonly retryStrategy!: pulumi.Output<outputs.UrlMonitorRetryStrategy>;
    /**
     * Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
     */
    public readonly runParallel!: pulumi.Output<boolean | undefined>;
    /**
     * Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
     */
    public readonly shouldFail!: pulumi.Output<boolean | undefined>;
    /**
     * A list of tags for organizing and filtering checks and monitors.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
     */
    public readonly useGlobalAlertSettings!: pulumi.Output<boolean | undefined>;

    /**
     * Create a UrlMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UrlMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UrlMonitorArgs | UrlMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UrlMonitorState | undefined;
            resourceInputs["activated"] = state ? state.activated : undefined;
            resourceInputs["alertChannelSubscriptions"] = state ? state.alertChannelSubscriptions : undefined;
            resourceInputs["alertSettings"] = state ? state.alertSettings : undefined;
            resourceInputs["degradedResponseTime"] = state ? state.degradedResponseTime : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["frequencyOffset"] = state ? state.frequencyOffset : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupOrder"] = state ? state.groupOrder : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["maxResponseTime"] = state ? state.maxResponseTime : undefined;
            resourceInputs["muted"] = state ? state.muted : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateLocations"] = state ? state.privateLocations : undefined;
            resourceInputs["request"] = state ? state.request : undefined;
            resourceInputs["retryStrategy"] = state ? state.retryStrategy : undefined;
            resourceInputs["runParallel"] = state ? state.runParallel : undefined;
            resourceInputs["shouldFail"] = state ? state.shouldFail : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useGlobalAlertSettings"] = state ? state.useGlobalAlertSettings : undefined;
        } else {
            const args = argsOrState as UrlMonitorArgs | undefined;
            if ((!args || args.activated === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activated'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.request === undefined) && !opts.urn) {
                throw new Error("Missing required property 'request'");
            }
            resourceInputs["activated"] = args ? args.activated : undefined;
            resourceInputs["alertChannelSubscriptions"] = args ? args.alertChannelSubscriptions : undefined;
            resourceInputs["alertSettings"] = args ? args.alertSettings : undefined;
            resourceInputs["degradedResponseTime"] = args ? args.degradedResponseTime : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["frequencyOffset"] = args ? args.frequencyOffset : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["groupOrder"] = args ? args.groupOrder : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["maxResponseTime"] = args ? args.maxResponseTime : undefined;
            resourceInputs["muted"] = args ? args.muted : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateLocations"] = args ? args.privateLocations : undefined;
            resourceInputs["request"] = args ? args.request : undefined;
            resourceInputs["retryStrategy"] = args ? args.retryStrategy : undefined;
            resourceInputs["runParallel"] = args ? args.runParallel : undefined;
            resourceInputs["shouldFail"] = args ? args.shouldFail : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useGlobalAlertSettings"] = args ? args.useGlobalAlertSettings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UrlMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UrlMonitor resources.
 */
export interface UrlMonitorState {
    /**
     * Determines whether the monitor will run periodically or not after being deployed.
     */
    activated?: pulumi.Input<boolean>;
    /**
     * An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
     */
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.UrlMonitorAlertChannelSubscription>[]>;
    /**
     * Determines the alert escalation policy for the monitor.
     */
    alertSettings?: pulumi.Input<inputs.UrlMonitorAlertSettings>;
    /**
     * The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
     */
    degradedResponseTime?: pulumi.Input<number>;
    /**
     * How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
     */
    frequency?: pulumi.Input<number>;
    /**
     * To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
     */
    frequencyOffset?: pulumi.Input<number>;
    /**
     * The ID of the check group that this monitor is part of.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
     */
    groupOrder?: pulumi.Input<number>;
    /**
     * An array of one or more data center locations where to run the this monitor.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
     */
    maxResponseTime?: pulumi.Input<number>;
    /**
     * Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of one or more private locations slugs.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The parameters of the HTTP request.
     */
    request?: pulumi.Input<inputs.UrlMonitorRequest>;
    /**
     * A strategy for retrying failed monitor runs.
     */
    retryStrategy?: pulumi.Input<inputs.UrlMonitorRetryStrategy>;
    /**
     * Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
     */
    runParallel?: pulumi.Input<boolean>;
    /**
     * Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
     */
    shouldFail?: pulumi.Input<boolean>;
    /**
     * A list of tags for organizing and filtering checks and monitors.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a UrlMonitor resource.
 */
export interface UrlMonitorArgs {
    /**
     * Determines whether the monitor will run periodically or not after being deployed.
     */
    activated: pulumi.Input<boolean>;
    /**
     * An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your monitor, we won't be able to alert you.
     */
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.UrlMonitorAlertChannelSubscription>[]>;
    /**
     * Determines the alert escalation policy for the monitor.
     */
    alertSettings?: pulumi.Input<inputs.UrlMonitorAlertSettings>;
    /**
     * The response time in milliseconds where the monitor should be considered degraded. Possible values are between `0` and `30000`. (Default `3000`).
     */
    degradedResponseTime?: pulumi.Input<number>;
    /**
     * How often the monitor should run in minutes. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
     */
    frequency: pulumi.Input<number>;
    /**
     * To create a high frequency monitor, set `frequency` to `0` and `frequencyOffset` to `10`, `20`, or `30`.
     */
    frequencyOffset?: pulumi.Input<number>;
    /**
     * The ID of the check group that this monitor is part of.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The position of the monitor in the check group. It determines in what order checks and monitors are run when a group is triggered from the API or from CI/CD.
     */
    groupOrder?: pulumi.Input<number>;
    /**
     * An array of one or more data center locations where to run the this monitor.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The response time in milliseconds where the monitor should be considered failing. Possible values are between `0` and `30000`. (Default `5000`).
     */
    maxResponseTime?: pulumi.Input<number>;
    /**
     * Determines if any notifications will be sent out when the monitor fails and/or recovers. (Default `false`).
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the monitor.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of one or more private locations slugs.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The parameters of the HTTP request.
     */
    request: pulumi.Input<inputs.UrlMonitorRequest>;
    /**
     * A strategy for retrying failed monitor runs.
     */
    retryStrategy?: pulumi.Input<inputs.UrlMonitorRetryStrategy>;
    /**
     * Determines whether the monitor should run on all selected locations in parallel or round-robin. (Default `false`).
     */
    runParallel?: pulumi.Input<boolean>;
    /**
     * Allows to invert the behaviour of when the monitor is considered to fail. (Default `false`).
     */
    shouldFail?: pulumi.Input<boolean>;
    /**
     * A list of tags for organizing and filtering checks and monitors.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this monitor. (Default `true`).
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}
