// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const location = new checkly.PrivateLocation("location", {
 *     name: "New Private Location",
 *     slugName: "new-private-location",
 * });
 * ```
 */
export class PrivateLocation extends pulumi.CustomResource {
    /**
     * Get an existing PrivateLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateLocationState, opts?: pulumi.CustomResourceOptions): PrivateLocation {
        return new PrivateLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/privateLocation:PrivateLocation';

    /**
     * Returns true if the given object is an instance of PrivateLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateLocation.__pulumiType;
    }

    /**
     * Icon assigned to the private location.
     */
    public readonly icon!: pulumi.Output<string | undefined>;
    /**
     * Private location API keys.
     */
    public /*out*/ readonly keys!: pulumi.Output<string[]>;
    /**
     * The private location name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Valid slug name.
     */
    public readonly slugName!: pulumi.Output<string>;

    /**
     * Create a PrivateLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateLocationArgs | PrivateLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateLocationState | undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slugName"] = state ? state.slugName : undefined;
        } else {
            const args = argsOrState as PrivateLocationArgs | undefined;
            if ((!args || args.slugName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slugName'");
            }
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slugName"] = args ? args.slugName : undefined;
            resourceInputs["keys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PrivateLocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivateLocation resources.
 */
export interface PrivateLocationState {
    /**
     * Icon assigned to the private location.
     */
    icon?: pulumi.Input<string>;
    /**
     * Private location API keys.
     */
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The private location name.
     */
    name?: pulumi.Input<string>;
    /**
     * Valid slug name.
     */
    slugName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrivateLocation resource.
 */
export interface PrivateLocationArgs {
    /**
     * Icon assigned to the private location.
     */
    icon?: pulumi.Input<string>;
    /**
     * The private location name.
     */
    name?: pulumi.Input<string>;
    /**
     * Valid slug name.
     */
    slugName: pulumi.Input<string>;
}
