// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const example_heartbeat = new checkly.HeartbeatCheck("example-heartbeat", {
 *     name: "Example heartbeat",
 *     activated: true,
 *     heartbeat: {
 *         period: 7,
 *         periodUnit: "days",
 *         grace: 1,
 *         graceUnit: "days",
 *     },
 *     useGlobalAlertSettings: true,
 * });
 * ```
 */
export class HeartbeatCheck extends pulumi.CustomResource {
    /**
     * Get an existing HeartbeatCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HeartbeatCheckState, opts?: pulumi.CustomResourceOptions): HeartbeatCheck {
        return new HeartbeatCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/heartbeatCheck:HeartbeatCheck';

    /**
     * Returns true if the given object is an instance of HeartbeatCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HeartbeatCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HeartbeatCheck.__pulumiType;
    }

    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    declare public readonly activated: pulumi.Output<boolean>;
    declare public readonly alertChannelSubscriptions: pulumi.Output<outputs.HeartbeatCheckAlertChannelSubscription[] | undefined>;
    declare public readonly alertSettings: pulumi.Output<outputs.HeartbeatCheckAlertSettings>;
    declare public readonly heartbeat: pulumi.Output<outputs.HeartbeatCheckHeartbeat>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    declare public readonly muted: pulumi.Output<boolean | undefined>;
    /**
     * The name of the check.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Create and resolve an incident based on the alert configuration. Useful for status page automation.
     */
    declare public readonly triggerIncident: pulumi.Output<outputs.HeartbeatCheckTriggerIncident | undefined>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    declare public readonly useGlobalAlertSettings: pulumi.Output<boolean | undefined>;

    /**
     * Create a HeartbeatCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HeartbeatCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HeartbeatCheckArgs | HeartbeatCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HeartbeatCheckState | undefined;
            resourceInputs["activated"] = state?.activated;
            resourceInputs["alertChannelSubscriptions"] = state?.alertChannelSubscriptions;
            resourceInputs["alertSettings"] = state?.alertSettings;
            resourceInputs["heartbeat"] = state?.heartbeat;
            resourceInputs["muted"] = state?.muted;
            resourceInputs["name"] = state?.name;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["triggerIncident"] = state?.triggerIncident;
            resourceInputs["useGlobalAlertSettings"] = state?.useGlobalAlertSettings;
        } else {
            const args = argsOrState as HeartbeatCheckArgs | undefined;
            if (args?.activated === undefined && !opts.urn) {
                throw new Error("Missing required property 'activated'");
            }
            if (args?.heartbeat === undefined && !opts.urn) {
                throw new Error("Missing required property 'heartbeat'");
            }
            resourceInputs["activated"] = args?.activated;
            resourceInputs["alertChannelSubscriptions"] = args?.alertChannelSubscriptions;
            resourceInputs["alertSettings"] = args?.alertSettings;
            resourceInputs["heartbeat"] = args?.heartbeat;
            resourceInputs["muted"] = args?.muted;
            resourceInputs["name"] = args?.name;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["triggerIncident"] = args?.triggerIncident;
            resourceInputs["useGlobalAlertSettings"] = args?.useGlobalAlertSettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HeartbeatCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HeartbeatCheck resources.
 */
export interface HeartbeatCheckState {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated?: pulumi.Input<boolean>;
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.HeartbeatCheckAlertSettings>;
    heartbeat?: pulumi.Input<inputs.HeartbeatCheckHeartbeat>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create and resolve an incident based on the alert configuration. Useful for status page automation.
     */
    triggerIncident?: pulumi.Input<inputs.HeartbeatCheckTriggerIncident>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a HeartbeatCheck resource.
 */
export interface HeartbeatCheckArgs {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated: pulumi.Input<boolean>;
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.HeartbeatCheckAlertSettings>;
    heartbeat: pulumi.Input<inputs.HeartbeatCheckHeartbeat>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create and resolve an incident based on the alert configuration. Useful for status page automation.
     */
    triggerIncident?: pulumi.Input<inputs.HeartbeatCheckTriggerIncident>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}
