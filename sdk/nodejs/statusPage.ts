// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Checkly status pages allow you to easily communicate the uptime and health of your applications and services to your customers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const api = new checkly.StatusPageService("api", {name: "API"});
 * const database = new checkly.StatusPageService("database", {name: "Database"});
 * const example = new checkly.StatusPage("example", {
 *     name: "Example Application",
 *     url: "my-example-status-page",
 *     defaultTheme: "DARK",
 *     cards: [{
 *         name: "Services",
 *         serviceAttachments: [
 *             {
 *                 serviceId: api.id,
 *             },
 *             {
 *                 serviceId: database.id,
 *             },
 *         ],
 *     }],
 * });
 * ```
 */
export class StatusPage extends pulumi.CustomResource {
    /**
     * Get an existing StatusPage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatusPageState, opts?: pulumi.CustomResourceOptions): StatusPage {
        return new StatusPage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/statusPage:StatusPage';

    /**
     * Returns true if the given object is an instance of StatusPage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StatusPage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatusPage.__pulumiType;
    }

    /**
     * A list of cards to include on the status page.
     */
    public readonly cards!: pulumi.Output<outputs.StatusPageCard[]>;
    /**
     * A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
     */
    public readonly customDomain!: pulumi.Output<string | undefined>;
    /**
     * Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
     */
    public readonly defaultTheme!: pulumi.Output<string | undefined>;
    /**
     * A URL to an image file to use as the favicon of the status page.
     */
    public readonly favicon!: pulumi.Output<string | undefined>;
    /**
     * A URL to an image file to use as the logo for the status page.
     */
    public readonly logo!: pulumi.Output<string | undefined>;
    /**
     * The name of the status page.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The URL the user should be redirected to when clicking the logo.
     */
    public readonly redirectTo!: pulumi.Output<string | undefined>;
    /**
     * The URL of the status page.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a StatusPage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StatusPageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatusPageArgs | StatusPageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatusPageState | undefined;
            resourceInputs["cards"] = state ? state.cards : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["defaultTheme"] = state ? state.defaultTheme : undefined;
            resourceInputs["favicon"] = state ? state.favicon : undefined;
            resourceInputs["logo"] = state ? state.logo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redirectTo"] = state ? state.redirectTo : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as StatusPageArgs | undefined;
            if ((!args || args.cards === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cards'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["cards"] = args ? args.cards : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["defaultTheme"] = args ? args.defaultTheme : undefined;
            resourceInputs["favicon"] = args ? args.favicon : undefined;
            resourceInputs["logo"] = args ? args.logo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redirectTo"] = args ? args.redirectTo : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StatusPage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StatusPage resources.
 */
export interface StatusPageState {
    /**
     * A list of cards to include on the status page.
     */
    cards?: pulumi.Input<pulumi.Input<inputs.StatusPageCard>[]>;
    /**
     * A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
     */
    defaultTheme?: pulumi.Input<string>;
    /**
     * A URL to an image file to use as the favicon of the status page.
     */
    favicon?: pulumi.Input<string>;
    /**
     * A URL to an image file to use as the logo for the status page.
     */
    logo?: pulumi.Input<string>;
    /**
     * The name of the status page.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL the user should be redirected to when clicking the logo.
     */
    redirectTo?: pulumi.Input<string>;
    /**
     * The URL of the status page.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StatusPage resource.
 */
export interface StatusPageArgs {
    /**
     * A list of cards to include on the status page.
     */
    cards: pulumi.Input<pulumi.Input<inputs.StatusPageCard>[]>;
    /**
     * A custom user domain, e.g. "status.example.com". See the docs on updating your DNS and SSL usage.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Possible values are `AUTO`, `DARK`, and `LIGHT`. (Default `AUTO`).
     */
    defaultTheme?: pulumi.Input<string>;
    /**
     * A URL to an image file to use as the favicon of the status page.
     */
    favicon?: pulumi.Input<string>;
    /**
     * A URL to an image file to use as the logo for the status page.
     */
    logo?: pulumi.Input<string>;
    /**
     * The name of the status page.
     */
    name?: pulumi.Input<string>;
    /**
     * The URL the user should be redirected to when clicking the logo.
     */
    redirectTo?: pulumi.Input<string>;
    /**
     * The URL of the status page.
     */
    url: pulumi.Input<string>;
}
