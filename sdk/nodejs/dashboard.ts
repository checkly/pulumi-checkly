// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const dashboard1 = new checkly.Dashboard("dashboard1", {
 *     customDomain: "status.example.com",
 *     customUrl: "checkly",
 *     header: "Public dashboard",
 *     hideTags: false,
 *     logo: "https://www.checklyhq.com/logo.png",
 *     paginate: false,
 *     paginationRate: 30,
 *     refreshRate: 60,
 *     tags: ["production"],
 *     width: "FULL",
 * });
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * Determines how many checks to show per page.
     */
    public readonly checksPerPage!: pulumi.Output<number | undefined>;
    /**
     * A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.
     */
    public readonly customDomain!: pulumi.Output<string | undefined>;
    /**
     * A subdomain name under 'checklyhq.com'. Needs to be unique across all users.
     */
    public readonly customUrl!: pulumi.Output<string>;
    /**
     * HTML \n\n description for the dashboard.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A URL pointing to an image file to use as browser favicon.
     */
    public readonly favicon!: pulumi.Output<string | undefined>;
    /**
     * A piece of text displayed at the top of your dashboard.
     */
    public readonly header!: pulumi.Output<string | undefined>;
    /**
     * Show or hide the tags on the dashboard.
     */
    public readonly hideTags!: pulumi.Output<boolean | undefined>;
    /**
     * Set your dashboard as private and generate key.
     */
    public readonly isPrivate!: pulumi.Output<boolean | undefined>;
    /**
     * The access key when the dashboard is private.
     */
    public /*out*/ readonly key!: pulumi.Output<string>;
    /**
     * A link to for the dashboard logo.
     */
    public readonly link!: pulumi.Output<string | undefined>;
    /**
     * A URL pointing to an image file to use for the dashboard logo.
     */
    public readonly logo!: pulumi.Output<string | undefined>;
    /**
     * Determines if pagination is on or off.
     */
    public readonly paginate!: pulumi.Output<boolean | undefined>;
    /**
     * How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.
     */
    public readonly paginationRate!: pulumi.Output<number | undefined>;
    /**
     * How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.
     */
    public readonly refreshRate!: pulumi.Output<number | undefined>;
    /**
     * A list of one or more tags that filter which checks to display on the dashboard.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Set when to use AND operator for fetching dashboard tags.
     */
    public readonly useTagsAndOperator!: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.
     */
    public readonly width!: pulumi.Output<string | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["checksPerPage"] = state ? state.checksPerPage : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["customUrl"] = state ? state.customUrl : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["favicon"] = state ? state.favicon : undefined;
            resourceInputs["header"] = state ? state.header : undefined;
            resourceInputs["hideTags"] = state ? state.hideTags : undefined;
            resourceInputs["isPrivate"] = state ? state.isPrivate : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["logo"] = state ? state.logo : undefined;
            resourceInputs["paginate"] = state ? state.paginate : undefined;
            resourceInputs["paginationRate"] = state ? state.paginationRate : undefined;
            resourceInputs["refreshRate"] = state ? state.refreshRate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useTagsAndOperator"] = state ? state.useTagsAndOperator : undefined;
            resourceInputs["width"] = state ? state.width : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if ((!args || args.customUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customUrl'");
            }
            resourceInputs["checksPerPage"] = args ? args.checksPerPage : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["customUrl"] = args ? args.customUrl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["favicon"] = args ? args.favicon : undefined;
            resourceInputs["header"] = args ? args.header : undefined;
            resourceInputs["hideTags"] = args ? args.hideTags : undefined;
            resourceInputs["isPrivate"] = args ? args.isPrivate : undefined;
            resourceInputs["link"] = args ? args.link : undefined;
            resourceInputs["logo"] = args ? args.logo : undefined;
            resourceInputs["paginate"] = args ? args.paginate : undefined;
            resourceInputs["paginationRate"] = args ? args.paginationRate : undefined;
            resourceInputs["refreshRate"] = args ? args.refreshRate : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useTagsAndOperator"] = args ? args.useTagsAndOperator : undefined;
            resourceInputs["width"] = args ? args.width : undefined;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * Determines how many checks to show per page.
     */
    checksPerPage?: pulumi.Input<number>;
    /**
     * A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * A subdomain name under 'checklyhq.com'. Needs to be unique across all users.
     */
    customUrl?: pulumi.Input<string>;
    /**
     * HTML \n\n description for the dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * A URL pointing to an image file to use as browser favicon.
     */
    favicon?: pulumi.Input<string>;
    /**
     * A piece of text displayed at the top of your dashboard.
     */
    header?: pulumi.Input<string>;
    /**
     * Show or hide the tags on the dashboard.
     */
    hideTags?: pulumi.Input<boolean>;
    /**
     * Set your dashboard as private and generate key.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * The access key when the dashboard is private.
     */
    key?: pulumi.Input<string>;
    /**
     * A link to for the dashboard logo.
     */
    link?: pulumi.Input<string>;
    /**
     * A URL pointing to an image file to use for the dashboard logo.
     */
    logo?: pulumi.Input<string>;
    /**
     * Determines if pagination is on or off.
     */
    paginate?: pulumi.Input<boolean>;
    /**
     * How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.
     */
    paginationRate?: pulumi.Input<number>;
    /**
     * How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.
     */
    refreshRate?: pulumi.Input<number>;
    /**
     * A list of one or more tags that filter which checks to display on the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set when to use AND operator for fetching dashboard tags.
     */
    useTagsAndOperator?: pulumi.Input<boolean>;
    /**
     * Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.
     */
    width?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * Determines how many checks to show per page.
     */
    checksPerPage?: pulumi.Input<number>;
    /**
     * A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * A subdomain name under 'checklyhq.com'. Needs to be unique across all users.
     */
    customUrl: pulumi.Input<string>;
    /**
     * HTML \n\n description for the dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * A URL pointing to an image file to use as browser favicon.
     */
    favicon?: pulumi.Input<string>;
    /**
     * A piece of text displayed at the top of your dashboard.
     */
    header?: pulumi.Input<string>;
    /**
     * Show or hide the tags on the dashboard.
     */
    hideTags?: pulumi.Input<boolean>;
    /**
     * Set your dashboard as private and generate key.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * A link to for the dashboard logo.
     */
    link?: pulumi.Input<string>;
    /**
     * A URL pointing to an image file to use for the dashboard logo.
     */
    logo?: pulumi.Input<string>;
    /**
     * Determines if pagination is on or off.
     */
    paginate?: pulumi.Input<boolean>;
    /**
     * How often to trigger pagination in seconds. Possible values `30`, `60` and `300`.
     */
    paginationRate?: pulumi.Input<number>;
    /**
     * How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`.
     */
    refreshRate?: pulumi.Input<number>;
    /**
     * A list of one or more tags that filter which checks to display on the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set when to use AND operator for fetching dashboard tags.
     */
    useTagsAndOperator?: pulumi.Input<boolean>;
    /**
     * Determines whether to use the full screen or focus in the center. Possible values `FULL` and `960PX`.
     */
    width?: pulumi.Input<string>;
}
