// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const dashboard1 = new checkly.Dashboard("dashboard_1", {
 *     customUrl: "checkly",
 *     customDomain: "status.example.com",
 *     logo: "https://www.checklyhq.com/logo.png",
 *     header: "Public dashboard",
 *     refreshRate: 60,
 *     paginate: false,
 *     paginationRate: 30,
 *     hideTags: false,
 *     width: "FULL",
 *     tags: ["production"],
 * });
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * Determines how many checks to show per page. Possible values are between 1 and 20. (Default `15`).
     */
    declare public readonly checksPerPage: pulumi.Output<number | undefined>;
    /**
     * Custom CSS to be applied to the dashboard.
     */
    declare public readonly customCss: pulumi.Output<string | undefined>;
    /**
     * A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.
     */
    declare public readonly customDomain: pulumi.Output<string | undefined>;
    /**
     * A subdomain name under 'checklyhq.com'. Needs to be unique across all users.
     */
    declare public readonly customUrl: pulumi.Output<string>;
    /**
     * HTML \n\n description for the dashboard.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enable incident support for the dashboard. (Default `false`).
     */
    declare public readonly enableIncidents: pulumi.Output<boolean | undefined>;
    /**
     * Expand or collapse checks on the dashboard. (Default `false`).
     */
    declare public readonly expandChecks: pulumi.Output<boolean | undefined>;
    /**
     * A URL pointing to an image file to use as browser favicon.
     */
    declare public readonly favicon: pulumi.Output<string | undefined>;
    /**
     * A piece of text displayed at the top of your dashboard.
     */
    declare public readonly header: pulumi.Output<string>;
    /**
     * Show or hide the tags on the dashboard. (Default `false`).
     */
    declare public readonly hideTags: pulumi.Output<boolean | undefined>;
    /**
     * Set your dashboard as private and generate key.
     */
    declare public readonly isPrivate: pulumi.Output<boolean | undefined>;
    /**
     * The access key when the dashboard is private.
     */
    declare public /*out*/ readonly key: pulumi.Output<string>;
    /**
     * A link to for the dashboard logo.
     */
    declare public readonly link: pulumi.Output<string | undefined>;
    /**
     * A URL pointing to an image file to use for the dashboard logo.
     */
    declare public readonly logo: pulumi.Output<string | undefined>;
    /**
     * Determines if pagination is on or off. (Default `true`).
     */
    declare public readonly paginate: pulumi.Output<boolean | undefined>;
    /**
     * How often to trigger pagination in seconds. Possible values `30`, `60` and `300`. (Default `60`).
     */
    declare public readonly paginationRate: pulumi.Output<number | undefined>;
    /**
     * How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`. (Default `60`).
     */
    declare public readonly refreshRate: pulumi.Output<number | undefined>;
    /**
     * Show or hide check run links on the dashboard. (Default `false`).
     */
    declare public readonly showCheckRunLinks: pulumi.Output<boolean | undefined>;
    /**
     * Show or hide header and description on the dashboard. (Default `true`).
     */
    declare public readonly showHeader: pulumi.Output<boolean | undefined>;
    /**
     * Show or hide the P95 stats on the dashboard. (Default `true`).
     */
    declare public readonly showP95: pulumi.Output<boolean | undefined>;
    /**
     * Show or hide the P99 stats on the dashboard. (Default `true`).
     */
    declare public readonly showP99: pulumi.Output<boolean | undefined>;
    /**
     * A list of one or more tags that filter which checks to display on the dashboard.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Set when to use AND operator for fetching dashboard tags. (Default `false`).
     */
    declare public readonly useTagsAndOperator: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether to use the full screen or focus in the center. Possible values are `FULL` and `960PX`. (Default `FULL`).
     */
    declare public readonly width: pulumi.Output<string | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["checksPerPage"] = state?.checksPerPage;
            resourceInputs["customCss"] = state?.customCss;
            resourceInputs["customDomain"] = state?.customDomain;
            resourceInputs["customUrl"] = state?.customUrl;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableIncidents"] = state?.enableIncidents;
            resourceInputs["expandChecks"] = state?.expandChecks;
            resourceInputs["favicon"] = state?.favicon;
            resourceInputs["header"] = state?.header;
            resourceInputs["hideTags"] = state?.hideTags;
            resourceInputs["isPrivate"] = state?.isPrivate;
            resourceInputs["key"] = state?.key;
            resourceInputs["link"] = state?.link;
            resourceInputs["logo"] = state?.logo;
            resourceInputs["paginate"] = state?.paginate;
            resourceInputs["paginationRate"] = state?.paginationRate;
            resourceInputs["refreshRate"] = state?.refreshRate;
            resourceInputs["showCheckRunLinks"] = state?.showCheckRunLinks;
            resourceInputs["showHeader"] = state?.showHeader;
            resourceInputs["showP95"] = state?.showP95;
            resourceInputs["showP99"] = state?.showP99;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["useTagsAndOperator"] = state?.useTagsAndOperator;
            resourceInputs["width"] = state?.width;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if (args?.customUrl === undefined && !opts.urn) {
                throw new Error("Missing required property 'customUrl'");
            }
            if (args?.header === undefined && !opts.urn) {
                throw new Error("Missing required property 'header'");
            }
            resourceInputs["checksPerPage"] = args?.checksPerPage;
            resourceInputs["customCss"] = args?.customCss;
            resourceInputs["customDomain"] = args?.customDomain;
            resourceInputs["customUrl"] = args?.customUrl;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableIncidents"] = args?.enableIncidents;
            resourceInputs["expandChecks"] = args?.expandChecks;
            resourceInputs["favicon"] = args?.favicon;
            resourceInputs["header"] = args?.header;
            resourceInputs["hideTags"] = args?.hideTags;
            resourceInputs["isPrivate"] = args?.isPrivate;
            resourceInputs["link"] = args?.link;
            resourceInputs["logo"] = args?.logo;
            resourceInputs["paginate"] = args?.paginate;
            resourceInputs["paginationRate"] = args?.paginationRate;
            resourceInputs["refreshRate"] = args?.refreshRate;
            resourceInputs["showCheckRunLinks"] = args?.showCheckRunLinks;
            resourceInputs["showHeader"] = args?.showHeader;
            resourceInputs["showP95"] = args?.showP95;
            resourceInputs["showP99"] = args?.showP99;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["useTagsAndOperator"] = args?.useTagsAndOperator;
            resourceInputs["width"] = args?.width;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * Determines how many checks to show per page. Possible values are between 1 and 20. (Default `15`).
     */
    checksPerPage?: pulumi.Input<number>;
    /**
     * Custom CSS to be applied to the dashboard.
     */
    customCss?: pulumi.Input<string>;
    /**
     * A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * A subdomain name under 'checklyhq.com'. Needs to be unique across all users.
     */
    customUrl?: pulumi.Input<string>;
    /**
     * HTML \n\n description for the dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable incident support for the dashboard. (Default `false`).
     */
    enableIncidents?: pulumi.Input<boolean>;
    /**
     * Expand or collapse checks on the dashboard. (Default `false`).
     */
    expandChecks?: pulumi.Input<boolean>;
    /**
     * A URL pointing to an image file to use as browser favicon.
     */
    favicon?: pulumi.Input<string>;
    /**
     * A piece of text displayed at the top of your dashboard.
     */
    header?: pulumi.Input<string>;
    /**
     * Show or hide the tags on the dashboard. (Default `false`).
     */
    hideTags?: pulumi.Input<boolean>;
    /**
     * Set your dashboard as private and generate key.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * The access key when the dashboard is private.
     */
    key?: pulumi.Input<string>;
    /**
     * A link to for the dashboard logo.
     */
    link?: pulumi.Input<string>;
    /**
     * A URL pointing to an image file to use for the dashboard logo.
     */
    logo?: pulumi.Input<string>;
    /**
     * Determines if pagination is on or off. (Default `true`).
     */
    paginate?: pulumi.Input<boolean>;
    /**
     * How often to trigger pagination in seconds. Possible values `30`, `60` and `300`. (Default `60`).
     */
    paginationRate?: pulumi.Input<number>;
    /**
     * How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`. (Default `60`).
     */
    refreshRate?: pulumi.Input<number>;
    /**
     * Show or hide check run links on the dashboard. (Default `false`).
     */
    showCheckRunLinks?: pulumi.Input<boolean>;
    /**
     * Show or hide header and description on the dashboard. (Default `true`).
     */
    showHeader?: pulumi.Input<boolean>;
    /**
     * Show or hide the P95 stats on the dashboard. (Default `true`).
     */
    showP95?: pulumi.Input<boolean>;
    /**
     * Show or hide the P99 stats on the dashboard. (Default `true`).
     */
    showP99?: pulumi.Input<boolean>;
    /**
     * A list of one or more tags that filter which checks to display on the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set when to use AND operator for fetching dashboard tags. (Default `false`).
     */
    useTagsAndOperator?: pulumi.Input<boolean>;
    /**
     * Determines whether to use the full screen or focus in the center. Possible values are `FULL` and `960PX`. (Default `FULL`).
     */
    width?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * Determines how many checks to show per page. Possible values are between 1 and 20. (Default `15`).
     */
    checksPerPage?: pulumi.Input<number>;
    /**
     * Custom CSS to be applied to the dashboard.
     */
    customCss?: pulumi.Input<string>;
    /**
     * A custom user domain, e.g. 'status.example.com'. See the docs on updating your DNS and SSL usage.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * A subdomain name under 'checklyhq.com'. Needs to be unique across all users.
     */
    customUrl: pulumi.Input<string>;
    /**
     * HTML \n\n description for the dashboard.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable incident support for the dashboard. (Default `false`).
     */
    enableIncidents?: pulumi.Input<boolean>;
    /**
     * Expand or collapse checks on the dashboard. (Default `false`).
     */
    expandChecks?: pulumi.Input<boolean>;
    /**
     * A URL pointing to an image file to use as browser favicon.
     */
    favicon?: pulumi.Input<string>;
    /**
     * A piece of text displayed at the top of your dashboard.
     */
    header: pulumi.Input<string>;
    /**
     * Show or hide the tags on the dashboard. (Default `false`).
     */
    hideTags?: pulumi.Input<boolean>;
    /**
     * Set your dashboard as private and generate key.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * A link to for the dashboard logo.
     */
    link?: pulumi.Input<string>;
    /**
     * A URL pointing to an image file to use for the dashboard logo.
     */
    logo?: pulumi.Input<string>;
    /**
     * Determines if pagination is on or off. (Default `true`).
     */
    paginate?: pulumi.Input<boolean>;
    /**
     * How often to trigger pagination in seconds. Possible values `30`, `60` and `300`. (Default `60`).
     */
    paginationRate?: pulumi.Input<number>;
    /**
     * How often to refresh the dashboard in seconds. Possible values `60`, '300' and `600`. (Default `60`).
     */
    refreshRate?: pulumi.Input<number>;
    /**
     * Show or hide check run links on the dashboard. (Default `false`).
     */
    showCheckRunLinks?: pulumi.Input<boolean>;
    /**
     * Show or hide header and description on the dashboard. (Default `true`).
     */
    showHeader?: pulumi.Input<boolean>;
    /**
     * Show or hide the P95 stats on the dashboard. (Default `true`).
     */
    showP95?: pulumi.Input<boolean>;
    /**
     * Show or hide the P99 stats on the dashboard. (Default `true`).
     */
    showP99?: pulumi.Input<boolean>;
    /**
     * A list of one or more tags that filter which checks to display on the dashboard.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set when to use AND operator for fetching dashboard tags. (Default `false`).
     */
    useTagsAndOperator?: pulumi.Input<boolean>;
    /**
     * Determines whether to use the full screen or focus in the center. Possible values are `FULL` and `960PX`. (Default `FULL`).
     */
    width?: pulumi.Input<string>;
}
