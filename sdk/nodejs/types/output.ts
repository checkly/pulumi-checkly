// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as utilities from "../utilities";

export interface AlertChannelEmail {
    address: string;
}

export interface AlertChannelOpsgenie {
    apiKey: string;
    name: string;
    priority: string;
    region: string;
}

export interface AlertChannelPagerduty {
    account?: string;
    serviceKey: string;
    serviceName?: string;
}

export interface AlertChannelSlack {
    channel: string;
    url: string;
}

export interface AlertChannelSms {
    name: string;
    number: string;
}

export interface AlertChannelWebhook {
    headers: {[key: string]: any};
    method?: string;
    name: string;
    queryParameters: {[key: string]: any};
    template?: string;
    url: string;
    webhookSecret?: string;
}

export interface CheckAlertChannelSubscription {
    activated: boolean;
    channelId: number;
}

export interface CheckAlertSettings {
    escalationType?: string;
    reminders?: outputs.CheckAlertSettingsReminder[];
    runBasedEscalations?: outputs.CheckAlertSettingsRunBasedEscalation[];
    sslCertificates?: outputs.CheckAlertSettingsSslCertificate[];
    timeBasedEscalations?: outputs.CheckAlertSettingsTimeBasedEscalation[];
}

export interface CheckAlertSettingsReminder {
    amount?: number;
    interval?: number;
}

export interface CheckAlertSettingsRunBasedEscalation {
    failedRunThreshold?: number;
}

export interface CheckAlertSettingsSslCertificate {
    alertThreshold?: number;
    enabled?: boolean;
}

export interface CheckAlertSettingsTimeBasedEscalation {
    minutesFailingThreshold?: number;
}

export interface CheckGroupAlertChannelSubscription {
    activated: boolean;
    channelId: number;
}

export interface CheckGroupAlertSettings {
    escalationType?: string;
    reminders?: outputs.CheckGroupAlertSettingsReminder[];
    runBasedEscalations?: outputs.CheckGroupAlertSettingsRunBasedEscalation[];
    sslCertificates?: outputs.CheckGroupAlertSettingsSslCertificate[];
    timeBasedEscalations?: outputs.CheckGroupAlertSettingsTimeBasedEscalation[];
}

export interface CheckGroupAlertSettingsReminder {
    amount?: number;
    interval?: number;
}

export interface CheckGroupAlertSettingsRunBasedEscalation {
    failedRunThreshold?: number;
}

export interface CheckGroupAlertSettingsSslCertificate {
    alertThreshold?: number;
    enabled?: boolean;
}

export interface CheckGroupAlertSettingsTimeBasedEscalation {
    minutesFailingThreshold?: number;
}

export interface CheckGroupApiCheckDefaults {
    assertions?: outputs.CheckGroupApiCheckDefaultsAssertion[];
    basicAuth: outputs.CheckGroupApiCheckDefaultsBasicAuth;
    headers: {[key: string]: any};
    queryParameters: {[key: string]: any};
    url: string;
}
/**
 * checkGroupApiCheckDefaultsProvideDefaults sets the appropriate defaults for CheckGroupApiCheckDefaults
 */
export function checkGroupApiCheckDefaultsProvideDefaults(val: CheckGroupApiCheckDefaults): CheckGroupApiCheckDefaults {
    return {
        ...val,
        url: (val.url) ?? "",
    };
}

export interface CheckGroupApiCheckDefaultsAssertion {
    comparison: string;
    property?: string;
    source: string;
    target: string;
}

export interface CheckGroupApiCheckDefaultsBasicAuth {
    password: string;
    username: string;
}

export interface CheckRequest {
    assertions?: outputs.CheckRequestAssertion[];
    basicAuth: outputs.CheckRequestBasicAuth;
    body?: string;
    bodyType?: string;
    followRedirects?: boolean;
    headers: {[key: string]: any};
    method?: string;
    queryParameters: {[key: string]: any};
    skipSsl?: boolean;
    url: string;
}

export interface CheckRequestAssertion {
    comparison: string;
    property?: string;
    source: string;
    target?: string;
}

export interface CheckRequestBasicAuth {
    password: string;
    username: string;
}

