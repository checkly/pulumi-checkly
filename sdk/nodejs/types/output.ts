// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as utilities from "../utilities";

export interface AlertChannelEmail {
    /**
     * the email address of this email alert channel.
     */
    address: string;
}

export interface AlertChannelOpsgenie {
    /**
     * .
     */
    apiKey: string;
    /**
     * Webhook's channel name.
     */
    name: string;
    /**
     * .
     */
    priority: string;
    /**
     * .
     */
    region: string;
}

export interface AlertChannelPagerduty {
    /**
     * Pagerduty's account name.
     */
    account?: string;
    /**
     * Pagerduty's service integration key.
     */
    serviceKey: string;
    /**
     * Pagerduty's service name.
     */
    serviceName?: string;
}

export interface AlertChannelSlack {
    /**
     * Slack's channel name.
     */
    channel: string;
    /**
     * .
     */
    url: string;
}

export interface AlertChannelSms {
    /**
     * Webhook's channel name.
     */
    name: string;
    /**
     * Mobile number to receive alerts.
     */
    number: string;
}

export interface AlertChannelWebhook {
    /**
     * .
     */
    headers: {[key: string]: any};
    /**
     * Default is `POST`.
     */
    method?: string;
    /**
     * Webhook's channel name.
     */
    name: string;
    /**
     * .
     */
    queryParameters: {[key: string]: any};
    /**
     * .
     */
    template?: string;
    /**
     * .
     */
    url: string;
    /**
     * .
     */
    webhookSecret?: string;
}

export interface CheckAlertChannelSubscription {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated: boolean;
    channelId: number;
}

export interface CheckAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: string;
    /**
     * . Possible arguments:
     */
    reminders?: outputs.CheckAlertSettingsReminder[];
    /**
     * . Possible arguments:
     */
    runBasedEscalations?: outputs.CheckAlertSettingsRunBasedEscalation[];
    /**
     * At what interval the reminders should be send.  Possible arguments:
     */
    sslCertificates?: outputs.CheckAlertSettingsSslCertificate[];
    /**
     * . Possible arguments:
     */
    timeBasedEscalations?: outputs.CheckAlertSettingsTimeBasedEscalation[];
}

export interface CheckAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: number;
    /**
     * . Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
     */
    interval?: number;
}

export interface CheckAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be send. Possible values are between 1 and 5. Defaults to `1`.
     */
    failedRunThreshold?: number;
}

export interface CheckAlertSettingsSslCertificate {
    /**
     * At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. Defaults to `3`.
     */
    alertThreshold?: number;
    /**
     * Determines if alert notifications should be send for expiring SSL certificates. Possible values `true`, and `false`. Defaults to `true`.
     */
    enabled?: boolean;
}

export interface CheckAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be send. Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
     */
    minutesFailingThreshold?: number;
}

export interface CheckGroupAlertChannelSubscription {
    /**
     * Determines if the checks in the group are running or not.
     */
    activated: boolean;
    channelId: number;
}

export interface CheckGroupAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: string;
    /**
     * . Possible arguments:
     */
    reminders?: outputs.CheckGroupAlertSettingsReminder[];
    /**
     * . Possible arguments:
     */
    runBasedEscalations?: outputs.CheckGroupAlertSettingsRunBasedEscalation[];
    /**
     * At what interval the reminders should be send.  Possible arguments:
     */
    sslCertificates?: outputs.CheckGroupAlertSettingsSslCertificate[];
    /**
     * . Possible arguments:
     */
    timeBasedEscalations?: outputs.CheckGroupAlertSettingsTimeBasedEscalation[];
}

export interface CheckGroupAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: number;
    /**
     * . Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
     */
    interval?: number;
}

export interface CheckGroupAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be send. Possible values are between 1 and 5. Defaults to `1`.
     */
    failedRunThreshold?: number;
}

export interface CheckGroupAlertSettingsSslCertificate {
    /**
     * At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. Defaults to `3`.
     */
    alertThreshold?: number;
    /**
     * Determines if alert notifications should be send for expiring SSL certificates. Possible values `true`, and `false`. Defaults to `true`.
     */
    enabled?: boolean;
}

export interface CheckGroupAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be send. Possible values are `5`, `10`, `15`, and `30`. Defaults to `5`.
     */
    minutesFailingThreshold?: number;
}

export interface CheckGroupApiCheckDefaults {
    /**
     * . Possible arguments:
     */
    assertions?: outputs.CheckGroupApiCheckDefaultsAssertion[];
    /**
     * . Possible arguments
     */
    basicAuth: outputs.CheckGroupApiCheckDefaultsBasicAuth;
    /**
     * .
     */
    headers: {[key: string]: any};
    /**
     * .
     */
    queryParameters: {[key: string]: any};
    /**
     * The base url for this group which you can reference with the {{GROUP_BASE_URL}} variable in all group checks.
     */
    url: string;
}
/**
 * checkGroupApiCheckDefaultsProvideDefaults sets the appropriate defaults for CheckGroupApiCheckDefaults
 */
export function checkGroupApiCheckDefaultsProvideDefaults(val: CheckGroupApiCheckDefaults): CheckGroupApiCheckDefaults {
    return {
        ...val,
        url: (val.url) ?? "",
    };
}

export interface CheckGroupApiCheckDefaultsAssertion {
    /**
     * Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
     */
    comparison: string;
    /**
     * .
     */
    property?: string;
    /**
     * Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
     */
    source: string;
    target: string;
}

export interface CheckGroupApiCheckDefaultsBasicAuth {
    password: string;
    username: string;
}

export interface CheckRequest {
    /**
     * A request can have multiple assetions. Assertion has the following arguments:
     */
    assertions?: outputs.CheckRequestAssertion[];
    /**
     * A request might have one basicAuth config. basicAuth has two arguments:
     */
    basicAuth: outputs.CheckRequestBasicAuth;
    body?: string;
    /**
     * Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
     */
    bodyType?: string;
    /**
     * .
     */
    followRedirects?: boolean;
    /**
     * .
     */
    headers: {[key: string]: any};
    /**
     * The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. Defaults to `GET`.
     */
    method?: string;
    /**
     * .
     */
    queryParameters: {[key: string]: any};
    /**
     * .
     */
    skipSsl?: boolean;
    /**
     * .
     */
    url: string;
}

export interface CheckRequestAssertion {
    /**
     * Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
     */
    comparison: string;
    /**
     * .
     */
    property?: string;
    /**
     * Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
     */
    source: string;
    /**
     * .
     */
    target?: string;
}

export interface CheckRequestBasicAuth {
    password: string;
    username: string;
}

