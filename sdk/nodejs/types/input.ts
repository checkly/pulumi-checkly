// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

export interface AlertChannelCall {
    /**
     * The name of this alert channel
     */
    name: pulumi.Input<string>;
    /**
     * The mobile number to receive the alerts
     */
    number: pulumi.Input<string>;
}

export interface AlertChannelEmail {
    /**
     * The email address of this email alert channel.
     */
    address: pulumi.Input<string>;
}

export interface AlertChannelOpsgenie {
    apiKey: pulumi.Input<string>;
    name: pulumi.Input<string>;
    priority: pulumi.Input<string>;
    region: pulumi.Input<string>;
}

export interface AlertChannelPagerduty {
    account?: pulumi.Input<string>;
    serviceKey: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
}

export interface AlertChannelSlack {
    /**
     * The name of the alert's Slack channel
     */
    channel: pulumi.Input<string>;
    /**
     * The Slack webhook URL
     */
    url: pulumi.Input<string>;
}

export interface AlertChannelSms {
    /**
     * The name of this alert channel
     */
    name: pulumi.Input<string>;
    /**
     * The mobile number to receive the alerts
     */
    number: pulumi.Input<string>;
}

export interface AlertChannelWebhook {
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * (Default `POST`)
     */
    method?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queryParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    template?: pulumi.Input<string>;
    url: pulumi.Input<string>;
    webhookSecret?: pulumi.Input<string>;
    /**
     * Type of the webhook. Possible values are 'WEBHOOK*DISCORD', 'WEBHOOK*FIREHYDRANT', 'WEBHOOK*GITLAB*ALERT', 'WEBHOOK*SPIKESH', 'WEBHOOK*SPLUNK', 'WEBHOOK*MSTEAMS' and 'WEBHOOK*TELEGRAM'.
     */
    webhookType?: pulumi.Input<string>;
}

export interface CheckAlertChannelSubscription {
    activated: pulumi.Input<boolean>;
    channelId: pulumi.Input<number>;
}

export interface CheckAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: pulumi.Input<string>;
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.CheckAlertSettingsParallelRunFailureThreshold>[]>;
    reminders?: pulumi.Input<pulumi.Input<inputs.CheckAlertSettingsReminder>[]>;
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.CheckAlertSettingsRunBasedEscalation>[]>;
    /**
     * @deprecated This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.CheckAlertSettingsSslCertificate>[]>;
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.CheckAlertSettingsTimeBasedEscalation>[]>;
}

export interface CheckAlertSettingsParallelRunFailureThreshold {
    /**
     * Applicable only for checks scheduled in parallel in multiple locations.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface CheckAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: pulumi.Input<number>;
    /**
     * Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface CheckAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface CheckAlertSettingsSslCertificate {
    /**
     * How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
     */
    alertThreshold?: pulumi.Input<number>;
    /**
     * Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
     */
    enabled?: pulumi.Input<boolean>;
}

export interface CheckAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface CheckEnvironmentVariable {
    key: pulumi.Input<string>;
    locked?: pulumi.Input<boolean>;
    secret?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface CheckGroupAlertChannelSubscription {
    activated: pulumi.Input<boolean>;
    channelId: pulumi.Input<number>;
}

export interface CheckGroupAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: pulumi.Input<string>;
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertSettingsParallelRunFailureThreshold>[]>;
    reminders?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertSettingsReminder>[]>;
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertSettingsRunBasedEscalation>[]>;
    /**
     * @deprecated This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertSettingsSslCertificate>[]>;
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertSettingsTimeBasedEscalation>[]>;
}

export interface CheckGroupAlertSettingsParallelRunFailureThreshold {
    /**
     * Applicable only for checks scheduled in parallel in multiple locations.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface CheckGroupAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: pulumi.Input<number>;
    /**
     * Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface CheckGroupAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface CheckGroupAlertSettingsSslCertificate {
    /**
     * At what moment in time to start alerting on SSL certificates. Possible values `3`, `7`, `14`, `30`. (Default `3`).
     */
    alertThreshold?: pulumi.Input<number>;
    /**
     * Determines if alert notifications should be sent for expiring SSL certificates.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface CheckGroupAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface CheckGroupApiCheckDefaults {
    assertions?: pulumi.Input<pulumi.Input<inputs.CheckGroupApiCheckDefaultsAssertion>[]>;
    basicAuth?: pulumi.Input<inputs.CheckGroupApiCheckDefaultsBasicAuth>;
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    queryParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The base url for this group which you can reference with the `GROUP_BASE_URL` variable in all group checks.
     */
    url?: pulumi.Input<string>;
}
/**
 * checkGroupApiCheckDefaultsProvideDefaults sets the appropriate defaults for CheckGroupApiCheckDefaults
 */
export function checkGroupApiCheckDefaultsProvideDefaults(val: CheckGroupApiCheckDefaults): CheckGroupApiCheckDefaults {
    return {
        ...val,
        url: (val.url) ?? "",
    };
}

export interface CheckGroupApiCheckDefaultsAssertion {
    /**
     * The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
     */
    comparison: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    /**
     * The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
     */
    source: pulumi.Input<string>;
    target: pulumi.Input<string>;
}

export interface CheckGroupApiCheckDefaultsBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface CheckGroupEnvironmentVariable {
    key: pulumi.Input<string>;
    locked?: pulumi.Input<boolean>;
    secret?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface CheckGroupRetryStrategy {
    /**
     * The number of seconds to wait before the first retry attempt. (Default `60`).
     */
    baseBackoffSeconds?: pulumi.Input<number>;
    /**
     * The total amount of time to continue retrying the check/monitor (maximum 600 seconds). Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `600`).
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry the check/monitor. Value must be between `1` and `10`. Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `2`).
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Apply the retry strategy only if the defined conditions match.
     */
    onlyOn?: pulumi.Input<inputs.CheckGroupRetryStrategyOnlyOn>;
    /**
     * Whether retries should be run in the same region as the initial check/monitor run. (Default `true`).
     */
    sameRegion?: pulumi.Input<boolean>;
    /**
     * Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, `EXPONENTIAL`, `SINGLE_RETRY`, and `NO_RETRIES`.
     */
    type: pulumi.Input<string>;
}

export interface CheckGroupRetryStrategyOnlyOn {
    /**
     * When `true`, retry only if the cause of the failure is a network error. (Default `false`).
     */
    networkError?: pulumi.Input<boolean>;
}

export interface CheckRequest {
    /**
     * A request can have multiple assertions.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.CheckRequestAssertion>[]>;
    /**
     * Set up HTTP basic authentication (username & password).
     */
    basicAuth?: pulumi.Input<inputs.CheckRequestBasicAuth>;
    /**
     * The body of the request.
     */
    body?: pulumi.Input<string>;
    /**
     * The `Content-Type` header of the request. Possible values `NONE`, `JSON`, `FORM`, `RAW`, and `GRAPHQL`.
     */
    bodyType?: pulumi.Input<string>;
    followRedirects?: pulumi.Input<boolean>;
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * IP Family to be used when executing the api check. The value can be either IPv4 or IPv6.
     */
    ipFamily?: pulumi.Input<string>;
    /**
     * The HTTP method to use for this API check. Possible values are `GET`, `POST`, `PUT`, `HEAD`, `DELETE`, `PATCH`. (Default `GET`).
     */
    method?: pulumi.Input<string>;
    queryParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    skipSsl?: pulumi.Input<boolean>;
    url: pulumi.Input<string>;
}

export interface CheckRequestAssertion {
    /**
     * The type of comparison to be executed between expected and actual value of the assertion. Possible values `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
     */
    comparison: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    /**
     * The source of the asserted value. Possible values `STATUS_CODE`, `JSON_BODY`, `HEADERS`, `TEXT_BODY`, and `RESPONSE_TIME`.
     */
    source: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface CheckRequestBasicAuth {
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface CheckRetryStrategy {
    /**
     * The number of seconds to wait before the first retry attempt. (Default `60`).
     */
    baseBackoffSeconds?: pulumi.Input<number>;
    /**
     * The total amount of time to continue retrying the check/monitor (maximum 600 seconds). Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `600`).
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry the check/monitor. Value must be between `1` and `10`. Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `2`).
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Apply the retry strategy only if the defined conditions match.
     */
    onlyOn?: pulumi.Input<inputs.CheckRetryStrategyOnlyOn>;
    /**
     * Whether retries should be run in the same region as the initial check/monitor run. (Default `true`).
     */
    sameRegion?: pulumi.Input<boolean>;
    /**
     * Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, `EXPONENTIAL`, `SINGLE_RETRY`, and `NO_RETRIES`.
     */
    type: pulumi.Input<string>;
}

export interface CheckRetryStrategyOnlyOn {
    /**
     * When `true`, retry only if the cause of the failure is a network error. (Default `false`).
     */
    networkError?: pulumi.Input<boolean>;
}

export interface CheckTriggerIncident {
    /**
     * A detailed description of the incident.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the incident.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to notify subscribers when the incident is triggered.
     */
    notifySubscribers: pulumi.Input<boolean>;
    /**
     * The status page service that this incident will be associated with.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The severity level of the incident. Possible values are `MINOR`, `MEDIUM`, `MAJOR`, and `CRITICAL`.
     */
    severity: pulumi.Input<string>;
}

export interface HeartbeatCheckAlertChannelSubscription {
    activated: pulumi.Input<boolean>;
    channelId: pulumi.Input<number>;
}

export interface HeartbeatCheckAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: pulumi.Input<string>;
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertSettingsParallelRunFailureThreshold>[]>;
    reminders?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertSettingsReminder>[]>;
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertSettingsRunBasedEscalation>[]>;
    /**
     * @deprecated This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertSettingsSslCertificate>[]>;
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.HeartbeatCheckAlertSettingsTimeBasedEscalation>[]>;
}

export interface HeartbeatCheckAlertSettingsParallelRunFailureThreshold {
    /**
     * Applicable only for checks scheduled in parallel in multiple locations.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface HeartbeatCheckAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: pulumi.Input<number>;
    /**
     * Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface HeartbeatCheckAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface HeartbeatCheckAlertSettingsSslCertificate {
    /**
     * How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
     */
    alertThreshold?: pulumi.Input<number>;
    /**
     * Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
     */
    enabled?: pulumi.Input<boolean>;
}

export interface HeartbeatCheckAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface HeartbeatCheckHeartbeat {
    /**
     * How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
     */
    grace: pulumi.Input<number>;
    /**
     * Possible values `seconds`, `minutes`, `hours` and `days`.
     */
    graceUnit: pulumi.Input<string>;
    /**
     * How often you expect a ping to the ping URL.
     */
    period: pulumi.Input<number>;
    /**
     * Possible values `seconds`, `minutes`, `hours` and `days`.
     */
    periodUnit: pulumi.Input<string>;
    /**
     * Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
     */
    pingToken?: pulumi.Input<string>;
}

export interface HeartbeatCheckTriggerIncident {
    /**
     * A detailed description of the incident.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the incident.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to notify subscribers when the incident is triggered.
     */
    notifySubscribers: pulumi.Input<boolean>;
    /**
     * The status page service that this incident will be associated with.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The severity level of the incident. Possible values are `MINOR`, `MEDIUM`, `MAJOR`, and `CRITICAL`.
     */
    severity: pulumi.Input<string>;
}

export interface HeartbeatMonitorAlertChannelSubscription {
    activated: pulumi.Input<boolean>;
    channelId: pulumi.Input<number>;
}

export interface HeartbeatMonitorAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: pulumi.Input<string>;
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertSettingsParallelRunFailureThreshold>[]>;
    reminders?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertSettingsReminder>[]>;
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertSettingsRunBasedEscalation>[]>;
    /**
     * @deprecated This property is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    sslCertificates?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertSettingsSslCertificate>[]>;
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertSettingsTimeBasedEscalation>[]>;
}

export interface HeartbeatMonitorAlertSettingsParallelRunFailureThreshold {
    /**
     * Applicable only for checks scheduled in parallel in multiple locations.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface HeartbeatMonitorAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: pulumi.Input<number>;
    /**
     * Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface HeartbeatMonitorAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface HeartbeatMonitorAlertSettingsSslCertificate {
    /**
     * How long before SSL certificate expiry to send alerts. Possible values `3`, `7`, `14`, `30`. (Default `3`).
     */
    alertThreshold?: pulumi.Input<number>;
    /**
     * Determines if alert notifications should be sent for expiring SSL certificates. Possible values `true`, and `false`. (Default `false`).
     */
    enabled?: pulumi.Input<boolean>;
}

export interface HeartbeatMonitorAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface HeartbeatMonitorHeartbeat {
    /**
     * How long Checkly should wait before triggering any alerts when a ping does not arrive within the set period.
     */
    grace: pulumi.Input<number>;
    /**
     * Possible values `seconds`, `minutes`, `hours` and `days`.
     */
    graceUnit: pulumi.Input<string>;
    /**
     * How often you expect a ping to the ping URL.
     */
    period: pulumi.Input<number>;
    /**
     * Possible values `seconds`, `minutes`, `hours` and `days`.
     */
    periodUnit: pulumi.Input<string>;
    /**
     * Custom token to generate your ping URL. Checkly will expect a ping to `https://ping.checklyhq.com/[PING_TOKEN]`.
     */
    pingToken?: pulumi.Input<string>;
}

export interface HeartbeatMonitorTriggerIncident {
    /**
     * A detailed description of the incident.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the incident.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to notify subscribers when the incident is triggered.
     */
    notifySubscribers: pulumi.Input<boolean>;
    /**
     * The status page service that this incident will be associated with.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The severity level of the incident. Possible values are `MINOR`, `MEDIUM`, `MAJOR`, and `CRITICAL`.
     */
    severity: pulumi.Input<string>;
}

export interface StatusPageCard {
    /**
     * The name of the card.
     */
    name: pulumi.Input<string>;
    /**
     * A list of services to attach to the card.
     */
    serviceAttachments: pulumi.Input<pulumi.Input<inputs.StatusPageCardServiceAttachment>[]>;
}

export interface StatusPageCardServiceAttachment {
    /**
     * The ID of the service.
     */
    serviceId: pulumi.Input<string>;
}

export interface TcpCheckAlertChannelSubscription {
    activated: pulumi.Input<boolean>;
    channelId: pulumi.Input<number>;
}

export interface TcpCheckAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: pulumi.Input<string>;
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.TcpCheckAlertSettingsParallelRunFailureThreshold>[]>;
    reminders?: pulumi.Input<pulumi.Input<inputs.TcpCheckAlertSettingsReminder>[]>;
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.TcpCheckAlertSettingsRunBasedEscalation>[]>;
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.TcpCheckAlertSettingsTimeBasedEscalation>[]>;
}

export interface TcpCheckAlertSettingsParallelRunFailureThreshold {
    /**
     * Applicable only for checks scheduled in parallel in multiple locations.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface TcpCheckAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: pulumi.Input<number>;
    /**
     * Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface TcpCheckAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface TcpCheckAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface TcpCheckRequest {
    /**
     * A request can have multiple assertions.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.TcpCheckRequestAssertion>[]>;
    /**
     * The data to send to the target host.
     */
    data?: pulumi.Input<string>;
    /**
     * The hostname or IP to connect to. Do not include a scheme or a port in this value.
     */
    hostname: pulumi.Input<string>;
    /**
     * The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
     */
    ipFamily?: pulumi.Input<string>;
    /**
     * The port number to connect to.
     */
    port: pulumi.Input<number>;
}

export interface TcpCheckRequestAssertion {
    /**
     * The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
     */
    comparison: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    /**
     * The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
     */
    source: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface TcpCheckRetryStrategy {
    /**
     * The number of seconds to wait before the first retry attempt. (Default `60`).
     */
    baseBackoffSeconds?: pulumi.Input<number>;
    /**
     * The total amount of time to continue retrying the check/monitor (maximum 600 seconds). Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `600`).
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry the check/monitor. Value must be between `1` and `10`. Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `2`).
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Apply the retry strategy only if the defined conditions match.
     */
    onlyOn?: pulumi.Input<inputs.TcpCheckRetryStrategyOnlyOn>;
    /**
     * Whether retries should be run in the same region as the initial check/monitor run. (Default `true`).
     */
    sameRegion?: pulumi.Input<boolean>;
    /**
     * Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, `EXPONENTIAL`, `SINGLE_RETRY`, and `NO_RETRIES`.
     */
    type: pulumi.Input<string>;
}

export interface TcpCheckRetryStrategyOnlyOn {
    /**
     * When `true`, retry only if the cause of the failure is a network error. (Default `false`).
     */
    networkError?: pulumi.Input<boolean>;
}

export interface TcpCheckTriggerIncident {
    /**
     * A detailed description of the incident.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the incident.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to notify subscribers when the incident is triggered.
     */
    notifySubscribers: pulumi.Input<boolean>;
    /**
     * The status page service that this incident will be associated with.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The severity level of the incident. Possible values are `MINOR`, `MEDIUM`, `MAJOR`, and `CRITICAL`.
     */
    severity: pulumi.Input<string>;
}

export interface TcpMonitorAlertChannelSubscription {
    activated: pulumi.Input<boolean>;
    channelId: pulumi.Input<number>;
}

export interface TcpMonitorAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` or `TIME_BASED`.
     */
    escalationType?: pulumi.Input<string>;
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.TcpMonitorAlertSettingsParallelRunFailureThreshold>[]>;
    reminders?: pulumi.Input<pulumi.Input<inputs.TcpMonitorAlertSettingsReminder>[]>;
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.TcpMonitorAlertSettingsRunBasedEscalation>[]>;
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.TcpMonitorAlertSettingsTimeBasedEscalation>[]>;
}

export interface TcpMonitorAlertSettingsParallelRunFailureThreshold {
    /**
     * Applicable only for checks scheduled in parallel in multiple locations.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `100`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface TcpMonitorAlertSettingsReminder {
    /**
     * How many reminders to send out after the initial alert notification. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000`
     */
    amount?: pulumi.Input<number>;
    /**
     * Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface TcpMonitorAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between 1 and 5. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface TcpMonitorAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a check starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface TcpMonitorRequest {
    /**
     * A request can have multiple assertions.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.TcpMonitorRequestAssertion>[]>;
    /**
     * The data to send to the target host.
     */
    data?: pulumi.Input<string>;
    /**
     * The hostname or IP to connect to. Do not include a scheme or a port in this value.
     */
    hostname: pulumi.Input<string>;
    /**
     * The IP family to use when executing the TCP check. The value can be either `IPv4` or `IPv6`.
     */
    ipFamily?: pulumi.Input<string>;
    /**
     * The port number to connect to.
     */
    port: pulumi.Input<number>;
}

export interface TcpMonitorRequestAssertion {
    /**
     * The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `HAS_KEY`, `NOT_HAS_KEY`, `HAS_VALUE`, `NOT_HAS_VALUE`, `IS_EMPTY`, `NOT_EMPTY`, `GREATER_THAN`, `LESS_THAN`, `CONTAINS`, `NOT_CONTAINS`, `IS_NULL`, and `NOT_NULL`.
     */
    comparison: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    /**
     * The source of the asserted value. Possible values are `RESPONSE_DATA` and `RESPONSE_TIME`.
     */
    source: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface TcpMonitorRetryStrategy {
    /**
     * The number of seconds to wait before the first retry attempt. (Default `60`).
     */
    baseBackoffSeconds?: pulumi.Input<number>;
    /**
     * The total amount of time to continue retrying the check/monitor (maximum 600 seconds). Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `600`).
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry the check/monitor. Value must be between `1` and `10`. Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `2`).
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Apply the retry strategy only if the defined conditions match.
     */
    onlyOn?: pulumi.Input<inputs.TcpMonitorRetryStrategyOnlyOn>;
    /**
     * Whether retries should be run in the same region as the initial check/monitor run. (Default `true`).
     */
    sameRegion?: pulumi.Input<boolean>;
    /**
     * Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, `EXPONENTIAL`, `SINGLE_RETRY`, and `NO_RETRIES`.
     */
    type: pulumi.Input<string>;
}

export interface TcpMonitorRetryStrategyOnlyOn {
    /**
     * When `true`, retry only if the cause of the failure is a network error. (Default `false`).
     */
    networkError?: pulumi.Input<boolean>;
}

export interface TcpMonitorTriggerIncident {
    /**
     * A detailed description of the incident.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the incident.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to notify subscribers when the incident is triggered.
     */
    notifySubscribers: pulumi.Input<boolean>;
    /**
     * The status page service that this incident will be associated with.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The severity level of the incident. Possible values are `MINOR`, `MEDIUM`, `MAJOR`, and `CRITICAL`.
     */
    severity: pulumi.Input<string>;
}

export interface UrlMonitorAlertChannelSubscription {
    /**
     * Whether an alert should be sent to this channel.
     */
    activated: pulumi.Input<boolean>;
    /**
     * The ID of the alert channel.
     */
    channelId: pulumi.Input<number>;
}

export interface UrlMonitorAlertSettings {
    /**
     * Determines what type of escalation to use. Possible values are `RUN_BASED` and `TIME_BASED`.
     */
    escalationType: pulumi.Input<string>;
    /**
     * Configuration for parallel run failure threshold.
     */
    parallelRunFailureThresholds?: pulumi.Input<pulumi.Input<inputs.UrlMonitorAlertSettingsParallelRunFailureThreshold>[]>;
    /**
     * Defines how often to send reminder notifications after initial alert.
     */
    reminders?: pulumi.Input<pulumi.Input<inputs.UrlMonitorAlertSettingsReminder>[]>;
    /**
     * Configuration for run-based escalation.
     */
    runBasedEscalations?: pulumi.Input<pulumi.Input<inputs.UrlMonitorAlertSettingsRunBasedEscalation>[]>;
    /**
     * Configuration for time-based escalation.
     */
    timeBasedEscalations?: pulumi.Input<pulumi.Input<inputs.UrlMonitorAlertSettingsTimeBasedEscalation>[]>;
}

export interface UrlMonitorAlertSettingsParallelRunFailureThreshold {
    /**
     * Whether parallel run failure threshold is enabled. Applicable only for monitors scheduled in parallel in multiple locations. (Default `false`).
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Percentage of runs that must fail to trigger alert. Possible values are `10`, `20`, `30`, `40`, `50`, `60`, `70`, `80`, `90`, and `100`. (Default `10`).
     */
    percentage?: pulumi.Input<number>;
}

export interface UrlMonitorAlertSettingsReminder {
    /**
     * Number of reminder notifications to send. Possible values are `0`, `1`, `2`, `3`, `4`, `5`, and `100000` (`0` to disable, `100000` for unlimited). (Default `0`).
     */
    amount?: pulumi.Input<number>;
    /**
     * Interval between reminder notifications in minutes. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    interval?: pulumi.Input<number>;
}

export interface UrlMonitorAlertSettingsRunBasedEscalation {
    /**
     * After how many failed consecutive check runs an alert notification should be sent. Possible values are between `1` and `5`. (Default `1`).
     */
    failedRunThreshold?: pulumi.Input<number>;
}

export interface UrlMonitorAlertSettingsTimeBasedEscalation {
    /**
     * After how many minutes after a monitor starts failing an alert should be sent. Possible values are `5`, `10`, `15`, and `30`. (Default `5`).
     */
    minutesFailingThreshold?: pulumi.Input<number>;
}

export interface UrlMonitorRequest {
    /**
     * Assertions to validate the HTTP response. URL monitors only support status code assertions.
     */
    assertions?: pulumi.Input<pulumi.Input<inputs.UrlMonitorRequestAssertion>[]>;
    /**
     * Whether to follow HTTP redirects automatically. (Default `true`).
     */
    followRedirects?: pulumi.Input<boolean>;
    /**
     * IP family version to use for the connection. The value can be either `IPv4` or `IPv6`. (Default `IPv4`).
     */
    ipFamily?: pulumi.Input<string>;
    /**
     * Whether to skip SSL certificate verification. (Default `false`).
     */
    skipSsl?: pulumi.Input<boolean>;
    /**
     * The URL to monitor. Must be a valid HTTP or HTTPS URL.
     */
    url: pulumi.Input<string>;
}

export interface UrlMonitorRequestAssertion {
    /**
     * The type of comparison to be executed between expected and actual value of the assertion. Possible values are `EQUALS`, `NOT_EQUALS`, `GREATER_THAN` and `LESS_THAN`.
     */
    comparison: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    /**
     * The source of the asserted value. The only allowed value is `STATUS_CODE`.
     */
    source: pulumi.Input<string>;
    /**
     * The target value. Typically `200` when the source is `STATUS_CODE`.
     */
    target: pulumi.Input<string>;
}

export interface UrlMonitorRetryStrategy {
    /**
     * The number of seconds to wait before the first retry attempt. (Default `60`).
     */
    baseBackoffSeconds?: pulumi.Input<number>;
    /**
     * The total amount of time to continue retrying the check/monitor (maximum 600 seconds). Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `600`).
     */
    maxDurationSeconds?: pulumi.Input<number>;
    /**
     * The maximum number of times to retry the check/monitor. Value must be between `1` and `10`. Available when `type` is `FIXED`, `LINEAR`, or `EXPONENTIAL`. (Default `2`).
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Apply the retry strategy only if the defined conditions match.
     */
    onlyOn?: pulumi.Input<inputs.UrlMonitorRetryStrategyOnlyOn>;
    /**
     * Whether retries should be run in the same region as the initial check/monitor run. (Default `true`).
     */
    sameRegion?: pulumi.Input<boolean>;
    /**
     * Determines which type of retry strategy to use. Possible values are `FIXED`, `LINEAR`, `EXPONENTIAL`, `SINGLE_RETRY`, and `NO_RETRIES`.
     */
    type: pulumi.Input<string>;
}

export interface UrlMonitorRetryStrategyOnlyOn {
    /**
     * When `true`, retry only if the cause of the failure is a network error. (Default `false`).
     */
    networkError?: pulumi.Input<boolean>;
}

export interface UrlMonitorTriggerIncident {
    /**
     * A detailed description of the incident.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the incident.
     */
    name: pulumi.Input<string>;
    /**
     * Whether to notify subscribers when the incident is triggered.
     */
    notifySubscribers: pulumi.Input<boolean>;
    /**
     * The status page service that this incident will be associated with.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The severity level of the incident. Possible values are `MINOR`, `MEDIUM`, `MAJOR`, and `CRITICAL`.
     */
    severity: pulumi.Input<string>;
}
