// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertChannelArgs, AlertChannelState } from "./alertChannel";
export type AlertChannel = import("./alertChannel").AlertChannel;
export const AlertChannel: typeof import("./alertChannel").AlertChannel = null as any;
utilities.lazyLoad(exports, ["AlertChannel"], () => require("./alertChannel"));

export { CheckArgs, CheckState } from "./check";
export type Check = import("./check").Check;
export const Check: typeof import("./check").Check = null as any;
utilities.lazyLoad(exports, ["Check"], () => require("./check"));

export { CheckGroupArgs, CheckGroupState } from "./checkGroup";
export type CheckGroup = import("./checkGroup").CheckGroup;
export const CheckGroup: typeof import("./checkGroup").CheckGroup = null as any;
utilities.lazyLoad(exports, ["CheckGroup"], () => require("./checkGroup"));

export { ClientCertificateArgs, ClientCertificateState } from "./clientCertificate";
export type ClientCertificate = import("./clientCertificate").ClientCertificate;
export const ClientCertificate: typeof import("./clientCertificate").ClientCertificate = null as any;
utilities.lazyLoad(exports, ["ClientCertificate"], () => require("./clientCertificate"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { EnvironmentVariableArgs, EnvironmentVariableState } from "./environmentVariable";
export type EnvironmentVariable = import("./environmentVariable").EnvironmentVariable;
export const EnvironmentVariable: typeof import("./environmentVariable").EnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["EnvironmentVariable"], () => require("./environmentVariable"));

export { GetStaticIpsArgs, GetStaticIpsResult, GetStaticIpsOutputArgs } from "./getStaticIps";
export const getStaticIps: typeof import("./getStaticIps").getStaticIps = null as any;
export const getStaticIpsOutput: typeof import("./getStaticIps").getStaticIpsOutput = null as any;
utilities.lazyLoad(exports, ["getStaticIps","getStaticIpsOutput"], () => require("./getStaticIps"));

export { HeartbeatCheckArgs, HeartbeatCheckState } from "./heartbeatCheck";
export type HeartbeatCheck = import("./heartbeatCheck").HeartbeatCheck;
export const HeartbeatCheck: typeof import("./heartbeatCheck").HeartbeatCheck = null as any;
utilities.lazyLoad(exports, ["HeartbeatCheck"], () => require("./heartbeatCheck"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { PrivateLocationArgs, PrivateLocationState } from "./privateLocation";
export type PrivateLocation = import("./privateLocation").PrivateLocation;
export const PrivateLocation: typeof import("./privateLocation").PrivateLocation = null as any;
utilities.lazyLoad(exports, ["PrivateLocation"], () => require("./privateLocation"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SnippetArgs, SnippetState } from "./snippet";
export type Snippet = import("./snippet").Snippet;
export const Snippet: typeof import("./snippet").Snippet = null as any;
utilities.lazyLoad(exports, ["Snippet"], () => require("./snippet"));

export { TcpCheckArgs, TcpCheckState } from "./tcpCheck";
export type TcpCheck = import("./tcpCheck").TcpCheck;
export const TcpCheck: typeof import("./tcpCheck").TcpCheck = null as any;
utilities.lazyLoad(exports, ["TcpCheck"], () => require("./tcpCheck"));

export { TriggerCheckArgs, TriggerCheckState } from "./triggerCheck";
export type TriggerCheck = import("./triggerCheck").TriggerCheck;
export const TriggerCheck: typeof import("./triggerCheck").TriggerCheck = null as any;
utilities.lazyLoad(exports, ["TriggerCheck"], () => require("./triggerCheck"));

export { TriggerCheckGroupArgs, TriggerCheckGroupState } from "./triggerCheckGroup";
export type TriggerCheckGroup = import("./triggerCheckGroup").TriggerCheckGroup;
export const TriggerCheckGroup: typeof import("./triggerCheckGroup").TriggerCheckGroup = null as any;
utilities.lazyLoad(exports, ["TriggerCheckGroup"], () => require("./triggerCheckGroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "checkly:index/alertChannel:AlertChannel":
                return new AlertChannel(name, <any>undefined, { urn })
            case "checkly:index/check:Check":
                return new Check(name, <any>undefined, { urn })
            case "checkly:index/checkGroup:CheckGroup":
                return new CheckGroup(name, <any>undefined, { urn })
            case "checkly:index/clientCertificate:ClientCertificate":
                return new ClientCertificate(name, <any>undefined, { urn })
            case "checkly:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "checkly:index/environmentVariable:EnvironmentVariable":
                return new EnvironmentVariable(name, <any>undefined, { urn })
            case "checkly:index/heartbeatCheck:HeartbeatCheck":
                return new HeartbeatCheck(name, <any>undefined, { urn })
            case "checkly:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "checkly:index/privateLocation:PrivateLocation":
                return new PrivateLocation(name, <any>undefined, { urn })
            case "checkly:index/snippet:Snippet":
                return new Snippet(name, <any>undefined, { urn })
            case "checkly:index/tcpCheck:TcpCheck":
                return new TcpCheck(name, <any>undefined, { urn })
            case "checkly:index/triggerCheck:TriggerCheck":
                return new TriggerCheck(name, <any>undefined, { urn })
            case "checkly:index/triggerCheckGroup:TriggerCheckGroup":
                return new TriggerCheckGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("checkly", "index/alertChannel", _module)
pulumi.runtime.registerResourceModule("checkly", "index/check", _module)
pulumi.runtime.registerResourceModule("checkly", "index/checkGroup", _module)
pulumi.runtime.registerResourceModule("checkly", "index/clientCertificate", _module)
pulumi.runtime.registerResourceModule("checkly", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("checkly", "index/environmentVariable", _module)
pulumi.runtime.registerResourceModule("checkly", "index/heartbeatCheck", _module)
pulumi.runtime.registerResourceModule("checkly", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("checkly", "index/privateLocation", _module)
pulumi.runtime.registerResourceModule("checkly", "index/snippet", _module)
pulumi.runtime.registerResourceModule("checkly", "index/tcpCheck", _module)
pulumi.runtime.registerResourceModule("checkly", "index/triggerCheck", _module)
pulumi.runtime.registerResourceModule("checkly", "index/triggerCheckGroup", _module)
pulumi.runtime.registerResourcePackage("checkly", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:checkly") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
