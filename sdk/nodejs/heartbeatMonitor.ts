// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Heartbeats allows you to monitor your cron jobs and set up alerting, so you get a notification when things break or slow down.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * const example_heartbeat_monitor = new checkly.HeartbeatMonitor("example-heartbeat-monitor", {
 *     name: "Example heartbeat monitor",
 *     activated: true,
 *     heartbeat: {
 *         period: 7,
 *         periodUnit: "days",
 *         grace: 1,
 *         graceUnit: "days",
 *     },
 *     useGlobalAlertSettings: true,
 * });
 * ```
 */
export class HeartbeatMonitor extends pulumi.CustomResource {
    /**
     * Get an existing HeartbeatMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HeartbeatMonitorState, opts?: pulumi.CustomResourceOptions): HeartbeatMonitor {
        return new HeartbeatMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/heartbeatMonitor:HeartbeatMonitor';

    /**
     * Returns true if the given object is an instance of HeartbeatMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HeartbeatMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HeartbeatMonitor.__pulumiType;
    }

    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    public readonly activated!: pulumi.Output<boolean>;
    public readonly alertChannelSubscriptions!: pulumi.Output<outputs.HeartbeatMonitorAlertChannelSubscription[] | undefined>;
    public readonly alertSettings!: pulumi.Output<outputs.HeartbeatMonitorAlertSettings>;
    public readonly heartbeat!: pulumi.Output<outputs.HeartbeatMonitorHeartbeat>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    public readonly muted!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the check.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    public readonly useGlobalAlertSettings!: pulumi.Output<boolean | undefined>;

    /**
     * Create a HeartbeatMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HeartbeatMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HeartbeatMonitorArgs | HeartbeatMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HeartbeatMonitorState | undefined;
            resourceInputs["activated"] = state ? state.activated : undefined;
            resourceInputs["alertChannelSubscriptions"] = state ? state.alertChannelSubscriptions : undefined;
            resourceInputs["alertSettings"] = state ? state.alertSettings : undefined;
            resourceInputs["heartbeat"] = state ? state.heartbeat : undefined;
            resourceInputs["muted"] = state ? state.muted : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useGlobalAlertSettings"] = state ? state.useGlobalAlertSettings : undefined;
        } else {
            const args = argsOrState as HeartbeatMonitorArgs | undefined;
            if ((!args || args.activated === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activated'");
            }
            if ((!args || args.heartbeat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'heartbeat'");
            }
            resourceInputs["activated"] = args ? args.activated : undefined;
            resourceInputs["alertChannelSubscriptions"] = args ? args.alertChannelSubscriptions : undefined;
            resourceInputs["alertSettings"] = args ? args.alertSettings : undefined;
            resourceInputs["heartbeat"] = args ? args.heartbeat : undefined;
            resourceInputs["muted"] = args ? args.muted : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useGlobalAlertSettings"] = args ? args.useGlobalAlertSettings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HeartbeatMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HeartbeatMonitor resources.
 */
export interface HeartbeatMonitorState {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated?: pulumi.Input<boolean>;
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.HeartbeatMonitorAlertSettings>;
    heartbeat?: pulumi.Input<inputs.HeartbeatMonitorHeartbeat>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a HeartbeatMonitor resource.
 */
export interface HeartbeatMonitorArgs {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated: pulumi.Input<boolean>;
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.HeartbeatMonitorAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.HeartbeatMonitorAlertSettings>;
    heartbeat: pulumi.Input<inputs.HeartbeatMonitorHeartbeat>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}
