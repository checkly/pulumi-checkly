// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use client certificates to authenticate your API checks to APIs that require mutual TLS (mTLS) authentication, or any other authentication scheme where the requester needs to provide a certificate.
 *
 * Each client certificate is specific to a domain name, e.g. `acme.com` and will be used automatically by any API checks targeting that domain.
 *
 * Changing the value of any attribute forces a new resource to be created.
 */
export class ClientCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ClientCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClientCertificateState, opts?: pulumi.CustomResourceOptions): ClientCertificate {
        return new ClientCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/clientCertificate:ClientCertificate';

    /**
     * Returns true if the given object is an instance of ClientCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClientCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClientCertificate.__pulumiType;
    }

    /**
     * The client certificate in PEM format.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The host domain that the certificate should be used for.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Passphrase for the private key.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * The private key for the certificate in PEM format.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
     */
    public readonly trustedCa!: pulumi.Output<string | undefined>;

    /**
     * Create a ClientCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClientCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClientCertificateArgs | ClientCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClientCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["trustedCa"] = state ? state.trustedCa : undefined;
        } else {
            const args = argsOrState as ClientCertificateArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["trustedCa"] = args ? args.trustedCa : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ClientCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClientCertificate resources.
 */
export interface ClientCertificateState {
    /**
     * The client certificate in PEM format.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The host domain that the certificate should be used for.
     */
    host?: pulumi.Input<string>;
    /**
     * Passphrase for the private key.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * The private key for the certificate in PEM format.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
     */
    trustedCa?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClientCertificate resource.
 */
export interface ClientCertificateArgs {
    /**
     * The client certificate in PEM format.
     */
    certificate: pulumi.Input<string>;
    /**
     * The host domain that the certificate should be used for.
     */
    host: pulumi.Input<string>;
    /**
     * Passphrase for the private key.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * The private key for the certificate in PEM format.
     */
    privateKey: pulumi.Input<string>;
    /**
     * PEM formatted bundle of CA certificates that the client should trust. The bundle may contain many CA certificates.
     */
    trustedCa?: pulumi.Input<string>;
}
