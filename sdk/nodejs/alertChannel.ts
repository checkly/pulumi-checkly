// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows you to define alerting channels for the checks and groups in your account
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as checkly from "@checkly/pulumi";
 *
 * // An Email alert channel
 * const emailAc = new checkly.AlertChannel("email_ac", {
 *     email: {
 *         address: "john@example.com",
 *     },
 *     sendRecovery: true,
 *     sendFailure: false,
 *     sendDegraded: true,
 *     sslExpiry: true,
 *     sslExpiryThreshold: 22,
 * });
 * // A SMS alert channel
 * const smsAc = new checkly.AlertChannel("sms_ac", {
 *     sms: {
 *         name: "john",
 *         number: "+5491100001111",
 *     },
 *     sendRecovery: true,
 *     sendFailure: true,
 * });
 * // A Slack alert channel
 * const slackAc = new checkly.AlertChannel("slack_ac", {slack: {
 *     channel: "#checkly-notifications",
 *     url: "https://hooks.slack.com/services/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",
 * }});
 * // An Opsgenie alert channel
 * const opsgenieAc = new checkly.AlertChannel("opsgenie_ac", {opsgenie: {
 *     name: "opsalerts",
 *     apiKey: "fookey",
 *     region: "fooregion",
 *     priority: "foopriority",
 * }});
 * // A Pagerduty alert channel
 * const pagerdutyAc = new checkly.AlertChannel("pagerduty_ac", {pagerduty: {
 *     account: "checkly",
 *     serviceKey: "key1",
 *     serviceName: "pdalert",
 * }});
 * // A Webhook alert channel
 * const webhookAc = new checkly.AlertChannel("webhook_ac", {webhook: {
 *     name: "foo",
 *     method: "get",
 *     template: "footemplate",
 *     url: "https://example.com/foo",
 *     webhookSecret: "foosecret",
 * }});
 * // A Firehydran alert channel integration
 * const firehydrantAc = new checkly.AlertChannel("firehydrant_ac", {webhook: {
 *     name: "firehydrant",
 *     method: "post",
 *     template: `{
 *   "event": "{{ALERT_TITLE}}",
 *   "link": "{{RESULT_LINK}}",
 *   "check_id": "{{CHECK_ID}}",
 *   "check_type": "{{CHECK_TYPE}}",
 *   "alert_type": "{{ALERT_TYPE}}",
 *   "started_at": "{{STARTED_AT}}",
 *   "check_result_id": "{{CHECK_RESULT_ID}}"
 * },
 * `,
 *     url: "https://app.firehydrant.io/integrations/alerting/webhooks/2/checkly",
 *     webhookType: "WEBHOOK_FIREHYDRANT",
 * }});
 * // Connecting the alert channel to a check
 * const exampleCheck = new checkly.Check("example_check", {
 *     name: "Example check",
 *     alertChannelSubscriptions: [
 *         {
 *             channelId: emailAc.id,
 *             activated: true,
 *         },
 *         {
 *             channelId: smsAc.id,
 *             activated: true,
 *         },
 *     ],
 * });
 * ```
 */
export class AlertChannel extends pulumi.CustomResource {
    /**
     * Get an existing AlertChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertChannelState, opts?: pulumi.CustomResourceOptions): AlertChannel {
        return new AlertChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/alertChannel:AlertChannel';

    /**
     * Returns true if the given object is an instance of AlertChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertChannel.__pulumiType;
    }

    public readonly call!: pulumi.Output<outputs.AlertChannelCall | undefined>;
    public readonly email!: pulumi.Output<outputs.AlertChannelEmail | undefined>;
    public readonly opsgenie!: pulumi.Output<outputs.AlertChannelOpsgenie | undefined>;
    public readonly pagerduty!: pulumi.Output<outputs.AlertChannelPagerduty | undefined>;
    /**
     * (Default `false`)
     */
    public readonly sendDegraded!: pulumi.Output<boolean | undefined>;
    /**
     * (Default `true`)
     */
    public readonly sendFailure!: pulumi.Output<boolean | undefined>;
    /**
     * (Default `true`)
     */
    public readonly sendRecovery!: pulumi.Output<boolean | undefined>;
    public readonly slack!: pulumi.Output<outputs.AlertChannelSlack | undefined>;
    public readonly sms!: pulumi.Output<outputs.AlertChannelSms | undefined>;
    /**
     * (Default `false`)
     */
    public readonly sslExpiry!: pulumi.Output<boolean | undefined>;
    /**
     * Value must be between 1 and 30 (Default `30`)
     */
    public readonly sslExpiryThreshold!: pulumi.Output<number | undefined>;
    public readonly webhook!: pulumi.Output<outputs.AlertChannelWebhook | undefined>;

    /**
     * Create a AlertChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlertChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertChannelArgs | AlertChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertChannelState | undefined;
            resourceInputs["call"] = state ? state.call : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["opsgenie"] = state ? state.opsgenie : undefined;
            resourceInputs["pagerduty"] = state ? state.pagerduty : undefined;
            resourceInputs["sendDegraded"] = state ? state.sendDegraded : undefined;
            resourceInputs["sendFailure"] = state ? state.sendFailure : undefined;
            resourceInputs["sendRecovery"] = state ? state.sendRecovery : undefined;
            resourceInputs["slack"] = state ? state.slack : undefined;
            resourceInputs["sms"] = state ? state.sms : undefined;
            resourceInputs["sslExpiry"] = state ? state.sslExpiry : undefined;
            resourceInputs["sslExpiryThreshold"] = state ? state.sslExpiryThreshold : undefined;
            resourceInputs["webhook"] = state ? state.webhook : undefined;
        } else {
            const args = argsOrState as AlertChannelArgs | undefined;
            resourceInputs["call"] = args ? args.call : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["opsgenie"] = args ? args.opsgenie : undefined;
            resourceInputs["pagerduty"] = args ? args.pagerduty : undefined;
            resourceInputs["sendDegraded"] = args ? args.sendDegraded : undefined;
            resourceInputs["sendFailure"] = args ? args.sendFailure : undefined;
            resourceInputs["sendRecovery"] = args ? args.sendRecovery : undefined;
            resourceInputs["slack"] = args ? args.slack : undefined;
            resourceInputs["sms"] = args ? args.sms : undefined;
            resourceInputs["sslExpiry"] = args ? args.sslExpiry : undefined;
            resourceInputs["sslExpiryThreshold"] = args ? args.sslExpiryThreshold : undefined;
            resourceInputs["webhook"] = args ? args.webhook : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertChannel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertChannel resources.
 */
export interface AlertChannelState {
    call?: pulumi.Input<inputs.AlertChannelCall>;
    email?: pulumi.Input<inputs.AlertChannelEmail>;
    opsgenie?: pulumi.Input<inputs.AlertChannelOpsgenie>;
    pagerduty?: pulumi.Input<inputs.AlertChannelPagerduty>;
    /**
     * (Default `false`)
     */
    sendDegraded?: pulumi.Input<boolean>;
    /**
     * (Default `true`)
     */
    sendFailure?: pulumi.Input<boolean>;
    /**
     * (Default `true`)
     */
    sendRecovery?: pulumi.Input<boolean>;
    slack?: pulumi.Input<inputs.AlertChannelSlack>;
    sms?: pulumi.Input<inputs.AlertChannelSms>;
    /**
     * (Default `false`)
     */
    sslExpiry?: pulumi.Input<boolean>;
    /**
     * Value must be between 1 and 30 (Default `30`)
     */
    sslExpiryThreshold?: pulumi.Input<number>;
    webhook?: pulumi.Input<inputs.AlertChannelWebhook>;
}

/**
 * The set of arguments for constructing a AlertChannel resource.
 */
export interface AlertChannelArgs {
    call?: pulumi.Input<inputs.AlertChannelCall>;
    email?: pulumi.Input<inputs.AlertChannelEmail>;
    opsgenie?: pulumi.Input<inputs.AlertChannelOpsgenie>;
    pagerduty?: pulumi.Input<inputs.AlertChannelPagerduty>;
    /**
     * (Default `false`)
     */
    sendDegraded?: pulumi.Input<boolean>;
    /**
     * (Default `true`)
     */
    sendFailure?: pulumi.Input<boolean>;
    /**
     * (Default `true`)
     */
    sendRecovery?: pulumi.Input<boolean>;
    slack?: pulumi.Input<inputs.AlertChannelSlack>;
    sms?: pulumi.Input<inputs.AlertChannelSms>;
    /**
     * (Default `false`)
     */
    sslExpiry?: pulumi.Input<boolean>;
    /**
     * Value must be between 1 and 30 (Default `30`)
     */
    sslExpiryThreshold?: pulumi.Input<number>;
    webhook?: pulumi.Input<inputs.AlertChannelWebhook>;
}
