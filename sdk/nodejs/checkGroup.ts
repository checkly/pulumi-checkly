// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Check groups allow  you to group together a set of related checks, which can also share default settings for various attributes.
 */
export class CheckGroup extends pulumi.CustomResource {
    /**
     * Get an existing CheckGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckGroupState, opts?: pulumi.CustomResourceOptions): CheckGroup {
        return new CheckGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/checkGroup:CheckGroup';

    /**
     * Returns true if the given object is an instance of CheckGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CheckGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CheckGroup.__pulumiType;
    }

    /**
     * Determines if the checks in the group are running or not.
     */
    declare public readonly activated: pulumi.Output<boolean>;
    declare public readonly alertChannelSubscriptions: pulumi.Output<outputs.CheckGroupAlertChannelSubscription[] | undefined>;
    declare public readonly alertSettings: pulumi.Output<outputs.CheckGroupAlertSettings>;
    declare public readonly apiCheckDefaults: pulumi.Output<outputs.CheckGroupApiCheckDefaults>;
    /**
     * Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.
     */
    declare public readonly concurrency: pulumi.Output<number>;
    /**
     * Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. (Default `false`).
     *
     * @deprecated The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
     */
    declare public readonly doubleCheck: pulumi.Output<boolean | undefined>;
    /**
     * Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
     */
    declare public readonly environmentVariable: pulumi.Output<outputs.CheckGroupEnvironmentVariable[] | undefined>;
    /**
     * Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
     *
     * @deprecated The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
     */
    declare public readonly environmentVariables: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A valid piece of Node.js code to run in the setup phase of an API check in this group.
     */
    declare public readonly localSetupScript: pulumi.Output<string | undefined>;
    /**
     * A valid piece of Node.js code to run in the teardown phase of an API check in this group.
     */
    declare public readonly localTeardownScript: pulumi.Output<string | undefined>;
    /**
     * An array of one or more data center locations where to run the checks.
     */
    declare public readonly locations: pulumi.Output<string[] | undefined>;
    /**
     * Determines if any notifications will be sent out when a check in this group fails and/or recovers.
     */
    declare public readonly muted: pulumi.Output<boolean | undefined>;
    /**
     * The name of the check group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * An array of one or more private locations slugs.
     */
    declare public readonly privateLocations: pulumi.Output<string[] | undefined>;
    /**
     * A strategy for retrying failed check/monitor runs.
     */
    declare public readonly retryStrategy: pulumi.Output<outputs.CheckGroupRetryStrategy>;
    /**
     * Determines if the checks in the group should run in all selected locations in parallel or round-robin.
     */
    declare public readonly runParallel: pulumi.Output<boolean | undefined>;
    /**
     * The id of the runtime to use for this group.
     */
    declare public readonly runtimeId: pulumi.Output<string | undefined>;
    /**
     * An ID reference to a snippet to use in the setup phase of an API check.
     */
    declare public readonly setupSnippetId: pulumi.Output<number | undefined>;
    /**
     * Tags for organizing and filtering checks.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * An ID reference to a snippet to use in the teardown phase of an API check.
     */
    declare public readonly teardownSnippetId: pulumi.Output<number | undefined>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check group.
     */
    declare public readonly useGlobalAlertSettings: pulumi.Output<boolean | undefined>;

    /**
     * Create a CheckGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CheckGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckGroupArgs | CheckGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckGroupState | undefined;
            resourceInputs["activated"] = state?.activated;
            resourceInputs["alertChannelSubscriptions"] = state?.alertChannelSubscriptions;
            resourceInputs["alertSettings"] = state?.alertSettings;
            resourceInputs["apiCheckDefaults"] = state?.apiCheckDefaults;
            resourceInputs["concurrency"] = state?.concurrency;
            resourceInputs["doubleCheck"] = state?.doubleCheck;
            resourceInputs["environmentVariable"] = state?.environmentVariable;
            resourceInputs["environmentVariables"] = state?.environmentVariables;
            resourceInputs["localSetupScript"] = state?.localSetupScript;
            resourceInputs["localTeardownScript"] = state?.localTeardownScript;
            resourceInputs["locations"] = state?.locations;
            resourceInputs["muted"] = state?.muted;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateLocations"] = state?.privateLocations;
            resourceInputs["retryStrategy"] = state?.retryStrategy;
            resourceInputs["runParallel"] = state?.runParallel;
            resourceInputs["runtimeId"] = state?.runtimeId;
            resourceInputs["setupSnippetId"] = state?.setupSnippetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["teardownSnippetId"] = state?.teardownSnippetId;
            resourceInputs["useGlobalAlertSettings"] = state?.useGlobalAlertSettings;
        } else {
            const args = argsOrState as CheckGroupArgs | undefined;
            if (args?.activated === undefined && !opts.urn) {
                throw new Error("Missing required property 'activated'");
            }
            if (args?.concurrency === undefined && !opts.urn) {
                throw new Error("Missing required property 'concurrency'");
            }
            resourceInputs["activated"] = args?.activated;
            resourceInputs["alertChannelSubscriptions"] = args?.alertChannelSubscriptions;
            resourceInputs["alertSettings"] = args?.alertSettings;
            resourceInputs["apiCheckDefaults"] = args ? (args.apiCheckDefaults ? pulumi.output(args.apiCheckDefaults).apply(inputs.checkGroupApiCheckDefaultsProvideDefaults) : undefined) : undefined;
            resourceInputs["concurrency"] = args?.concurrency;
            resourceInputs["doubleCheck"] = args?.doubleCheck;
            resourceInputs["environmentVariable"] = args?.environmentVariable;
            resourceInputs["environmentVariables"] = args?.environmentVariables;
            resourceInputs["localSetupScript"] = args?.localSetupScript;
            resourceInputs["localTeardownScript"] = args?.localTeardownScript;
            resourceInputs["locations"] = args?.locations;
            resourceInputs["muted"] = args?.muted;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateLocations"] = args?.privateLocations;
            resourceInputs["retryStrategy"] = args?.retryStrategy;
            resourceInputs["runParallel"] = args?.runParallel;
            resourceInputs["runtimeId"] = args?.runtimeId;
            resourceInputs["setupSnippetId"] = args?.setupSnippetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["teardownSnippetId"] = args?.teardownSnippetId;
            resourceInputs["useGlobalAlertSettings"] = args?.useGlobalAlertSettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CheckGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CheckGroup resources.
 */
export interface CheckGroupState {
    /**
     * Determines if the checks in the group are running or not.
     */
    activated?: pulumi.Input<boolean>;
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.CheckGroupAlertSettings>;
    apiCheckDefaults?: pulumi.Input<inputs.CheckGroupApiCheckDefaults>;
    /**
     * Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.
     */
    concurrency?: pulumi.Input<number>;
    /**
     * Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. (Default `false`).
     *
     * @deprecated The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
     */
    doubleCheck?: pulumi.Input<boolean>;
    /**
     * Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
     */
    environmentVariable?: pulumi.Input<pulumi.Input<inputs.CheckGroupEnvironmentVariable>[]>;
    /**
     * Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
     *
     * @deprecated The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A valid piece of Node.js code to run in the setup phase of an API check in this group.
     */
    localSetupScript?: pulumi.Input<string>;
    /**
     * A valid piece of Node.js code to run in the teardown phase of an API check in this group.
     */
    localTeardownScript?: pulumi.Input<string>;
    /**
     * An array of one or more data center locations where to run the checks.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if any notifications will be sent out when a check in this group fails and/or recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check group.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of one or more private locations slugs.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A strategy for retrying failed check/monitor runs.
     */
    retryStrategy?: pulumi.Input<inputs.CheckGroupRetryStrategy>;
    /**
     * Determines if the checks in the group should run in all selected locations in parallel or round-robin.
     */
    runParallel?: pulumi.Input<boolean>;
    /**
     * The id of the runtime to use for this group.
     */
    runtimeId?: pulumi.Input<string>;
    /**
     * An ID reference to a snippet to use in the setup phase of an API check.
     */
    setupSnippetId?: pulumi.Input<number>;
    /**
     * Tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An ID reference to a snippet to use in the teardown phase of an API check.
     */
    teardownSnippetId?: pulumi.Input<number>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check group.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CheckGroup resource.
 */
export interface CheckGroupArgs {
    /**
     * Determines if the checks in the group are running or not.
     */
    activated: pulumi.Input<boolean>;
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.CheckGroupAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.CheckGroupAlertSettings>;
    apiCheckDefaults?: pulumi.Input<inputs.CheckGroupApiCheckDefaults>;
    /**
     * Determines how many checks are run concurrently when triggering a check group from CI/CD or through the API.
     */
    concurrency: pulumi.Input<number>;
    /**
     * Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. (Default `false`).
     *
     * @deprecated The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
     */
    doubleCheck?: pulumi.Input<boolean>;
    /**
     * Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
     */
    environmentVariable?: pulumi.Input<pulumi.Input<inputs.CheckGroupEnvironmentVariable>[]>;
    /**
     * Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
     *
     * @deprecated The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A valid piece of Node.js code to run in the setup phase of an API check in this group.
     */
    localSetupScript?: pulumi.Input<string>;
    /**
     * A valid piece of Node.js code to run in the teardown phase of an API check in this group.
     */
    localTeardownScript?: pulumi.Input<string>;
    /**
     * An array of one or more data center locations where to run the checks.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines if any notifications will be sent out when a check in this group fails and/or recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check group.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of one or more private locations slugs.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A strategy for retrying failed check/monitor runs.
     */
    retryStrategy?: pulumi.Input<inputs.CheckGroupRetryStrategy>;
    /**
     * Determines if the checks in the group should run in all selected locations in parallel or round-robin.
     */
    runParallel?: pulumi.Input<boolean>;
    /**
     * The id of the runtime to use for this group.
     */
    runtimeId?: pulumi.Input<string>;
    /**
     * An ID reference to a snippet to use in the setup phase of an API check.
     */
    setupSnippetId?: pulumi.Input<number>;
    /**
     * Tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An ID reference to a snippet to use in the teardown phase of an API check.
     */
    teardownSnippetId?: pulumi.Input<number>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check group.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}
