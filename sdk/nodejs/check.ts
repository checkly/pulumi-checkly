// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Checks allows you to monitor key webapp flows, backend API's and set up alerting, so you get a notification when things break or slow down.
 */
export class Check extends pulumi.CustomResource {
    /**
     * Get an existing Check resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckState, opts?: pulumi.CustomResourceOptions): Check {
        return new Check(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkly:index/check:Check';

    /**
     * Returns true if the given object is an instance of Check.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Check {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Check.__pulumiType;
    }

    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    declare public readonly activated: pulumi.Output<boolean>;
    /**
     * An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
     */
    declare public readonly alertChannelSubscriptions: pulumi.Output<outputs.CheckAlertChannelSubscription[] | undefined>;
    declare public readonly alertSettings: pulumi.Output<outputs.CheckAlertSettings>;
    /**
     * The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
     */
    declare public readonly degradedResponseTime: pulumi.Output<number | undefined>;
    /**
     * Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. (Default `false`).
     *
     * @deprecated The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
     */
    declare public readonly doubleCheck: pulumi.Output<boolean | undefined>;
    /**
     * Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
     */
    declare public readonly environmentVariable: pulumi.Output<outputs.CheckEnvironmentVariable[] | undefined>;
    /**
     * Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
     *
     * @deprecated The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
     */
    declare public readonly environmentVariables: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
     */
    declare public readonly frequency: pulumi.Output<number>;
    /**
     * This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
     */
    declare public readonly frequencyOffset: pulumi.Output<number | undefined>;
    /**
     * The id of the check group this check is part of.
     */
    declare public readonly groupId: pulumi.Output<number | undefined>;
    /**
     * The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
     */
    declare public readonly groupOrder: pulumi.Output<number | undefined>;
    /**
     * A valid piece of Node.js code to run in the setup phase.
     */
    declare public readonly localSetupScript: pulumi.Output<string | undefined>;
    /**
     * A valid piece of Node.js code to run in the teardown phase.
     */
    declare public readonly localTeardownScript: pulumi.Output<string | undefined>;
    /**
     * An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
     */
    declare public readonly locations: pulumi.Output<string[] | undefined>;
    /**
     * The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
     */
    declare public readonly maxResponseTime: pulumi.Output<number | undefined>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    declare public readonly muted: pulumi.Output<boolean | undefined>;
    /**
     * The name of the check.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * An array of one or more private locations slugs.
     */
    declare public readonly privateLocations: pulumi.Output<string[] | undefined>;
    /**
     * An API check might have one request config.
     */
    declare public readonly request: pulumi.Output<outputs.CheckRequest | undefined>;
    /**
     * A strategy for retrying failed check/monitor runs.
     */
    declare public readonly retryStrategy: pulumi.Output<outputs.CheckRetryStrategy>;
    /**
     * Determines if the check should run in all selected locations in parallel or round-robin.
     */
    declare public readonly runParallel: pulumi.Output<boolean | undefined>;
    /**
     * The id of the runtime to use for this check.
     */
    declare public readonly runtimeId: pulumi.Output<string | undefined>;
    /**
     * A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
     */
    declare public readonly script: pulumi.Output<string | undefined>;
    /**
     * An ID reference to a snippet to use in the setup phase of an API check.
     */
    declare public readonly setupSnippetId: pulumi.Output<number | undefined>;
    /**
     * Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
     */
    declare public readonly shouldFail: pulumi.Output<boolean | undefined>;
    /**
     * Determines if the SSL certificate should be validated for expiry.
     *
     * @deprecated The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    declare public readonly sslCheck: pulumi.Output<boolean | undefined>;
    /**
     * A valid fully qualified domain name (FQDN) to check its SSL certificate.
     */
    declare public readonly sslCheckDomain: pulumi.Output<string | undefined>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * An ID reference to a snippet to use in the teardown phase of an API check.
     */
    declare public readonly teardownSnippetId: pulumi.Output<number | undefined>;
    /**
     * Create and resolve an incident based on the alert configuration. Useful for status page automation.
     */
    declare public readonly triggerIncident: pulumi.Output<outputs.CheckTriggerIncident | undefined>;
    /**
     * The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    declare public readonly useGlobalAlertSettings: pulumi.Output<boolean | undefined>;

    /**
     * Create a Check resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckArgs | CheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckState | undefined;
            resourceInputs["activated"] = state?.activated;
            resourceInputs["alertChannelSubscriptions"] = state?.alertChannelSubscriptions;
            resourceInputs["alertSettings"] = state?.alertSettings;
            resourceInputs["degradedResponseTime"] = state?.degradedResponseTime;
            resourceInputs["doubleCheck"] = state?.doubleCheck;
            resourceInputs["environmentVariable"] = state?.environmentVariable;
            resourceInputs["environmentVariables"] = state?.environmentVariables;
            resourceInputs["frequency"] = state?.frequency;
            resourceInputs["frequencyOffset"] = state?.frequencyOffset;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["groupOrder"] = state?.groupOrder;
            resourceInputs["localSetupScript"] = state?.localSetupScript;
            resourceInputs["localTeardownScript"] = state?.localTeardownScript;
            resourceInputs["locations"] = state?.locations;
            resourceInputs["maxResponseTime"] = state?.maxResponseTime;
            resourceInputs["muted"] = state?.muted;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateLocations"] = state?.privateLocations;
            resourceInputs["request"] = state?.request;
            resourceInputs["retryStrategy"] = state?.retryStrategy;
            resourceInputs["runParallel"] = state?.runParallel;
            resourceInputs["runtimeId"] = state?.runtimeId;
            resourceInputs["script"] = state?.script;
            resourceInputs["setupSnippetId"] = state?.setupSnippetId;
            resourceInputs["shouldFail"] = state?.shouldFail;
            resourceInputs["sslCheck"] = state?.sslCheck;
            resourceInputs["sslCheckDomain"] = state?.sslCheckDomain;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["teardownSnippetId"] = state?.teardownSnippetId;
            resourceInputs["triggerIncident"] = state?.triggerIncident;
            resourceInputs["type"] = state?.type;
            resourceInputs["useGlobalAlertSettings"] = state?.useGlobalAlertSettings;
        } else {
            const args = argsOrState as CheckArgs | undefined;
            if (args?.activated === undefined && !opts.urn) {
                throw new Error("Missing required property 'activated'");
            }
            if (args?.frequency === undefined && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["activated"] = args?.activated;
            resourceInputs["alertChannelSubscriptions"] = args?.alertChannelSubscriptions;
            resourceInputs["alertSettings"] = args?.alertSettings;
            resourceInputs["degradedResponseTime"] = args?.degradedResponseTime;
            resourceInputs["doubleCheck"] = args?.doubleCheck;
            resourceInputs["environmentVariable"] = args?.environmentVariable;
            resourceInputs["environmentVariables"] = args?.environmentVariables;
            resourceInputs["frequency"] = args?.frequency;
            resourceInputs["frequencyOffset"] = args?.frequencyOffset;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["groupOrder"] = args?.groupOrder;
            resourceInputs["localSetupScript"] = args?.localSetupScript;
            resourceInputs["localTeardownScript"] = args?.localTeardownScript;
            resourceInputs["locations"] = args?.locations;
            resourceInputs["maxResponseTime"] = args?.maxResponseTime;
            resourceInputs["muted"] = args?.muted;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateLocations"] = args?.privateLocations;
            resourceInputs["request"] = args?.request;
            resourceInputs["retryStrategy"] = args?.retryStrategy;
            resourceInputs["runParallel"] = args?.runParallel;
            resourceInputs["runtimeId"] = args?.runtimeId;
            resourceInputs["script"] = args?.script;
            resourceInputs["setupSnippetId"] = args?.setupSnippetId;
            resourceInputs["shouldFail"] = args?.shouldFail;
            resourceInputs["sslCheck"] = args?.sslCheck;
            resourceInputs["sslCheckDomain"] = args?.sslCheckDomain;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["teardownSnippetId"] = args?.teardownSnippetId;
            resourceInputs["triggerIncident"] = args?.triggerIncident;
            resourceInputs["type"] = args?.type;
            resourceInputs["useGlobalAlertSettings"] = args?.useGlobalAlertSettings;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Check.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Check resources.
 */
export interface CheckState {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated?: pulumi.Input<boolean>;
    /**
     * An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
     */
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.CheckAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.CheckAlertSettings>;
    /**
     * The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
     */
    degradedResponseTime?: pulumi.Input<number>;
    /**
     * Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. (Default `false`).
     *
     * @deprecated The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
     */
    doubleCheck?: pulumi.Input<boolean>;
    /**
     * Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
     */
    environmentVariable?: pulumi.Input<pulumi.Input<inputs.CheckEnvironmentVariable>[]>;
    /**
     * Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
     *
     * @deprecated The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
     */
    frequency?: pulumi.Input<number>;
    /**
     * This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
     */
    frequencyOffset?: pulumi.Input<number>;
    /**
     * The id of the check group this check is part of.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
     */
    groupOrder?: pulumi.Input<number>;
    /**
     * A valid piece of Node.js code to run in the setup phase.
     */
    localSetupScript?: pulumi.Input<string>;
    /**
     * A valid piece of Node.js code to run in the teardown phase.
     */
    localTeardownScript?: pulumi.Input<string>;
    /**
     * An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
     */
    maxResponseTime?: pulumi.Input<number>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of one or more private locations slugs.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An API check might have one request config.
     */
    request?: pulumi.Input<inputs.CheckRequest>;
    /**
     * A strategy for retrying failed check/monitor runs.
     */
    retryStrategy?: pulumi.Input<inputs.CheckRetryStrategy>;
    /**
     * Determines if the check should run in all selected locations in parallel or round-robin.
     */
    runParallel?: pulumi.Input<boolean>;
    /**
     * The id of the runtime to use for this check.
     */
    runtimeId?: pulumi.Input<string>;
    /**
     * A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
     */
    script?: pulumi.Input<string>;
    /**
     * An ID reference to a snippet to use in the setup phase of an API check.
     */
    setupSnippetId?: pulumi.Input<number>;
    /**
     * Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
     */
    shouldFail?: pulumi.Input<boolean>;
    /**
     * Determines if the SSL certificate should be validated for expiry.
     *
     * @deprecated The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    sslCheck?: pulumi.Input<boolean>;
    /**
     * A valid fully qualified domain name (FQDN) to check its SSL certificate.
     */
    sslCheckDomain?: pulumi.Input<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An ID reference to a snippet to use in the teardown phase of an API check.
     */
    teardownSnippetId?: pulumi.Input<number>;
    /**
     * Create and resolve an incident based on the alert configuration. Useful for status page automation.
     */
    triggerIncident?: pulumi.Input<inputs.CheckTriggerIncident>;
    /**
     * The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
     */
    type?: pulumi.Input<string>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Check resource.
 */
export interface CheckArgs {
    /**
     * Determines if the check is running or not. Possible values `true`, and `false`.
     */
    activated: pulumi.Input<boolean>;
    /**
     * An array of channel IDs and whether they're activated or not. If you don't set at least one alert subscription for your check, we won't be able to alert you in case something goes wrong with it.
     */
    alertChannelSubscriptions?: pulumi.Input<pulumi.Input<inputs.CheckAlertChannelSubscription>[]>;
    alertSettings?: pulumi.Input<inputs.CheckAlertSettings>;
    /**
     * The response time in milliseconds starting from which a check should be considered degraded. Possible values are between 0 and 30000. (Default `15000`).
     */
    degradedResponseTime?: pulumi.Input<number>;
    /**
     * Setting this to `true` will trigger a retry when a check fails from the failing region and another, randomly selected region before marking the check as failed. (Default `false`).
     *
     * @deprecated The property `doubleCheck` is deprecated and will be removed in a future version. To enable retries for failed check runs, use the `retryStrategy` property instead.
     */
    doubleCheck?: pulumi.Input<boolean>;
    /**
     * Key/value pairs for setting environment variables during check execution, add locked = true to keep value hidden, add secret = true to create a secret variable. These are only relevant for browser checks. Use global environment variables whenever possible.
     */
    environmentVariable?: pulumi.Input<pulumi.Input<inputs.CheckEnvironmentVariable>[]>;
    /**
     * Key/value pairs for setting environment variables during check execution. These are only relevant for browser checks. Use global environment variables whenever possible.
     *
     * @deprecated The property `environmentVariables` is deprecated and will be removed in a future version. Consider using the new `environmentVariable` list.
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The frequency in minutes to run the check. Possible values are `0`, `1`, `2`, `5`, `10`, `15`, `30`, `60`, `120`, `180`, `360`, `720`, and `1440`.
     */
    frequency: pulumi.Input<number>;
    /**
     * This property only valid for API high frequency checks. To create a hight frequency check, the property `frequency` must be `0` and `frequencyOffset` could be `10`, `20` or `30`.
     */
    frequencyOffset?: pulumi.Input<number>;
    /**
     * The id of the check group this check is part of.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The position of this check in a check group. It determines in what order checks are run when a group is triggered from the API or from CI/CD.
     */
    groupOrder?: pulumi.Input<number>;
    /**
     * A valid piece of Node.js code to run in the setup phase.
     */
    localSetupScript?: pulumi.Input<string>;
    /**
     * A valid piece of Node.js code to run in the teardown phase.
     */
    localTeardownScript?: pulumi.Input<string>;
    /**
     * An array of one or more data center locations where to run the this check. (Default ["us-east-1"])
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The response time in milliseconds starting from which a check should be considered failing. Possible values are between 0 and 30000. (Default `30000`).
     */
    maxResponseTime?: pulumi.Input<number>;
    /**
     * Determines if any notifications will be sent out when a check fails/degrades/recovers.
     */
    muted?: pulumi.Input<boolean>;
    /**
     * The name of the check.
     */
    name?: pulumi.Input<string>;
    /**
     * An array of one or more private locations slugs.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An API check might have one request config.
     */
    request?: pulumi.Input<inputs.CheckRequest>;
    /**
     * A strategy for retrying failed check/monitor runs.
     */
    retryStrategy?: pulumi.Input<inputs.CheckRetryStrategy>;
    /**
     * Determines if the check should run in all selected locations in parallel or round-robin.
     */
    runParallel?: pulumi.Input<boolean>;
    /**
     * The id of the runtime to use for this check.
     */
    runtimeId?: pulumi.Input<string>;
    /**
     * A valid piece of Node.js JavaScript code describing a browser interaction with the Puppeteer/Playwright framework or a reference to an external JavaScript file.
     */
    script?: pulumi.Input<string>;
    /**
     * An ID reference to a snippet to use in the setup phase of an API check.
     */
    setupSnippetId?: pulumi.Input<number>;
    /**
     * Allows to invert the behaviour of when a check is considered to fail. Allows for validating error status like 404.
     */
    shouldFail?: pulumi.Input<boolean>;
    /**
     * Determines if the SSL certificate should be validated for expiry.
     *
     * @deprecated The property `sslCheck` is deprecated and it's ignored by the Checkly Public API. It will be removed in a future version.
     */
    sslCheck?: pulumi.Input<boolean>;
    /**
     * A valid fully qualified domain name (FQDN) to check its SSL certificate.
     */
    sslCheckDomain?: pulumi.Input<string>;
    /**
     * A list of tags for organizing and filtering checks.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An ID reference to a snippet to use in the teardown phase of an API check.
     */
    teardownSnippetId?: pulumi.Input<number>;
    /**
     * Create and resolve an incident based on the alert configuration. Useful for status page automation.
     */
    triggerIncident?: pulumi.Input<inputs.CheckTriggerIncident>;
    /**
     * The type of the check. Possible values are `API`, `BROWSER`, and `MULTI_STEP`.
     */
    type: pulumi.Input<string>;
    /**
     * When true, the account level alert settings will be used, not the alert setting defined on this check.
     */
    useGlobalAlertSettings?: pulumi.Input<boolean>;
}
